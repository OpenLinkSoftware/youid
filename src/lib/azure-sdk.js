(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["AzureServiceClient"] = factory();
	else
		root["AzureServiceClient"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/base64-js/index.js":
/*!*************************************************!*\
  !*** (webpack)/node_modules/base64-js/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/buffer/index.js":
/*!**********************************************!*\
  !*** (webpack)/node_modules/buffer/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/events/events.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/events/events.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function eventListener() {
      if (errorListener !== undefined) {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };
    var errorListener;

    // Adding an error listener is not optional because
    // if an error is thrown on an event emitter we cannot
    // guarantee that the actual event we are waiting will
    // be fired. The result could be a silent way to create
    // memory or file descriptor leaks, which is something
    // we should avoid.
    if (name !== 'error') {
      errorListener = function errorListener(err) {
        emitter.removeListener(name, eventListener);
        reject(err);
      };

      emitter.once('error', errorListener);
    }

    emitter.once(name, eventListener);
  });
}


/***/ }),

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/ieee754/index.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/ieee754/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/isarray/index.js":
/*!***********************************************!*\
  !*** (webpack)/node_modules/isarray/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js":
/*!*************************************************!*\
  !*** (webpack)/node_modules/process/browser.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/setimmediate/setImmediate.js":
/*!***********************************************************!*\
  !*** (webpack)/node_modules/setimmediate/setImmediate.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js")))

/***/ }),

/***/ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/timers-browserify/main.js":
/*!********************************************************!*\
  !*** (webpack)/node_modules/timers-browserify/main.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buildin/global.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js ***!
  \******************************************************************************/
/*! exports provided: AbortError, AbortController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbortError", function() { return AbortError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbortController", function() { return AbortController; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/@azure/abort-controller/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _AbortSignal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbortSignal */ "./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js");


/**
 * This error is thrown when an asynchronous operation has been aborted.
 * Check for this error by testing the `name` that the name property of the
 * error matches `"AbortError"`.
 *
 * @example
 * const controller = new AbortController();
 * controller.abort();
 * try {
 *   doAsyncWork(controller.signal)
 * } catch (e) {
 *   if (e.name === 'AbortError') {
 *     // handle abort error here.
 *   }
 * }
 */
var AbortError = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(AbortError, _super);
    function AbortError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = "AbortError";
        return _this;
    }
    return AbortError;
}(Error));

/**
 * An AbortController provides an AbortSignal and the associated controls to signal
 * that an asynchronous operation should be aborted.
 *
 * @example
 * // Abort an operation when another event fires
 * const controller = new AbortController();
 * const signal = controller.signal;
 * doAsyncWork(signal);
 * button.addEventListener('click', () => controller.abort());
 *
 * @example
 * // Share aborter cross multiple operations in 30s
 * // Upload the same data to 2 different data centers at the same time,
 * // abort another when any of them is finished
 * const controller = AbortController.withTimeout(30 * 1000);
 * doAsyncWork(controller.signal).then(controller.abort);
 * doAsyncWork(controller.signal).then(controller.abort);
 *
 * @example
 * // Cascaded aborting
 * // All operations can't take more than 30 seconds
 * const aborter = Aborter.timeout(30 * 1000);
 *
 * // Following 2 operations can't take more than 25 seconds
 * await doAsyncWork(aborter.withTimeout(25 * 1000));
 * await doAsyncWork(aborter.withTimeout(25 * 1000));
 *
 * @export
 * @class AbortController
 * @implements {AbortSignalLike}
 */
var AbortController = /** @class */ (function () {
    function AbortController(parentSignals) {
        var _this = this;
        this._signal = new _AbortSignal__WEBPACK_IMPORTED_MODULE_1__["AbortSignal"]();
        if (!parentSignals) {
            return;
        }
        // coerce parentSignals into an array
        if (!Array.isArray(parentSignals)) {
            parentSignals = arguments;
        }
        for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {
            var parentSignal = parentSignals_1[_i];
            // if the parent signal has already had abort() called,
            // then call abort on this signal as well.
            if (parentSignal.aborted) {
                this.abort();
            }
            else {
                // when the parent signal aborts, this signal should as well.
                parentSignal.addEventListener("abort", function () {
                    _this.abort();
                });
            }
        }
    }
    Object.defineProperty(AbortController.prototype, "signal", {
        /**
         * The AbortSignal associated with this controller that will signal aborted
         * when the abort method is called on this controller.
         *
         * @readonly
         * @type {AbortSignal}
         * @memberof AbortController
         */
        get: function () {
            return this._signal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Signal that any operations passed this controller's associated abort signal
     * to cancel any remaining work and throw an `AbortError`.
     *
     * @memberof AbortController
     */
    AbortController.prototype.abort = function () {
        Object(_AbortSignal__WEBPACK_IMPORTED_MODULE_1__["abortSignal"])(this._signal);
    };
    /**
     * Creates a new AbortSignal instance that will abort after the provided ms.
     *
     * @static
     * @params {number} ms Elapsed time in milliseconds to trigger an abort.
     * @returns {AbortSignal}
     */
    AbortController.timeout = function (ms) {
        var signal = new _AbortSignal__WEBPACK_IMPORTED_MODULE_1__["AbortSignal"]();
        var timer = setTimeout(_AbortSignal__WEBPACK_IMPORTED_MODULE_1__["abortSignal"], ms, signal);
        // Prevent the active Timer from keeping the Node.js event loop active.
        if (typeof timer.unref === "function") {
            timer.unref();
        }
        return signal;
    };
    return AbortController;
}());

//# sourceMappingURL=AbortController.js.map

/***/ }),

/***/ "./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js ***!
  \**************************************************************************/
/*! exports provided: AbortSignal, abortSignal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbortSignal", function() { return AbortSignal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "abortSignal", function() { return abortSignal; });
var listenersMap = new WeakMap();
var abortedMap = new WeakMap();
/**
 * An aborter instance implements AbortSignal interface, can abort HTTP requests.
 *
 * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.
 * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation
 * cannot or will not ever be cancelled.
 *
 * @example
 * // Abort without timeout
 * await doAsyncWork(AbortSignal.none);
 *
 * @export
 * @class AbortSignal
 * @implements {AbortSignalLike}
 */
var AbortSignal = /** @class */ (function () {
    function AbortSignal() {
        /**
         * onabort event listener.
         *
         * @memberof AbortSignal
         */
        this.onabort = null;
        listenersMap.set(this, []);
        abortedMap.set(this, false);
    }
    Object.defineProperty(AbortSignal.prototype, "aborted", {
        /**
         * Status of whether aborted or not.
         *
         * @readonly
         * @type {boolean}
         * @memberof AbortSignal
         */
        get: function () {
            if (!abortedMap.has(this)) {
                throw new TypeError("Expected `this` to be an instance of AbortSignal.");
            }
            return abortedMap.get(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbortSignal, "none", {
        /**
         * Creates a new AbortSignal instance that will never be aborted.
         *
         * @readonly
         * @static
         * @type {AbortSignal}
         * @memberof AbortSignal
         */
        get: function () {
            return new AbortSignal();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Added new "abort" event listener, only support "abort" event.
     *
     * @param {"abort"} _type Only support "abort" event
     * @param {(this: AbortSignalLike, ev: any) => any} listener
     * @memberof AbortSignal
     */
    AbortSignal.prototype.addEventListener = function (
    // tslint:disable-next-line:variable-name
    _type, listener) {
        if (!listenersMap.has(this)) {
            throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        }
        var listeners = listenersMap.get(this);
        listeners.push(listener);
    };
    /**
     * Remove "abort" event listener, only support "abort" event.
     *
     * @param {"abort"} _type Only support "abort" event
     * @param {(this: AbortSignalLike, ev: any) => any} listener
     * @memberof AbortSignal
     */
    AbortSignal.prototype.removeEventListener = function (
    // tslint:disable-next-line:variable-name
    _type, listener) {
        if (!listenersMap.has(this)) {
            throw new TypeError("Expected `this` to be an instance of AbortSignal.");
        }
        var listeners = listenersMap.get(this);
        var index = listeners.indexOf(listener);
        if (index > -1) {
            listeners.splice(index, 1);
        }
    };
    /**
     * Dispatches a synthetic event to the AbortSignal.
     */
    AbortSignal.prototype.dispatchEvent = function (_event) {
        throw new Error("This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.");
    };
    return AbortSignal;
}());

/**
 * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.
 * Will try to trigger abort event for all linked AbortSignal nodes.
 *
 * - If there is a timeout, the timer will be cancelled.
 * - If aborted is true, nothing will happen.
 *
 * @returns
 * @internal
 */
function abortSignal(signal) {
    if (signal.aborted) {
        return;
    }
    if (signal.onabort) {
        signal.onabort.call(signal);
    }
    var listeners = listenersMap.get(signal);
    if (listeners) {
        listeners.forEach(function (listener) {
            listener.call(signal, { type: "abort" });
        });
    }
    abortedMap.set(signal, true);
}
//# sourceMappingURL=AbortSignal.js.map

/***/ }),

/***/ "./node_modules/@azure/abort-controller/dist-esm/src/aborter.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist-esm/src/aborter.js ***!
  \**********************************************************************/
/*! exports provided: AbortController, AbortError, AbortSignal */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _AbortController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortController */ "./node_modules/@azure/abort-controller/dist-esm/src/AbortController.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbortController", function() { return _AbortController__WEBPACK_IMPORTED_MODULE_0__["AbortController"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbortError", function() { return _AbortController__WEBPACK_IMPORTED_MODULE_0__["AbortError"]; });

/* harmony import */ var _AbortSignal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbortSignal */ "./node_modules/@azure/abort-controller/dist-esm/src/AbortSignal.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AbortSignal", function() { return _AbortSignal__WEBPACK_IMPORTED_MODULE_1__["AbortSignal"]; });

// Changes to Aborter
// * Rename Aborter to AbortSignal
// * Remove withValue and getValue - async context should be solved differently/wholistically, not tied to cancellation
// * Remove withTimeout, it's moved to the controller
// * AbortSignal constructor no longer takes a parent. Cancellation graphs are created from the controller.
// Potential changes to align with DOM Spec
// * dispatchEvent on Signal


//# sourceMappingURL=aborter.js.map

/***/ }),

/***/ "./node_modules/@azure/abort-controller/node_modules/tslib/tslib.es6.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/node_modules/tslib/tslib.es6.js ***!
  \******************************************************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@azure/core-asynciterator-polyfill/dist-esm/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-asynciterator-polyfill/dist-esm/index.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (typeof Symbol === undefined || !Symbol.asyncIterator) {
    Symbol.asyncIterator = Symbol.for("Symbol.asyncIterator");
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist-esm/src/azureKeyCredential.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist-esm/src/azureKeyCredential.js ***!
  \**************************************************************************/
/*! exports provided: AzureKeyCredential */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AzureKeyCredential", function() { return AzureKeyCredential; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A static-key-based credential that supports updating
 * the underlying key value.
 */
var AzureKeyCredential = /** @class */ (function () {
    /**
     * Create an instance of an AzureKeyCredential for use
     * with a service client.
     *
     * @param key the initial value of the key to use in authentication
     */
    function AzureKeyCredential(key) {
        if (!key) {
            throw new Error("key must be a non-empty string");
        }
        this._key = key;
    }
    Object.defineProperty(AzureKeyCredential.prototype, "key", {
        /**
         * The value of the key to be used in authentication
         */
        get: function () {
            return this._key;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Change the value of the key.
     *
     * Updates will take effect upon the next request after
     * updating the key value.
     *
     * @param newKey the new key value to be used
     */
    AzureKeyCredential.prototype.update = function (newKey) {
        this._key = newKey;
    };
    return AzureKeyCredential;
}());

//# sourceMappingURL=azureKeyCredential.js.map

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist-esm/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist-esm/src/index.js ***!
  \*************************************************************/
/*! exports provided: AzureKeyCredential, isTokenCredential */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _azureKeyCredential__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./azureKeyCredential */ "./node_modules/@azure/core-auth/dist-esm/src/azureKeyCredential.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AzureKeyCredential", function() { return _azureKeyCredential__WEBPACK_IMPORTED_MODULE_0__["AzureKeyCredential"]; });

/* harmony import */ var _tokenCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokenCredential */ "./node_modules/@azure/core-auth/dist-esm/src/tokenCredential.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isTokenCredential", function() { return _tokenCredential__WEBPACK_IMPORTED_MODULE_1__["isTokenCredential"]; });

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.


//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist-esm/src/tokenCredential.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist-esm/src/tokenCredential.js ***!
  \***********************************************************************/
/*! exports provided: isTokenCredential */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTokenCredential", function() { return isTokenCredential; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Tests an object to determine whether it implements TokenCredential.
 *
 * @param credential The assumed TokenCredential to be tested.
 */
function isTokenCredential(credential) {
    // Check for an object with a 'getToken' function and possibly with
    // a 'signRequest' function.  We do this check to make sure that
    // a ServiceClientCredentials implementor (like TokenClientCredentials
    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if
    // it doesn't actually implement TokenCredential also.
    return (credential &&
        typeof credential.getToken === "function" &&
        (credential.signRequest === undefined || credential.getToken.length > 0));
}
//# sourceMappingURL=tokenCredential.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/coreHttp.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/coreHttp.js ***!
  \**********************************************************/
/*! exports provided: WebResource, DefaultHttpClient, HttpHeaders, HttpPipelineLogLevel, RestError, operationOptionsToRequestOptionsBase, ServiceClient, flattenResponse, createPipelineFromOptions, QueryCollectionFormat, Constants, BearerTokenAuthenticationPolicy, bearerTokenAuthenticationPolicy, logPolicy, BaseRequestPolicy, RequestPolicyOptions, generateClientRequestIdPolicy, exponentialRetryPolicy, RetryMode, systemErrorRetryPolicy, throttlingRetryPolicy, getDefaultProxySettings, proxyPolicy, redirectPolicy, keepAlivePolicy, KeepAlivePolicy, DisableResponseDecompressionPolicy, disableResponseDecompressionPolicy, signingPolicy, userAgentPolicy, getDefaultUserAgentValue, deserializationPolicy, deserializeResponseBody, tracingPolicy, MapperType, Serializer, serializeObject, stripRequest, stripResponse, delay, executePromisesSequentially, generateUuid, encodeUri, promiseToCallback, promiseToServiceCallback, isValidUuid, applyMixins, isNode, isDuration, URLBuilder, URLQuery, isTokenCredential, ExpiringAccessTokenCache, BasicAuthenticationCredentials, ApiKeyCredentials, TopicCredentials, parseXML, stringifyXML */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _webResource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webResource */ "./node_modules/@azure/core-http/es/src/webResource.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebResource", function() { return _webResource__WEBPACK_IMPORTED_MODULE_0__["WebResource"]; });

/* harmony import */ var _defaultHttpClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./defaultHttpClient */ "./node_modules/@azure/core-http/es/src/defaultHttpClient.browser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultHttpClient", function() { return _defaultHttpClient__WEBPACK_IMPORTED_MODULE_1__["DefaultHttpClient"]; });

/* harmony import */ var _httpHeaders__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./httpHeaders */ "./node_modules/@azure/core-http/es/src/httpHeaders.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpHeaders", function() { return _httpHeaders__WEBPACK_IMPORTED_MODULE_2__["HttpHeaders"]; });

/* harmony import */ var _httpPipelineLogLevel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpPipelineLogLevel */ "./node_modules/@azure/core-http/es/src/httpPipelineLogLevel.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpPipelineLogLevel", function() { return _httpPipelineLogLevel__WEBPACK_IMPORTED_MODULE_3__["HttpPipelineLogLevel"]; });

/* harmony import */ var _restError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./restError */ "./node_modules/@azure/core-http/es/src/restError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RestError", function() { return _restError__WEBPACK_IMPORTED_MODULE_4__["RestError"]; });

/* harmony import */ var _operationOptions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operationOptions */ "./node_modules/@azure/core-http/es/src/operationOptions.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "operationOptionsToRequestOptionsBase", function() { return _operationOptions__WEBPACK_IMPORTED_MODULE_5__["operationOptionsToRequestOptionsBase"]; });

/* harmony import */ var _serviceClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./serviceClient */ "./node_modules/@azure/core-http/es/src/serviceClient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceClient", function() { return _serviceClient__WEBPACK_IMPORTED_MODULE_6__["ServiceClient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flattenResponse", function() { return _serviceClient__WEBPACK_IMPORTED_MODULE_6__["flattenResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createPipelineFromOptions", function() { return _serviceClient__WEBPACK_IMPORTED_MODULE_6__["createPipelineFromOptions"]; });

/* harmony import */ var _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./queryCollectionFormat */ "./node_modules/@azure/core-http/es/src/queryCollectionFormat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryCollectionFormat", function() { return _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_7__["QueryCollectionFormat"]; });

/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util/constants */ "./node_modules/@azure/core-http/es/src/util/constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Constants", function() { return _util_constants__WEBPACK_IMPORTED_MODULE_8__["Constants"]; });

/* harmony import */ var _policies_bearerTokenAuthenticationPolicy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/bearerTokenAuthenticationPolicy */ "./node_modules/@azure/core-http/es/src/policies/bearerTokenAuthenticationPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BearerTokenAuthenticationPolicy", function() { return _policies_bearerTokenAuthenticationPolicy__WEBPACK_IMPORTED_MODULE_9__["BearerTokenAuthenticationPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bearerTokenAuthenticationPolicy", function() { return _policies_bearerTokenAuthenticationPolicy__WEBPACK_IMPORTED_MODULE_9__["bearerTokenAuthenticationPolicy"]; });

/* harmony import */ var _policies_logPolicy__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/logPolicy */ "./node_modules/@azure/core-http/es/src/policies/logPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logPolicy", function() { return _policies_logPolicy__WEBPACK_IMPORTED_MODULE_10__["logPolicy"]; });

/* harmony import */ var _policies_requestPolicy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseRequestPolicy", function() { return _policies_requestPolicy__WEBPACK_IMPORTED_MODULE_11__["BaseRequestPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequestPolicyOptions", function() { return _policies_requestPolicy__WEBPACK_IMPORTED_MODULE_11__["RequestPolicyOptions"]; });

/* harmony import */ var _policies_generateClientRequestIdPolicy__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/generateClientRequestIdPolicy */ "./node_modules/@azure/core-http/es/src/policies/generateClientRequestIdPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generateClientRequestIdPolicy", function() { return _policies_generateClientRequestIdPolicy__WEBPACK_IMPORTED_MODULE_12__["generateClientRequestIdPolicy"]; });

/* harmony import */ var _policies_exponentialRetryPolicy__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/exponentialRetryPolicy */ "./node_modules/@azure/core-http/es/src/policies/exponentialRetryPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exponentialRetryPolicy", function() { return _policies_exponentialRetryPolicy__WEBPACK_IMPORTED_MODULE_13__["exponentialRetryPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RetryMode", function() { return _policies_exponentialRetryPolicy__WEBPACK_IMPORTED_MODULE_13__["RetryMode"]; });

/* harmony import */ var _policies_systemErrorRetryPolicy__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/systemErrorRetryPolicy */ "./node_modules/@azure/core-http/es/src/policies/systemErrorRetryPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "systemErrorRetryPolicy", function() { return _policies_systemErrorRetryPolicy__WEBPACK_IMPORTED_MODULE_14__["systemErrorRetryPolicy"]; });

/* harmony import */ var _policies_throttlingRetryPolicy__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./policies/throttlingRetryPolicy */ "./node_modules/@azure/core-http/es/src/policies/throttlingRetryPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "throttlingRetryPolicy", function() { return _policies_throttlingRetryPolicy__WEBPACK_IMPORTED_MODULE_15__["throttlingRetryPolicy"]; });

/* harmony import */ var _policies_proxyPolicy__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./policies/proxyPolicy */ "./node_modules/@azure/core-http/es/src/policies/proxyPolicy.browser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getDefaultProxySettings", function() { return _policies_proxyPolicy__WEBPACK_IMPORTED_MODULE_16__["getDefaultProxySettings"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "proxyPolicy", function() { return _policies_proxyPolicy__WEBPACK_IMPORTED_MODULE_16__["proxyPolicy"]; });

/* harmony import */ var _policies_redirectPolicy__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./policies/redirectPolicy */ "./node_modules/@azure/core-http/es/src/policies/redirectPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "redirectPolicy", function() { return _policies_redirectPolicy__WEBPACK_IMPORTED_MODULE_17__["redirectPolicy"]; });

/* harmony import */ var _policies_keepAlivePolicy__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./policies/keepAlivePolicy */ "./node_modules/@azure/core-http/es/src/policies/keepAlivePolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "keepAlivePolicy", function() { return _policies_keepAlivePolicy__WEBPACK_IMPORTED_MODULE_18__["keepAlivePolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeepAlivePolicy", function() { return _policies_keepAlivePolicy__WEBPACK_IMPORTED_MODULE_18__["KeepAlivePolicy"]; });

/* harmony import */ var _policies_disableResponseDecompressionPolicy__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./policies/disableResponseDecompressionPolicy */ "./node_modules/@azure/core-http/es/src/policies/disableResponseDecompressionPolicy.browser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DisableResponseDecompressionPolicy", function() { return _policies_disableResponseDecompressionPolicy__WEBPACK_IMPORTED_MODULE_19__["DisableResponseDecompressionPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "disableResponseDecompressionPolicy", function() { return _policies_disableResponseDecompressionPolicy__WEBPACK_IMPORTED_MODULE_19__["disableResponseDecompressionPolicy"]; });

/* harmony import */ var _policies_signingPolicy__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./policies/signingPolicy */ "./node_modules/@azure/core-http/es/src/policies/signingPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "signingPolicy", function() { return _policies_signingPolicy__WEBPACK_IMPORTED_MODULE_20__["signingPolicy"]; });

/* harmony import */ var _policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./policies/userAgentPolicy */ "./node_modules/@azure/core-http/es/src/policies/userAgentPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "userAgentPolicy", function() { return _policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_21__["userAgentPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getDefaultUserAgentValue", function() { return _policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_21__["getDefaultUserAgentValue"]; });

/* harmony import */ var _policies_deserializationPolicy__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./policies/deserializationPolicy */ "./node_modules/@azure/core-http/es/src/policies/deserializationPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deserializationPolicy", function() { return _policies_deserializationPolicy__WEBPACK_IMPORTED_MODULE_22__["deserializationPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deserializeResponseBody", function() { return _policies_deserializationPolicy__WEBPACK_IMPORTED_MODULE_22__["deserializeResponseBody"]; });

/* harmony import */ var _policies_tracingPolicy__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./policies/tracingPolicy */ "./node_modules/@azure/core-http/es/src/policies/tracingPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tracingPolicy", function() { return _policies_tracingPolicy__WEBPACK_IMPORTED_MODULE_23__["tracingPolicy"]; });

/* harmony import */ var _serializer__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./serializer */ "./node_modules/@azure/core-http/es/src/serializer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MapperType", function() { return _serializer__WEBPACK_IMPORTED_MODULE_24__["MapperType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Serializer", function() { return _serializer__WEBPACK_IMPORTED_MODULE_24__["Serializer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serializeObject", function() { return _serializer__WEBPACK_IMPORTED_MODULE_24__["serializeObject"]; });

/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripRequest", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["stripRequest"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripResponse", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["stripResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "delay", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["delay"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "executePromisesSequentially", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["executePromisesSequentially"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generateUuid", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["generateUuid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "encodeUri", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["encodeUri"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "promiseToCallback", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["promiseToCallback"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "promiseToServiceCallback", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["promiseToServiceCallback"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isValidUuid", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["isValidUuid"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "applyMixins", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["applyMixins"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isNode", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["isNode"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isDuration", function() { return _util_utils__WEBPACK_IMPORTED_MODULE_25__["isDuration"]; });

/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./url */ "./node_modules/@azure/core-http/es/src/url.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "URLBuilder", function() { return _url__WEBPACK_IMPORTED_MODULE_26__["URLBuilder"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "URLQuery", function() { return _url__WEBPACK_IMPORTED_MODULE_26__["URLQuery"]; });

/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @azure/core-auth */ "./node_modules/@azure/core-auth/dist-esm/src/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isTokenCredential", function() { return _azure_core_auth__WEBPACK_IMPORTED_MODULE_27__["isTokenCredential"]; });

/* harmony import */ var _credentials_accessTokenCache__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./credentials/accessTokenCache */ "./node_modules/@azure/core-http/es/src/credentials/accessTokenCache.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ExpiringAccessTokenCache", function() { return _credentials_accessTokenCache__WEBPACK_IMPORTED_MODULE_28__["ExpiringAccessTokenCache"]; });

/* harmony import */ var _credentials_basicAuthenticationCredentials__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./credentials/basicAuthenticationCredentials */ "./node_modules/@azure/core-http/es/src/credentials/basicAuthenticationCredentials.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BasicAuthenticationCredentials", function() { return _credentials_basicAuthenticationCredentials__WEBPACK_IMPORTED_MODULE_29__["BasicAuthenticationCredentials"]; });

/* harmony import */ var _credentials_apiKeyCredentials__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./credentials/apiKeyCredentials */ "./node_modules/@azure/core-http/es/src/credentials/apiKeyCredentials.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ApiKeyCredentials", function() { return _credentials_apiKeyCredentials__WEBPACK_IMPORTED_MODULE_30__["ApiKeyCredentials"]; });

/* harmony import */ var _credentials_topicCredentials__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./credentials/topicCredentials */ "./node_modules/@azure/core-http/es/src/credentials/topicCredentials.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TopicCredentials", function() { return _credentials_topicCredentials__WEBPACK_IMPORTED_MODULE_31__["TopicCredentials"]; });

/* harmony import */ var _util_xml__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./util/xml */ "./node_modules/@azure/core-http/es/src/util/xml.browser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseXML", function() { return _util_xml__WEBPACK_IMPORTED_MODULE_32__["parseXML"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringifyXML", function() { return _util_xml__WEBPACK_IMPORTED_MODULE_32__["stringifyXML"]; });

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable-next-line @typescript-eslint/triple-slash-reference */
/// <reference path="../dom-shim.d.ts" />



























// Credentials






//# sourceMappingURL=coreHttp.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/credentials/accessTokenCache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/credentials/accessTokenCache.js ***!
  \******************************************************************************/
/*! exports provided: TokenRefreshBufferMs, ExpiringAccessTokenCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TokenRefreshBufferMs", function() { return TokenRefreshBufferMs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpiringAccessTokenCache", function() { return ExpiringAccessTokenCache; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Defines the default token refresh buffer duration.
 */
var TokenRefreshBufferMs = 2 * 60 * 1000; // 2 Minutes
/**
 * Provides an {@link AccessTokenCache} implementation which clears
 * the cached {@link AccessToken}'s after the expiresOnTimestamp has
 * passed.
 */
var ExpiringAccessTokenCache = /** @class */ (function () {
    /**
     * Constructs an instance of {@link ExpiringAccessTokenCache} with
     * an optional expiration buffer time.
     */
    function ExpiringAccessTokenCache(tokenRefreshBufferMs) {
        if (tokenRefreshBufferMs === void 0) { tokenRefreshBufferMs = TokenRefreshBufferMs; }
        this.cachedToken = undefined;
        this.tokenRefreshBufferMs = tokenRefreshBufferMs;
    }
    ExpiringAccessTokenCache.prototype.setCachedToken = function (accessToken) {
        this.cachedToken = accessToken;
    };
    ExpiringAccessTokenCache.prototype.getCachedToken = function () {
        if (this.cachedToken &&
            Date.now() + this.tokenRefreshBufferMs >= this.cachedToken.expiresOnTimestamp) {
            this.cachedToken = undefined;
        }
        return this.cachedToken;
    };
    return ExpiringAccessTokenCache;
}());

//# sourceMappingURL=accessTokenCache.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/credentials/apiKeyCredentials.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/credentials/apiKeyCredentials.js ***!
  \*******************************************************************************/
/*! exports provided: ApiKeyCredentials */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiKeyCredentials", function() { return ApiKeyCredentials; });
/* harmony import */ var _httpHeaders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../httpHeaders */ "./node_modules/@azure/core-http/es/src/httpHeaders.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Authenticates to a service using an API key.
 */
var ApiKeyCredentials = /** @class */ (function () {
    /**
     * @constructor
     * @param {object} options   Specifies the options to be provided for auth. Either header or query needs to be provided.
     */
    function ApiKeyCredentials(options) {
        if (!options || (options && !options.inHeader && !options.inQuery)) {
            throw new Error("options cannot be null or undefined. Either \"inHeader\" or \"inQuery\" property of the options object needs to be provided.");
        }
        this.inHeader = options.inHeader;
        this.inQuery = options.inQuery;
    }
    /**
     * Signs a request with the values provided in the inHeader and inQuery parameter.
     *
     * @param {WebResourceLike} webResource The WebResourceLike to be signed.
     * @returns {Promise<WebResourceLike>} The signed request object.
     */
    ApiKeyCredentials.prototype.signRequest = function (webResource) {
        if (!webResource) {
            return Promise.reject(new Error("webResource cannot be null or undefined and must be of type \"object\"."));
        }
        if (this.inHeader) {
            if (!webResource.headers) {
                webResource.headers = new _httpHeaders__WEBPACK_IMPORTED_MODULE_0__["HttpHeaders"]();
            }
            for (var headerName in this.inHeader) {
                webResource.headers.set(headerName, this.inHeader[headerName]);
            }
        }
        if (this.inQuery) {
            if (!webResource.url) {
                return Promise.reject(new Error("url cannot be null in the request object."));
            }
            if (webResource.url.indexOf("?") < 0) {
                webResource.url += "?";
            }
            for (var key in this.inQuery) {
                if (!webResource.url.endsWith("?")) {
                    webResource.url += "&";
                }
                webResource.url += key + "=" + this.inQuery[key];
            }
        }
        return Promise.resolve(webResource);
    };
    return ApiKeyCredentials;
}());

//# sourceMappingURL=apiKeyCredentials.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/credentials/basicAuthenticationCredentials.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/credentials/basicAuthenticationCredentials.js ***!
  \********************************************************************************************/
/*! exports provided: BasicAuthenticationCredentials */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicAuthenticationCredentials", function() { return BasicAuthenticationCredentials; });
/* harmony import */ var _httpHeaders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../httpHeaders */ "./node_modules/@azure/core-http/es/src/httpHeaders.js");
/* harmony import */ var _util_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/base64 */ "./node_modules/@azure/core-http/es/src/util/base64.browser.js");
/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/constants */ "./node_modules/@azure/core-http/es/src/util/constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.



var HeaderConstants = _util_constants__WEBPACK_IMPORTED_MODULE_2__["Constants"].HeaderConstants;
var DEFAULT_AUTHORIZATION_SCHEME = "Basic";
var BasicAuthenticationCredentials = /** @class */ (function () {
    /**
     * Creates a new BasicAuthenticationCredentials object.
     *
     * @constructor
     * @param {string} userName User name.
     * @param {string} password Password.
     * @param {string} [authorizationScheme] The authorization scheme.
     */
    function BasicAuthenticationCredentials(userName, password, authorizationScheme) {
        if (authorizationScheme === void 0) { authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME; }
        this.authorizationScheme = DEFAULT_AUTHORIZATION_SCHEME;
        if (userName === null || userName === undefined || typeof userName.valueOf() !== "string") {
            throw new Error("userName cannot be null or undefined and must be of type string.");
        }
        if (password === null || password === undefined || typeof password.valueOf() !== "string") {
            throw new Error("password cannot be null or undefined and must be of type string.");
        }
        this.userName = userName;
        this.password = password;
        this.authorizationScheme = authorizationScheme;
    }
    /**
     * Signs a request with the Authentication header.
     *
     * @param {WebResourceLike} webResource The WebResourceLike to be signed.
     * @returns {Promise<WebResourceLike>} The signed request object.
     */
    BasicAuthenticationCredentials.prototype.signRequest = function (webResource) {
        var credentials = this.userName + ":" + this.password;
        var encodedCredentials = this.authorizationScheme + " " + _util_base64__WEBPACK_IMPORTED_MODULE_1__["encodeString"](credentials);
        if (!webResource.headers)
            webResource.headers = new _httpHeaders__WEBPACK_IMPORTED_MODULE_0__["HttpHeaders"]();
        webResource.headers.set(HeaderConstants.AUTHORIZATION, encodedCredentials);
        return Promise.resolve(webResource);
    };
    return BasicAuthenticationCredentials;
}());

//# sourceMappingURL=basicAuthenticationCredentials.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/credentials/topicCredentials.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/credentials/topicCredentials.js ***!
  \******************************************************************************/
/*! exports provided: TopicCredentials */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TopicCredentials", function() { return TopicCredentials; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _apiKeyCredentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./apiKeyCredentials */ "./node_modules/@azure/core-http/es/src/credentials/apiKeyCredentials.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.


var TopicCredentials = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TopicCredentials, _super);
    /**
     * Creates a new EventGrid TopicCredentials object.
     *
     * @constructor
     * @param {string} topicKey   The EventGrid topic key
     */
    function TopicCredentials(topicKey) {
        var _this = this;
        if (!topicKey || (topicKey && typeof topicKey !== "string")) {
            throw new Error("topicKey cannot be null or undefined and must be of type string.");
        }
        var options = {
            inHeader: {
                "aeg-sas-key": topicKey
            }
        };
        _this = _super.call(this, options) || this;
        return _this;
    }
    return TopicCredentials;
}(_apiKeyCredentials__WEBPACK_IMPORTED_MODULE_1__["ApiKeyCredentials"]));

//# sourceMappingURL=topicCredentials.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/defaultHttpClient.browser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/defaultHttpClient.browser.js ***!
  \***************************************************************************/
/*! exports provided: DefaultHttpClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _xhrHttpClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xhrHttpClient */ "./node_modules/@azure/core-http/es/src/xhrHttpClient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DefaultHttpClient", function() { return _xhrHttpClient__WEBPACK_IMPORTED_MODULE_0__["XhrHttpClient"]; });

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

//# sourceMappingURL=defaultHttpClient.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/httpHeaders.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/httpHeaders.js ***!
  \*************************************************************/
/*! exports provided: isHttpHeadersLike, HttpHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHttpHeadersLike", function() { return isHttpHeadersLike; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpHeaders", function() { return HttpHeaders; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * A collection of HttpHeaders that can be sent with a HTTP request.
 */
function getHeaderKey(headerName) {
    return headerName.toLowerCase();
}
function isHttpHeadersLike(object) {
    if (!object || typeof object !== "object") {
        return false;
    }
    if (typeof object.rawHeaders === "function" &&
        typeof object.clone === "function" &&
        typeof object.get === "function" &&
        typeof object.set === "function" &&
        typeof object.contains === "function" &&
        typeof object.remove === "function" &&
        typeof object.headersArray === "function" &&
        typeof object.headerValues === "function" &&
        typeof object.headerNames === "function" &&
        typeof object.toJson === "function") {
        return true;
    }
    return false;
}
/**
 * A collection of HTTP header key/value pairs.
 */
var HttpHeaders = /** @class */ (function () {
    function HttpHeaders(rawHeaders) {
        this._headersMap = {};
        if (rawHeaders) {
            for (var headerName in rawHeaders) {
                this.set(headerName, rawHeaders[headerName]);
            }
        }
    }
    /**
     * Set a header in this collection with the provided name and value. The name is
     * case-insensitive.
     * @param headerName The name of the header to set. This value is case-insensitive.
     * @param headerValue The value of the header to set.
     */
    HttpHeaders.prototype.set = function (headerName, headerValue) {
        this._headersMap[getHeaderKey(headerName)] = {
            name: headerName,
            value: headerValue.toString()
        };
    };
    /**
     * Get the header value for the provided header name, or undefined if no header exists in this
     * collection with the provided name.
     * @param headerName The name of the header.
     */
    HttpHeaders.prototype.get = function (headerName) {
        var header = this._headersMap[getHeaderKey(headerName)];
        return !header ? undefined : header.value;
    };
    /**
     * Get whether or not this header collection contains a header entry for the provided header name.
     */
    HttpHeaders.prototype.contains = function (headerName) {
        return !!this._headersMap[getHeaderKey(headerName)];
    };
    /**
     * Remove the header with the provided headerName. Return whether or not the header existed and
     * was removed.
     * @param headerName The name of the header to remove.
     */
    HttpHeaders.prototype.remove = function (headerName) {
        var result = this.contains(headerName);
        delete this._headersMap[getHeaderKey(headerName)];
        return result;
    };
    /**
     * Get the headers that are contained this collection as an object.
     */
    HttpHeaders.prototype.rawHeaders = function () {
        var result = {};
        for (var headerKey in this._headersMap) {
            var header = this._headersMap[headerKey];
            result[header.name.toLowerCase()] = header.value;
        }
        return result;
    };
    /**
     * Get the headers that are contained in this collection as an array.
     */
    HttpHeaders.prototype.headersArray = function () {
        var headers = [];
        for (var headerKey in this._headersMap) {
            headers.push(this._headersMap[headerKey]);
        }
        return headers;
    };
    /**
     * Get the header names that are contained in this collection.
     */
    HttpHeaders.prototype.headerNames = function () {
        var headerNames = [];
        var headers = this.headersArray();
        for (var i = 0; i < headers.length; ++i) {
            headerNames.push(headers[i].name);
        }
        return headerNames;
    };
    /**
     * Get the header values that are contained in this collection.
     */
    HttpHeaders.prototype.headerValues = function () {
        var headerValues = [];
        var headers = this.headersArray();
        for (var i = 0; i < headers.length; ++i) {
            headerValues.push(headers[i].value);
        }
        return headerValues;
    };
    /**
     * Get the JSON object representation of this HTTP header collection.
     */
    HttpHeaders.prototype.toJson = function () {
        return this.rawHeaders();
    };
    /**
     * Get the string representation of this HTTP header collection.
     */
    HttpHeaders.prototype.toString = function () {
        return JSON.stringify(this.toJson());
    };
    /**
     * Create a deep clone/copy of this HttpHeaders collection.
     */
    HttpHeaders.prototype.clone = function () {
        return new HttpHeaders(this.rawHeaders());
    };
    return HttpHeaders;
}());

//# sourceMappingURL=httpHeaders.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/httpPipelineLogLevel.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/httpPipelineLogLevel.js ***!
  \**********************************************************************/
/*! exports provided: HttpPipelineLogLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpPipelineLogLevel", function() { return HttpPipelineLogLevel; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The different levels of logs that can be used with the HttpPipelineLogger.
 */
var HttpPipelineLogLevel;
(function (HttpPipelineLogLevel) {
    /**
     * A log level that indicates that no logs will be logged.
     */
    HttpPipelineLogLevel[HttpPipelineLogLevel["OFF"] = 0] = "OFF";
    /**
     * An error log.
     */
    HttpPipelineLogLevel[HttpPipelineLogLevel["ERROR"] = 1] = "ERROR";
    /**
     * A warning log.
     */
    HttpPipelineLogLevel[HttpPipelineLogLevel["WARNING"] = 2] = "WARNING";
    /**
     * An information log.
     */
    HttpPipelineLogLevel[HttpPipelineLogLevel["INFO"] = 3] = "INFO";
})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));
//# sourceMappingURL=httpPipelineLogLevel.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/log.js":
/*!*****************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/log.js ***!
  \*****************************************************/
/*! exports provided: logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return logger; });
/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ "./node_modules/@azure/logger/dist-esm/src/logger.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

var logger = Object(_azure_logger__WEBPACK_IMPORTED_MODULE_0__["createClientLogger"])("core-http");
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/operationOptions.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/operationOptions.js ***!
  \******************************************************************/
/*! exports provided: operationOptionsToRequestOptionsBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "operationOptionsToRequestOptionsBase", function() { return operationOptionsToRequestOptionsBase; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Converts an OperationOptions to a RequestOptionsBase
 *
 * @param opts OperationOptions object to convert to RequestOptionsBase
 */
function operationOptionsToRequestOptionsBase(opts) {
    var requestOptions = opts.requestOptions, tracingOptions = opts.tracingOptions, additionalOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__rest"])(opts, ["requestOptions", "tracingOptions"]);
    var result = additionalOptions;
    if (requestOptions) {
        result = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, result), requestOptions);
    }
    if (tracingOptions) {
        result.spanOptions = tracingOptions.spanOptions;
    }
    return result;
}
//# sourceMappingURL=operationOptions.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/operationParameter.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/operationParameter.js ***!
  \********************************************************************/
/*! exports provided: getPathStringFromParameter, getPathStringFromParameterPath */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPathStringFromParameter", function() { return getPathStringFromParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPathStringFromParameterPath", function() { return getPathStringFromParameterPath; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Get the path to this parameter's value as a dotted string (a.b.c).
 * @param parameter The parameter to get the path string for.
 * @returns The path to this parameter's value as a dotted string.
 */
function getPathStringFromParameter(parameter) {
    return getPathStringFromParameterPath(parameter.parameterPath, parameter.mapper);
}
function getPathStringFromParameterPath(parameterPath, mapper) {
    var result;
    if (typeof parameterPath === "string") {
        result = parameterPath;
    }
    else if (Array.isArray(parameterPath)) {
        result = parameterPath.join(".");
    }
    else {
        result = mapper.serializedName;
    }
    return result;
}
//# sourceMappingURL=operationParameter.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/operationSpec.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/operationSpec.js ***!
  \***************************************************************/
/*! exports provided: isStreamOperation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStreamOperation", function() { return isStreamOperation; });
/* harmony import */ var _serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer */ "./node_modules/@azure/core-http/es/src/serializer.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

function isStreamOperation(operationSpec) {
    var result = false;
    for (var statusCode in operationSpec.responses) {
        var operationResponse = operationSpec.responses[statusCode];
        if (operationResponse.bodyMapper &&
            operationResponse.bodyMapper.type.name === _serializer__WEBPACK_IMPORTED_MODULE_0__["MapperType"].Stream) {
            result = true;
            break;
        }
    }
    return result;
}
//# sourceMappingURL=operationSpec.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/bearerTokenAuthenticationPolicy.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/bearerTokenAuthenticationPolicy.js ***!
  \******************************************************************************************/
/*! exports provided: bearerTokenAuthenticationPolicy, BearerTokenAuthenticationPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bearerTokenAuthenticationPolicy", function() { return bearerTokenAuthenticationPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BearerTokenAuthenticationPolicy", function() { return BearerTokenAuthenticationPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _policies_requestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../policies/requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/constants */ "./node_modules/@azure/core-http/es/src/util/constants.js");
/* harmony import */ var _httpHeaders__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../httpHeaders */ "./node_modules/@azure/core-http/es/src/httpHeaders.js");
/* harmony import */ var _credentials_accessTokenCache__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../credentials/accessTokenCache */ "./node_modules/@azure/core-http/es/src/credentials/accessTokenCache.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.





/**
 * Creates a new BearerTokenAuthenticationPolicy factory.
 *
 * @param credential The TokenCredential implementation that can supply the bearer token.
 * @param scopes The scopes for which the bearer token applies.
 */
function bearerTokenAuthenticationPolicy(credential, scopes) {
    var tokenCache = new _credentials_accessTokenCache__WEBPACK_IMPORTED_MODULE_4__["ExpiringAccessTokenCache"]();
    return {
        create: function (nextPolicy, options) {
            return new BearerTokenAuthenticationPolicy(nextPolicy, options, credential, scopes, tokenCache);
        }
    };
}
/**
 *
 * Provides a RequestPolicy that can request a token from a TokenCredential
 * implementation and then apply it to the Authorization header of a request
 * as a Bearer token.
 *
 */
var BearerTokenAuthenticationPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BearerTokenAuthenticationPolicy, _super);
    /**
     * Creates a new BearerTokenAuthenticationPolicy object.
     *
     * @param nextPolicy The next RequestPolicy in the request pipeline.
     * @param options Options for this RequestPolicy.
     * @param credential The TokenCredential implementation that can supply the bearer token.
     * @param scopes The scopes for which the bearer token applies.
     * @param tokenCache The cache for the most recent AccessToken returned from the TokenCredential.
     */
    function BearerTokenAuthenticationPolicy(nextPolicy, options, credential, scopes, tokenCache) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.credential = credential;
        _this.scopes = scopes;
        _this.tokenCache = tokenCache;
        return _this;
    }
    /**
     * Applies the Bearer token to the request through the Authorization header.
     * @param webResource
     */
    BearerTokenAuthenticationPolicy.prototype.sendRequest = function (webResource) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var token;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!webResource.headers)
                            webResource.headers = new _httpHeaders__WEBPACK_IMPORTED_MODULE_3__["HttpHeaders"]();
                        return [4 /*yield*/, this.getToken({
                                abortSignal: webResource.abortSignal,
                                tracingOptions: {
                                    spanOptions: webResource.spanOptions
                                }
                            })];
                    case 1:
                        token = _a.sent();
                        webResource.headers.set(_util_constants__WEBPACK_IMPORTED_MODULE_2__["Constants"].HeaderConstants.AUTHORIZATION, "Bearer " + token);
                        return [2 /*return*/, this._nextPolicy.sendRequest(webResource)];
                }
            });
        });
    };
    BearerTokenAuthenticationPolicy.prototype.getToken = function (options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var accessToken;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        accessToken = this.tokenCache.getCachedToken();
                        if (!(accessToken === undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.credential.getToken(this.scopes, options)];
                    case 1:
                        accessToken = (_a.sent()) || undefined;
                        this.tokenCache.setCachedToken(accessToken);
                        _a.label = 2;
                    case 2: return [2 /*return*/, accessToken ? accessToken.token : undefined];
                }
            });
        });
    };
    return BearerTokenAuthenticationPolicy;
}(_policies_requestPolicy__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/deserializationPolicy.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/deserializationPolicy.js ***!
  \********************************************************************************/
/*! exports provided: deserializationPolicy, defaultJsonContentTypes, defaultXmlContentTypes, DefaultDeserializationOptions, DeserializationPolicy, deserializeResponseBody */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deserializationPolicy", function() { return deserializationPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultJsonContentTypes", function() { return defaultJsonContentTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultXmlContentTypes", function() { return defaultXmlContentTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultDeserializationOptions", function() { return DefaultDeserializationOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeserializationPolicy", function() { return DeserializationPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deserializeResponseBody", function() { return deserializeResponseBody; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _operationSpec__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operationSpec */ "./node_modules/@azure/core-http/es/src/operationSpec.js");
/* harmony import */ var _restError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../restError */ "./node_modules/@azure/core-http/es/src/restError.js");
/* harmony import */ var _serializer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../serializer */ "./node_modules/@azure/core-http/es/src/serializer.js");
/* harmony import */ var _util_xml__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/xml */ "./node_modules/@azure/core-http/es/src/util/xml.browser.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.






/**
 * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they
 * pass through the HTTP pipeline.
 */
function deserializationPolicy(deserializationContentTypes) {
    return {
        create: function (nextPolicy, options) {
            return new DeserializationPolicy(nextPolicy, deserializationContentTypes, options);
        }
    };
}
var defaultJsonContentTypes = ["application/json", "text/json"];
var defaultXmlContentTypes = ["application/xml", "application/atom+xml"];
var DefaultDeserializationOptions = {
    expectedContentTypes: {
        json: defaultJsonContentTypes,
        xml: defaultXmlContentTypes
    }
};
/**
 * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the
 * HTTP pipeline.
 */
var DeserializationPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DeserializationPolicy, _super);
    function DeserializationPolicy(nextPolicy, deserializationContentTypes, options) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.jsonContentTypes =
            (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;
        _this.xmlContentTypes =
            (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;
        return _this;
    }
    DeserializationPolicy.prototype.sendRequest = function (request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                return [2 /*return*/, this._nextPolicy
                        .sendRequest(request)
                        .then(function (response) {
                        return deserializeResponseBody(_this.jsonContentTypes, _this.xmlContentTypes, response);
                    })];
            });
        });
    };
    return DeserializationPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_5__["BaseRequestPolicy"]));

function getOperationResponse(parsedResponse) {
    var result;
    var request = parsedResponse.request;
    var operationSpec = request.operationSpec;
    if (operationSpec) {
        var operationResponseGetter = request.operationResponseGetter;
        if (!operationResponseGetter) {
            result = operationSpec.responses[parsedResponse.status];
        }
        else {
            result = operationResponseGetter(operationSpec, parsedResponse);
        }
    }
    return result;
}
function shouldDeserializeResponse(parsedResponse) {
    var shouldDeserialize = parsedResponse.request.shouldDeserialize;
    var result;
    if (shouldDeserialize === undefined) {
        result = true;
    }
    else if (typeof shouldDeserialize === "boolean") {
        result = shouldDeserialize;
    }
    else {
        result = shouldDeserialize(parsedResponse);
    }
    return result;
}
function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response) {
    return parse(jsonContentTypes, xmlContentTypes, response).then(function (parsedResponse) {
        if (!shouldDeserializeResponse(parsedResponse)) {
            return parsedResponse;
        }
        var operationSpec = parsedResponse.request.operationSpec;
        if (!operationSpec || !operationSpec.responses) {
            return parsedResponse;
        }
        var responseSpec = getOperationResponse(parsedResponse);
        var expectedStatusCodes = Object.keys(operationSpec.responses);
        var hasNoExpectedStatusCodes = expectedStatusCodes.length === 0 ||
            (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === "default");
        var isExpectedStatusCode = hasNoExpectedStatusCodes
            ? 200 <= parsedResponse.status && parsedResponse.status < 300
            : !!responseSpec;
        // There is no operation response spec for current status code.
        // So, treat it as an error case and use the default response spec to deserialize the response.
        if (!isExpectedStatusCode) {
            var defaultResponseSpec = operationSpec.responses.default;
            if (!defaultResponseSpec) {
                return parsedResponse;
            }
            var defaultBodyMapper = defaultResponseSpec.bodyMapper;
            var defaultHeadersMapper = defaultResponseSpec.headersMapper;
            var initialErrorMessage = Object(_operationSpec__WEBPACK_IMPORTED_MODULE_1__["isStreamOperation"])(operationSpec)
                ? "Unexpected status code: " + parsedResponse.status
                : parsedResponse.bodyAsText;
            var error = new _restError__WEBPACK_IMPORTED_MODULE_2__["RestError"](initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);
            try {
                // If error response has a body, try to extract error code & message from it
                // Then try to deserialize it using default body mapper
                if (parsedResponse.parsedBody) {
                    var parsedBody = parsedResponse.parsedBody;
                    var internalError = parsedBody.error || parsedBody;
                    error.code = internalError.code;
                    if (internalError.message) {
                        error.message = internalError.message;
                    }
                    if (defaultBodyMapper) {
                        var valueToDeserialize = parsedBody;
                        if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer__WEBPACK_IMPORTED_MODULE_3__["MapperType"].Sequence) {
                            valueToDeserialize =
                                typeof parsedBody === "object" ? parsedBody[defaultBodyMapper.xmlElementName] : [];
                        }
                        error.response.parsedBody = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, "error.response.parsedBody");
                    }
                }
                // If error response has headers, try to deserialize it using default header mapper
                if (parsedResponse.headers && defaultHeadersMapper) {
                    error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders");
                }
            }
            catch (defaultError) {
                error.message = "Error \"" + defaultError.message + "\" occurred in deserializing the responseBody - \"" + parsedResponse.bodyAsText + "\" for the default response.";
            }
            throw error;
        }
        // An operation response spec does exist for current status code, so
        // use it to deserialize the response.
        if (responseSpec) {
            if (responseSpec.bodyMapper) {
                var valueToDeserialize = parsedResponse.parsedBody;
                if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer__WEBPACK_IMPORTED_MODULE_3__["MapperType"].Sequence) {
                    valueToDeserialize =
                        typeof valueToDeserialize === "object"
                            ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]
                            : [];
                }
                try {
                    parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, "operationRes.parsedBody");
                }
                catch (error) {
                    var restError = new _restError__WEBPACK_IMPORTED_MODULE_2__["RestError"]("Error " + error + " occurred in deserializing the responseBody - " + parsedResponse.bodyAsText, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);
                    throw restError;
                }
            }
            else if (operationSpec.httpMethod === "HEAD") {
                // head methods never have a body, but we return a boolean to indicate presence/absence of the resource
                parsedResponse.parsedBody = response.status >= 200 && response.status < 300;
            }
            if (responseSpec.headersMapper) {
                parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.rawHeaders(), "operationRes.parsedHeaders");
            }
        }
        return parsedResponse;
    });
}
function parse(jsonContentTypes, xmlContentTypes, operationResponse) {
    var errorHandler = function (err) {
        var msg = "Error \"" + err + "\" occurred while parsing the response body - " + operationResponse.bodyAsText + ".";
        var errCode = err.code || _restError__WEBPACK_IMPORTED_MODULE_2__["RestError"].PARSE_ERROR;
        var e = new _restError__WEBPACK_IMPORTED_MODULE_2__["RestError"](msg, errCode, operationResponse.status, operationResponse.request, operationResponse);
        return Promise.reject(e);
    };
    if (!operationResponse.request.streamResponseBody && operationResponse.bodyAsText) {
        var text_1 = operationResponse.bodyAsText;
        var contentType = operationResponse.headers.get("Content-Type") || "";
        var contentComponents = !contentType
            ? []
            : contentType.split(";").map(function (component) { return component.toLowerCase(); });
        if (contentComponents.length === 0 ||
            contentComponents.some(function (component) { return jsonContentTypes.indexOf(component) !== -1; })) {
            return new Promise(function (resolve) {
                operationResponse.parsedBody = JSON.parse(text_1);
                resolve(operationResponse);
            }).catch(errorHandler);
        }
        else if (contentComponents.some(function (component) { return xmlContentTypes.indexOf(component) !== -1; })) {
            return Object(_util_xml__WEBPACK_IMPORTED_MODULE_4__["parseXML"])(text_1)
                .then(function (body) {
                operationResponse.parsedBody = body;
                return operationResponse;
            })
                .catch(errorHandler);
        }
    }
    return Promise.resolve(operationResponse);
}
//# sourceMappingURL=deserializationPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/disableResponseDecompressionPolicy.browser.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/disableResponseDecompressionPolicy.browser.js ***!
  \*****************************************************************************************************/
/*! exports provided: disableResponseDecompressionPolicy, DisableResponseDecompressionPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableResponseDecompressionPolicy", function() { return disableResponseDecompressionPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisableResponseDecompressionPolicy", function() { return DisableResponseDecompressionPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/*
 * NOTE: When moving this file, please update "browser" section in package.json
 */

var DisbleResponseDecompressionNotSupportedInBrowser = new Error("DisableResponseDecompressionPolicy is not supported in browser environment");
/**
 * {@link DisableResponseDecompressionPolicy} is not supported in browser and attempting
 * to use it will results in error being thrown.
 */
function disableResponseDecompressionPolicy() {
    return {
        create: function (_nextPolicy, _options) {
            throw DisbleResponseDecompressionNotSupportedInBrowser;
        }
    };
}
var DisableResponseDecompressionPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DisableResponseDecompressionPolicy, _super);
    function DisableResponseDecompressionPolicy(nextPolicy, options) {
        var _this = _super.call(this, nextPolicy, options) || this;
        throw DisbleResponseDecompressionNotSupportedInBrowser;
        return _this;
    }
    DisableResponseDecompressionPolicy.prototype.sendRequest = function (_request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                throw DisbleResponseDecompressionNotSupportedInBrowser;
            });
        });
    };
    return DisableResponseDecompressionPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=disableResponseDecompressionPolicy.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/exponentialRetryPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/exponentialRetryPolicy.js ***!
  \*********************************************************************************/
/*! exports provided: exponentialRetryPolicy, RetryMode, DefaultRetryOptions, ExponentialRetryPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exponentialRetryPolicy", function() { return exponentialRetryPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RetryMode", function() { return RetryMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultRetryOptions", function() { return DefaultRetryOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExponentialRetryPolicy", function() { return ExponentialRetryPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
/* harmony import */ var _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/exponentialBackoffStrategy */ "./node_modules/@azure/core-http/es/src/util/exponentialBackoffStrategy.js");
/* harmony import */ var _restError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../restError */ "./node_modules/@azure/core-http/es/src/restError.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../log */ "./node_modules/@azure/core-http/es/src/log.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.






function exponentialRetryPolicy(retryCount, retryInterval, maxRetryInterval) {
    return {
        create: function (nextPolicy, options) {
            return new ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval);
        }
    };
}
/**
 * Describes the Retry Mode type. Currently supporting only Exponential.
 * @enum RetryMode
 */
var RetryMode;
(function (RetryMode) {
    RetryMode[RetryMode["Exponential"] = 0] = "Exponential";
})(RetryMode || (RetryMode = {}));
var DefaultRetryOptions = {
    maxRetries: _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_RETRY_COUNT"],
    retryDelayInMs: _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_RETRY_INTERVAL"],
    maxRetryDelayInMs: _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_MAX_RETRY_INTERVAL"]
};
/**
 * @class
 * Instantiates a new "ExponentialRetryPolicyFilter" instance.
 */
var ExponentialRetryPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ExponentialRetryPolicy, _super);
    /**
     * @constructor
     * @param {RequestPolicy} nextPolicy The next RequestPolicy in the pipeline chain.
     * @param {RequestPolicyOptions} options The options for this RequestPolicy.
     * @param {number} [retryCount]        The client retry count.
     * @param {number} [retryInterval]     The client retry interval, in milliseconds.
     * @param {number} [minRetryInterval]  The minimum retry interval, in milliseconds.
     * @param {number} [maxRetryInterval]  The maximum retry interval, in milliseconds.
     */
    function ExponentialRetryPolicy(nextPolicy, options, retryCount, retryInterval, maxRetryInterval) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.retryCount = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["isNumber"])(retryCount) ? retryCount : _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_RETRY_COUNT"];
        _this.retryInterval = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["isNumber"])(retryInterval) ? retryInterval : _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_RETRY_INTERVAL"];
        _this.maxRetryInterval = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["isNumber"])(maxRetryInterval)
            ? maxRetryInterval
            : _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_MAX_RETRY_INTERVAL"];
        return _this;
    }
    ExponentialRetryPolicy.prototype.sendRequest = function (request) {
        var _this = this;
        return this._nextPolicy
            .sendRequest(request.clone())
            .then(function (response) { return retry(_this, request, response); })
            .catch(function (error) { return retry(_this, request, error.response, undefined, error); });
    };
    return ExponentialRetryPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_2__["BaseRequestPolicy"]));

function retry(policy, request, response, retryData, requestError) {
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        function shouldPolicyRetry(response) {
            var statusCode = response === null || response === void 0 ? void 0 : response.status;
            if (statusCode === undefined ||
                (statusCode < 500 && statusCode !== 408) ||
                statusCode === 501 ||
                statusCode === 505) {
                return false;
            }
            return true;
        }
        var isAborted, res, err_1, err;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
                case 0:
                    retryData = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["updateRetryData"])({
                        retryInterval: policy.retryInterval,
                        minRetryInterval: 0,
                        maxRetryInterval: policy.maxRetryInterval
                    }, retryData, requestError);
                    isAborted = request.abortSignal && request.abortSignal.aborted;
                    if (!(!isAborted && Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["shouldRetry"])(policy.retryCount, shouldPolicyRetry, retryData, response))) return [3 /*break*/, 6];
                    _log__WEBPACK_IMPORTED_MODULE_5__["logger"].info("Retrying request in " + retryData.retryInterval);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, _util_utils__WEBPACK_IMPORTED_MODULE_1__["delay"](retryData.retryInterval)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, policy._nextPolicy.sendRequest(request.clone())];
                case 3:
                    res = _a.sent();
                    return [2 /*return*/, retry(policy, request, res, retryData)];
                case 4:
                    err_1 = _a.sent();
                    return [2 /*return*/, retry(policy, request, response, retryData, err_1)];
                case 5: return [3 /*break*/, 7];
                case 6:
                    if (isAborted || requestError || !response) {
                        err = retryData.error ||
                            new _restError__WEBPACK_IMPORTED_MODULE_4__["RestError"]("Failed to send the request.", _restError__WEBPACK_IMPORTED_MODULE_4__["RestError"].REQUEST_SEND_ERROR, response && response.status, response && response.request, response);
                        throw err;
                    }
                    else {
                        return [2 /*return*/, response];
                    }
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=exponentialRetryPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/generateClientRequestIdPolicy.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/generateClientRequestIdPolicy.js ***!
  \****************************************************************************************/
/*! exports provided: generateClientRequestIdPolicy, GenerateClientRequestIdPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateClientRequestIdPolicy", function() { return generateClientRequestIdPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GenerateClientRequestIdPolicy", function() { return GenerateClientRequestIdPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.


function generateClientRequestIdPolicy(requestIdHeaderName) {
    if (requestIdHeaderName === void 0) { requestIdHeaderName = "x-ms-client-request-id"; }
    return {
        create: function (nextPolicy, options) {
            return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);
        }
    };
}
var GenerateClientRequestIdPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(GenerateClientRequestIdPolicy, _super);
    function GenerateClientRequestIdPolicy(nextPolicy, options, _requestIdHeaderName) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this._requestIdHeaderName = _requestIdHeaderName;
        return _this;
    }
    GenerateClientRequestIdPolicy.prototype.sendRequest = function (request) {
        if (!request.headers.contains(this._requestIdHeaderName)) {
            request.headers.set(this._requestIdHeaderName, request.requestId);
        }
        return this._nextPolicy.sendRequest(request);
    };
    return GenerateClientRequestIdPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=generateClientRequestIdPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/keepAlivePolicy.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/keepAlivePolicy.js ***!
  \**************************************************************************/
/*! exports provided: DefaultKeepAliveOptions, keepAlivePolicy, KeepAlivePolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultKeepAliveOptions", function() { return DefaultKeepAliveOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keepAlivePolicy", function() { return keepAlivePolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeepAlivePolicy", function() { return KeepAlivePolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.


var DefaultKeepAliveOptions = {
    enable: true
};
function keepAlivePolicy(keepAliveOptions) {
    return {
        create: function (nextPolicy, options) {
            return new KeepAlivePolicy(nextPolicy, options, keepAliveOptions || DefaultKeepAliveOptions);
        }
    };
}
/**
 * KeepAlivePolicy is a policy used to control keep alive settings for every request.
 */
var KeepAlivePolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(KeepAlivePolicy, _super);
    /**
     * Creates an instance of KeepAlivePolicy.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @param {KeepAliveOptions} [keepAliveOptions]
     */
    function KeepAlivePolicy(nextPolicy, options, keepAliveOptions) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.keepAliveOptions = keepAliveOptions;
        return _this;
    }
    /**
     * Sends out request.
     *
     * @param {WebResourceLike} request
     * @returns {Promise<HttpOperationResponse>}
     * @memberof KeepAlivePolicy
     */
    KeepAlivePolicy.prototype.sendRequest = function (request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                request.keepAlive = this.keepAliveOptions.enable;
                return [2 /*return*/, this._nextPolicy.sendRequest(request)];
            });
        });
    };
    return KeepAlivePolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=keepAlivePolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/logPolicy.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/logPolicy.js ***!
  \********************************************************************/
/*! exports provided: logPolicy, LogPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logPolicy", function() { return logPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogPolicy", function() { return LogPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../log */ "./node_modules/@azure/core-http/es/src/log.js");
/* harmony import */ var _util_sanitizer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/sanitizer */ "./node_modules/@azure/core-http/es/src/util/sanitizer.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.




function logPolicy(loggingOptions) {
    if (loggingOptions === void 0) { loggingOptions = {}; }
    return {
        create: function (nextPolicy, options) {
            return new LogPolicy(nextPolicy, options, loggingOptions);
        }
    };
}
var LogPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LogPolicy, _super);
    function LogPolicy(nextPolicy, options, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.logger, logger = _c === void 0 ? _log__WEBPACK_IMPORTED_MODULE_2__["logger"].info : _c, _d = _b.allowedHeaderNames, allowedHeaderNames = _d === void 0 ? [] : _d, _e = _b.allowedQueryParameters, allowedQueryParameters = _e === void 0 ? [] : _e;
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.logger = logger;
        _this.sanitizer = new _util_sanitizer__WEBPACK_IMPORTED_MODULE_3__["Sanitizer"]({ allowedHeaderNames: allowedHeaderNames, allowedQueryParameters: allowedQueryParameters });
        return _this;
    }
    Object.defineProperty(LogPolicy.prototype, "allowedHeaderNames", {
        /**
         * Header names whose values will be logged when logging is enabled. Defaults to
         * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
         * specified in this field will be added to that list.  Any other values will
         * be written to logs as "REDACTED".
         * @deprecated Pass these into the constructor instead.
         */
        get: function () {
            return this.sanitizer.allowedHeaderNames;
        },
        /**
         * Header names whose values will be logged when logging is enabled. Defaults to
         * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers
         * specified in this field will be added to that list.  Any other values will
         * be written to logs as "REDACTED".
         * @deprecated Pass these into the constructor instead.
         */
        set: function (allowedHeaderNames) {
            this.sanitizer.allowedHeaderNames = allowedHeaderNames;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LogPolicy.prototype, "allowedQueryParameters", {
        /**
         * Query string names whose values will be logged when logging is enabled. By default no
         * query string values are logged.
         * @deprecated Pass these into the constructor instead.
         */
        get: function () {
            return this.sanitizer.allowedQueryParameters;
        },
        /**
         * Query string names whose values will be logged when logging is enabled. By default no
         * query string values are logged.
         * @deprecated Pass these into the constructor instead.
         */
        set: function (allowedQueryParameters) {
            this.sanitizer.allowedQueryParameters = allowedQueryParameters;
        },
        enumerable: false,
        configurable: true
    });
    LogPolicy.prototype.sendRequest = function (request) {
        var _this = this;
        if (!this.logger.enabled)
            return this._nextPolicy.sendRequest(request);
        this.logRequest(request);
        return this._nextPolicy.sendRequest(request).then(function (response) { return _this.logResponse(response); });
    };
    LogPolicy.prototype.logRequest = function (request) {
        this.logger("Request: " + this.sanitizer.sanitize(request));
    };
    LogPolicy.prototype.logResponse = function (response) {
        this.logger("Response status code: " + response.status);
        this.logger("Headers: " + this.sanitizer.sanitize(response.headers));
        return response;
    };
    return LogPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=logPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/msRestUserAgentPolicy.browser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/msRestUserAgentPolicy.browser.js ***!
  \****************************************************************************************/
/*! exports provided: getDefaultUserAgentKey, getPlatformSpecificData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultUserAgentKey", function() { return getDefaultUserAgentKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlatformSpecificData", function() { return getPlatformSpecificData; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function getDefaultUserAgentKey() {
    return "x-ms-useragent";
}
function getPlatformSpecificData() {
    var navigator = window.navigator;
    var osInfo = {
        key: "OS",
        value: (navigator.oscpu || navigator.platform).replace(" ", "")
    };
    return [osInfo];
}
//# sourceMappingURL=msRestUserAgentPolicy.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/proxyPolicy.browser.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/proxyPolicy.browser.js ***!
  \******************************************************************************/
/*! exports provided: getDefaultProxySettings, proxyPolicy, ProxyPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultProxySettings", function() { return getDefaultProxySettings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "proxyPolicy", function() { return proxyPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProxyPolicy", function() { return ProxyPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.


var proxyNotSupportedInBrowser = new Error("ProxyPolicy is not supported in browser environment");
function getDefaultProxySettings(_proxyUrl) {
    return undefined;
}
function proxyPolicy(_proxySettings) {
    return {
        create: function (_nextPolicy, _options) {
            throw proxyNotSupportedInBrowser;
        }
    };
}
var ProxyPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ProxyPolicy, _super);
    function ProxyPolicy(nextPolicy, options) {
        var _this = _super.call(this, nextPolicy, options) || this;
        throw proxyNotSupportedInBrowser;
        return _this;
    }
    ProxyPolicy.prototype.sendRequest = function (_request) {
        throw proxyNotSupportedInBrowser;
    };
    return ProxyPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=proxyPolicy.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/redirectPolicy.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/redirectPolicy.js ***!
  \*************************************************************************/
/*! exports provided: DefaultRedirectOptions, redirectPolicy, RedirectPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultRedirectOptions", function() { return DefaultRedirectOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "redirectPolicy", function() { return redirectPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedirectPolicy", function() { return RedirectPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../url */ "./node_modules/@azure/core-http/es/src/url.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.



var DefaultRedirectOptions = {
    handleRedirects: true,
    maxRetries: 20
};
function redirectPolicy(maximumRetries) {
    if (maximumRetries === void 0) { maximumRetries = 20; }
    return {
        create: function (nextPolicy, options) {
            return new RedirectPolicy(nextPolicy, options, maximumRetries);
        }
    };
}
var RedirectPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RedirectPolicy, _super);
    function RedirectPolicy(nextPolicy, options, maxRetries) {
        if (maxRetries === void 0) { maxRetries = 20; }
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.maxRetries = maxRetries;
        return _this;
    }
    RedirectPolicy.prototype.sendRequest = function (request) {
        var _this = this;
        return this._nextPolicy
            .sendRequest(request)
            .then(function (response) { return handleRedirect(_this, response, 0); });
    };
    return RedirectPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_2__["BaseRequestPolicy"]));

function handleRedirect(policy, response, currentRetries) {
    var request = response.request, status = response.status;
    var locationHeader = response.headers.get("location");
    if (locationHeader &&
        (status === 300 || status === 307 || (status === 303 && request.method === "POST")) &&
        (!policy.maxRetries || currentRetries < policy.maxRetries)) {
        var builder = _url__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(request.url);
        builder.setPath(locationHeader);
        request.url = builder.toString();
        // POST request with Status code 303 should be converted into a
        // redirected GET request if the redirect url is present in the location header
        if (status === 303) {
            request.method = "GET";
        }
        return policy._nextPolicy
            .sendRequest(request)
            .then(function (res) { return handleRedirect(policy, res, currentRetries + 1); });
    }
    return Promise.resolve(response);
}
//# sourceMappingURL=redirectPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/requestPolicy.js ***!
  \************************************************************************/
/*! exports provided: BaseRequestPolicy, RequestPolicyOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseRequestPolicy", function() { return BaseRequestPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequestPolicyOptions", function() { return RequestPolicyOptions; });
/* harmony import */ var _httpPipelineLogLevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../httpPipelineLogLevel */ "./node_modules/@azure/core-http/es/src/httpPipelineLogLevel.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

var BaseRequestPolicy = /** @class */ (function () {
    function BaseRequestPolicy(_nextPolicy, _options) {
        this._nextPolicy = _nextPolicy;
        this._options = _options;
    }
    /**
     * Get whether or not a log with the provided log level should be logged.
     * @param logLevel The log level of the log that will be logged.
     * @returns Whether or not a log with the provided log level should be logged.
     */
    BaseRequestPolicy.prototype.shouldLog = function (logLevel) {
        return this._options.shouldLog(logLevel);
    };
    /**
     * Attempt to log the provided message to the provided logger. If no logger was provided or if
     * the log level does not meat the logger's threshold, then nothing will be logged.
     * @param logLevel The log level of this log.
     * @param message The message of this log.
     */
    BaseRequestPolicy.prototype.log = function (logLevel, message) {
        this._options.log(logLevel, message);
    };
    return BaseRequestPolicy;
}());

/**
 * Optional properties that can be used when creating a RequestPolicy.
 */
var RequestPolicyOptions = /** @class */ (function () {
    function RequestPolicyOptions(_logger) {
        this._logger = _logger;
    }
    /**
     * Get whether or not a log with the provided log level should be logged.
     * @param logLevel The log level of the log that will be logged.
     * @returns Whether or not a log with the provided log level should be logged.
     */
    RequestPolicyOptions.prototype.shouldLog = function (logLevel) {
        return (!!this._logger &&
            logLevel !== _httpPipelineLogLevel__WEBPACK_IMPORTED_MODULE_0__["HttpPipelineLogLevel"].OFF &&
            logLevel <= this._logger.minimumLogLevel);
    };
    /**
     * Attempt to log the provided message to the provided logger. If no logger was provided or if
     * the log level does not meet the logger's threshold, then nothing will be logged.
     * @param logLevel The log level of this log.
     * @param message The message of this log.
     */
    RequestPolicyOptions.prototype.log = function (logLevel, message) {
        if (this._logger && this.shouldLog(logLevel)) {
            this._logger.log(logLevel, message);
        }
    };
    return RequestPolicyOptions;
}());

//# sourceMappingURL=requestPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/rpRegistrationPolicy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/rpRegistrationPolicy.js ***!
  \*******************************************************************************/
/*! exports provided: rpRegistrationPolicy, RPRegistrationPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rpRegistrationPolicy", function() { return rpRegistrationPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RPRegistrationPolicy", function() { return RPRegistrationPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.



function rpRegistrationPolicy(retryTimeout) {
    if (retryTimeout === void 0) { retryTimeout = 30; }
    return {
        create: function (nextPolicy, options) {
            return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);
        }
    };
}
var RPRegistrationPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RPRegistrationPolicy, _super);
    function RPRegistrationPolicy(nextPolicy, options, _retryTimeout) {
        if (_retryTimeout === void 0) { _retryTimeout = 30; }
        var _this = _super.call(this, nextPolicy, options) || this;
        _this._retryTimeout = _retryTimeout;
        return _this;
    }
    RPRegistrationPolicy.prototype.sendRequest = function (request) {
        var _this = this;
        return this._nextPolicy
            .sendRequest(request.clone())
            .then(function (response) { return registerIfNeeded(_this, request, response); });
    };
    return RPRegistrationPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_2__["BaseRequestPolicy"]));

function registerIfNeeded(policy, request, response) {
    if (response.status === 409) {
        var rpName = checkRPNotRegisteredError(response.bodyAsText);
        if (rpName) {
            var urlPrefix = extractSubscriptionUrl(request.url);
            return (registerRP(policy, urlPrefix, rpName, request)
                // Autoregistration of ${provider} failed for some reason. We will not return this error
                // instead will return the initial response with 409 status code back to the user.
                // do nothing here as we are returning the original response at the end of this method.
                .catch(function () { return false; })
                .then(function (registrationStatus) {
                if (registrationStatus) {
                    // Retry the original request. We have to change the x-ms-client-request-id
                    // otherwise Azure endpoint will return the initial 409 (cached) response.
                    request.headers.set("x-ms-client-request-id", _util_utils__WEBPACK_IMPORTED_MODULE_1__["generateUuid"]());
                    return policy._nextPolicy.sendRequest(request.clone());
                }
                return response;
            }));
        }
    }
    return Promise.resolve(response);
}
/**
 * Reuses the headers of the original request and url (if specified).
 * @param {WebResourceLike} originalRequest The original request
 * @param {boolean} reuseUrlToo Should the url from the original request be reused as well. Default false.
 * @returns {object} A new request object with desired headers.
 */
function getRequestEssentials(originalRequest, reuseUrlToo) {
    if (reuseUrlToo === void 0) { reuseUrlToo = false; }
    var reqOptions = originalRequest.clone();
    if (reuseUrlToo) {
        reqOptions.url = originalRequest.url;
    }
    // We have to change the x-ms-client-request-id otherwise Azure endpoint
    // will return the initial 409 (cached) response.
    reqOptions.headers.set("x-ms-client-request-id", _util_utils__WEBPACK_IMPORTED_MODULE_1__["generateUuid"]());
    // Set content-type to application/json
    reqOptions.headers.set("Content-Type", "application/json; charset=utf-8");
    return reqOptions;
}
/**
 * Validates the error code and message associated with 409 response status code. If it matches to that of
 * RP not registered then it returns the name of the RP else returns undefined.
 * @param {string} body The response body received after making the original request.
 * @returns {string} The name of the RP if condition is satisfied else undefined.
 */
function checkRPNotRegisteredError(body) {
    var result, responseBody;
    if (body) {
        try {
            responseBody = JSON.parse(body);
        }
        catch (err) {
            // do nothing;
        }
        if (responseBody &&
            responseBody.error &&
            responseBody.error.message &&
            responseBody.error.code &&
            responseBody.error.code === "MissingSubscriptionRegistration") {
            var matchRes = responseBody.error.message.match(/.*'(.*)'/i);
            if (matchRes) {
                result = matchRes.pop();
            }
        }
    }
    return result;
}
/**
 * Extracts the first part of the URL, just after subscription:
 * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
 * @param {string} url The original request url
 * @returns {string} The url prefix as explained above.
 */
function extractSubscriptionUrl(url) {
    var result;
    var matchRes = url.match(/.*\/subscriptions\/[a-f0-9-]+\//gi);
    if (matchRes && matchRes[0]) {
        result = matchRes[0];
    }
    else {
        throw new Error("Unable to extract subscriptionId from the given url - " + url + ".");
    }
    return result;
}
/**
 * Registers the given provider.
 * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.
 * @param {string} urlPrefix https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/
 * @param {string} provider The provider name to be registered.
 * @param {WebResourceLike} originalRequest The original request sent by the user that returned a 409 response
 * with a message that the provider is not registered.
 * @param {registrationCallback} callback The callback that handles the RP registration
 */
function registerRP(policy, urlPrefix, provider, originalRequest) {
    var postUrl = urlPrefix + "providers/" + provider + "/register?api-version=2016-02-01";
    var getUrl = urlPrefix + "providers/" + provider + "?api-version=2016-02-01";
    var reqOptions = getRequestEssentials(originalRequest);
    reqOptions.method = "POST";
    reqOptions.url = postUrl;
    return policy._nextPolicy.sendRequest(reqOptions).then(function (response) {
        if (response.status !== 200) {
            throw new Error("Autoregistration of " + provider + " failed. Please try registering manually.");
        }
        return getRegistrationStatus(policy, getUrl, originalRequest);
    });
}
/**
 * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.
 * Polling will happen till the registrationState property of the response body is "Registered".
 * @param {RPRegistrationPolicy} policy The RPRegistrationPolicy this function is being called against.
 * @param {string} url The request url for polling
 * @param {WebResourceLike} originalRequest The original request sent by the user that returned a 409 response
 * with a message that the provider is not registered.
 * @returns {Promise<boolean>} True if RP Registration is successful.
 */
function getRegistrationStatus(policy, url, originalRequest) {
    var reqOptions = getRequestEssentials(originalRequest);
    reqOptions.url = url;
    reqOptions.method = "GET";
    return policy._nextPolicy.sendRequest(reqOptions).then(function (res) {
        var obj = res.parsedBody;
        if (res.parsedBody && obj.registrationState && obj.registrationState === "Registered") {
            return true;
        }
        else {
            return _util_utils__WEBPACK_IMPORTED_MODULE_1__["delay"](policy._retryTimeout * 1000)
                .then(function () { return getRegistrationStatus(policy, url, originalRequest); });
        }
    });
}
//# sourceMappingURL=rpRegistrationPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/signingPolicy.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/signingPolicy.js ***!
  \************************************************************************/
/*! exports provided: signingPolicy, SigningPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "signingPolicy", function() { return signingPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SigningPolicy", function() { return SigningPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.


function signingPolicy(authenticationProvider) {
    return {
        create: function (nextPolicy, options) {
            return new SigningPolicy(nextPolicy, options, authenticationProvider);
        }
    };
}
var SigningPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SigningPolicy, _super);
    function SigningPolicy(nextPolicy, options, authenticationProvider) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.authenticationProvider = authenticationProvider;
        return _this;
    }
    SigningPolicy.prototype.signRequest = function (request) {
        return this.authenticationProvider.signRequest(request);
    };
    SigningPolicy.prototype.sendRequest = function (request) {
        var _this = this;
        return this.signRequest(request).then(function (nextRequest) {
            return _this._nextPolicy.sendRequest(nextRequest);
        });
    };
    return SigningPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=signingPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/systemErrorRetryPolicy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/systemErrorRetryPolicy.js ***!
  \*********************************************************************************/
/*! exports provided: systemErrorRetryPolicy, SystemErrorRetryPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "systemErrorRetryPolicy", function() { return systemErrorRetryPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemErrorRetryPolicy", function() { return SystemErrorRetryPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
/* harmony import */ var _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/exponentialBackoffStrategy */ "./node_modules/@azure/core-http/es/src/util/exponentialBackoffStrategy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.




function systemErrorRetryPolicy(retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
    return {
        create: function (nextPolicy, options) {
            return new SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval);
        }
    };
}
/**
 * @class
 * Instantiates a new "ExponentialRetryPolicyFilter" instance.
 *
 * @constructor
 * @param {number} retryCount        The client retry count.
 * @param {number} retryInterval     The client retry interval, in milliseconds.
 * @param {number} minRetryInterval  The minimum retry interval, in milliseconds.
 * @param {number} maxRetryInterval  The maximum retry interval, in milliseconds.
 */
var SystemErrorRetryPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SystemErrorRetryPolicy, _super);
    function SystemErrorRetryPolicy(nextPolicy, options, retryCount, retryInterval, minRetryInterval, maxRetryInterval) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.retryCount = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["isNumber"])(retryCount) ? retryCount : _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_RETRY_COUNT"];
        _this.retryInterval = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["isNumber"])(retryInterval) ? retryInterval : _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_RETRY_INTERVAL"];
        _this.minRetryInterval = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["isNumber"])(minRetryInterval)
            ? minRetryInterval
            : _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_MIN_RETRY_INTERVAL"];
        _this.maxRetryInterval = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["isNumber"])(maxRetryInterval)
            ? maxRetryInterval
            : _util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_CLIENT_MAX_RETRY_INTERVAL"];
        return _this;
    }
    SystemErrorRetryPolicy.prototype.sendRequest = function (request) {
        var _this = this;
        return this._nextPolicy
            .sendRequest(request.clone())
            .catch(function (error) { return retry(_this, request, error.response, error); });
    };
    return SystemErrorRetryPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_2__["BaseRequestPolicy"]));

function retry(policy, request, operationResponse, err, retryData) {
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        function shouldPolicyRetry(_response, error) {
            if (error &&
                error.code &&
                (error.code === "ETIMEDOUT" ||
                    error.code === "ESOCKETTIMEDOUT" ||
                    error.code === "ECONNREFUSED" ||
                    error.code === "ECONNRESET" ||
                    error.code === "ENOENT")) {
                return true;
            }
            return false;
        }
        var err_1;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
                case 0:
                    retryData = Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["updateRetryData"])(policy, retryData, err);
                    if (!Object(_util_exponentialBackoffStrategy__WEBPACK_IMPORTED_MODULE_3__["shouldRetry"])(policy.retryCount, shouldPolicyRetry, retryData, operationResponse, err)) return [3 /*break*/, 5];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, _util_utils__WEBPACK_IMPORTED_MODULE_1__["delay"](retryData.retryInterval)];
                case 2:
                    _a.sent();
                    return [2 /*return*/, policy._nextPolicy.sendRequest(request.clone())];
                case 3:
                    err_1 = _a.sent();
                    return [2 /*return*/, retry(policy, request, operationResponse, err_1, retryData)];
                case 4: return [3 /*break*/, 6];
                case 5:
                    if (err) {
                        // If the operation failed in the end, return all errors instead of just the last one
                        return [2 /*return*/, Promise.reject(retryData.error)];
                    }
                    return [2 /*return*/, operationResponse];
                case 6: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=systemErrorRetryPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/throttlingRetryPolicy.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/throttlingRetryPolicy.js ***!
  \********************************************************************************/
/*! exports provided: throttlingRetryPolicy, ThrottlingRetryPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throttlingRetryPolicy", function() { return throttlingRetryPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ThrottlingRetryPolicy", function() { return ThrottlingRetryPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/constants */ "./node_modules/@azure/core-http/es/src/util/constants.js");
/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.




var StatusCodes = _util_constants__WEBPACK_IMPORTED_MODULE_2__["Constants"].HttpConstants.StatusCodes;
function throttlingRetryPolicy() {
    return {
        create: function (nextPolicy, options) {
            return new ThrottlingRetryPolicy(nextPolicy, options);
        }
    };
}
/**
 * To learn more, please refer to
 * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,
 * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and
 * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors
 */
var ThrottlingRetryPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ThrottlingRetryPolicy, _super);
    function ThrottlingRetryPolicy(nextPolicy, options, _handleResponse) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this._handleResponse = _handleResponse || _this._defaultResponseHandler;
        return _this;
    }
    ThrottlingRetryPolicy.prototype.sendRequest = function (httpRequest) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                return [2 /*return*/, this._nextPolicy.sendRequest(httpRequest.clone()).then(function (response) {
                        if (response.status !== StatusCodes.TooManyRequests) {
                            return response;
                        }
                        else {
                            return _this._handleResponse(httpRequest, response);
                        }
                    })];
            });
        });
    };
    ThrottlingRetryPolicy.prototype._defaultResponseHandler = function (httpRequest, httpResponse) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var retryAfterHeader, delayInMs;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                retryAfterHeader = httpResponse.headers.get(_util_constants__WEBPACK_IMPORTED_MODULE_2__["Constants"].HeaderConstants.RETRY_AFTER);
                if (retryAfterHeader) {
                    delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);
                    if (delayInMs) {
                        return [2 /*return*/, Object(_util_utils__WEBPACK_IMPORTED_MODULE_3__["delay"])(delayInMs).then(function (_) { return _this._nextPolicy.sendRequest(httpRequest); })];
                    }
                }
                return [2 /*return*/, httpResponse];
            });
        });
    };
    ThrottlingRetryPolicy.parseRetryAfterHeader = function (headerValue) {
        var retryAfterInSeconds = Number(headerValue);
        if (Number.isNaN(retryAfterInSeconds)) {
            return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);
        }
        else {
            return retryAfterInSeconds * 1000;
        }
    };
    ThrottlingRetryPolicy.parseDateRetryAfterHeader = function (headerValue) {
        try {
            var now = Date.now();
            var date = Date.parse(headerValue);
            var diff = date - now;
            return Number.isNaN(diff) ? undefined : diff;
        }
        catch (error) {
            return undefined;
        }
    };
    return ThrottlingRetryPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=throttlingRetryPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/tracingPolicy.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/tracingPolicy.js ***!
  \************************************************************************/
/*! exports provided: tracingPolicy, TracingPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tracingPolicy", function() { return tracingPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TracingPolicy", function() { return TracingPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-tracing */ "./node_modules/@azure/core-tracing/dist-esm/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../url */ "./node_modules/@azure/core-http/es/src/url.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.





function tracingPolicy(tracingOptions) {
    if (tracingOptions === void 0) { tracingOptions = {}; }
    return {
        create: function (nextPolicy, options) {
            return new TracingPolicy(nextPolicy, options, tracingOptions);
        }
    };
}
var TracingPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TracingPolicy, _super);
    function TracingPolicy(nextPolicy, options, tracingOptions) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.userAgent = tracingOptions.userAgent;
        return _this;
    }
    TracingPolicy.prototype.sendRequest = function (request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var tracer, spanOptions, path, span, spanContext, traceParentHeader, traceState, response, serviceRequestId, err_1;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!request.spanOptions || !request.spanOptions.parent) {
                            return [2 /*return*/, this._nextPolicy.sendRequest(request)];
                        }
                        tracer = Object(_azure_core_tracing__WEBPACK_IMPORTED_MODULE_1__["getTracer"])();
                        spanOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, request.spanOptions), { kind: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["SpanKind"].CLIENT });
                        path = _url__WEBPACK_IMPORTED_MODULE_4__["URLBuilder"].parse(request.url).getPath() || "/";
                        span = tracer.startSpan(path, spanOptions);
                        span.setAttributes({
                            "http.method": request.method,
                            "http.url": request.url,
                            requestId: request.requestId
                        });
                        if (this.userAgent) {
                            span.setAttribute("http.user_agent", this.userAgent);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        spanContext = span.context();
                        traceParentHeader = Object(_azure_core_tracing__WEBPACK_IMPORTED_MODULE_1__["getTraceParentHeader"])(spanContext);
                        if (traceParentHeader) {
                            request.headers.set("traceparent", traceParentHeader);
                            traceState = spanContext.traceState && spanContext.traceState.serialize();
                            // if tracestate is set, traceparent MUST be set, so only set tracestate after traceparent
                            if (traceState) {
                                request.headers.set("tracestate", traceState);
                            }
                        }
                        return [4 /*yield*/, this._nextPolicy.sendRequest(request)];
                    case 2:
                        response = _a.sent();
                        span.setAttribute("http.status_code", response.status);
                        serviceRequestId = response.headers.get("x-ms-request-id");
                        if (serviceRequestId) {
                            span.setAttribute("serviceRequestId", serviceRequestId);
                        }
                        span.end();
                        return [2 /*return*/, response];
                    case 3:
                        err_1 = _a.sent();
                        span.end();
                        throw err_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return TracingPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_3__["BaseRequestPolicy"]));

//# sourceMappingURL=tracingPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/policies/userAgentPolicy.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/policies/userAgentPolicy.js ***!
  \**************************************************************************/
/*! exports provided: getDefaultUserAgentHeaderName, getDefaultUserAgentValue, userAgentPolicy, UserAgentPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultUserAgentHeaderName", function() { return getDefaultUserAgentHeaderName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultUserAgentValue", function() { return getDefaultUserAgentValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "userAgentPolicy", function() { return userAgentPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserAgentPolicy", function() { return UserAgentPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _httpHeaders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../httpHeaders */ "./node_modules/@azure/core-http/es/src/httpHeaders.js");
/* harmony import */ var _util_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/constants */ "./node_modules/@azure/core-http/es/src/util/constants.js");
/* harmony import */ var _msRestUserAgentPolicy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./msRestUserAgentPolicy */ "./node_modules/@azure/core-http/es/src/policies/msRestUserAgentPolicy.browser.js");
/* harmony import */ var _requestPolicy__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.





function getRuntimeInfo() {
    var msRestRuntime = {
        key: "core-http",
        value: _util_constants__WEBPACK_IMPORTED_MODULE_2__["Constants"].coreHttpVersion
    };
    return [msRestRuntime];
}
function getUserAgentString(telemetryInfo, keySeparator, valueSeparator) {
    if (keySeparator === void 0) { keySeparator = " "; }
    if (valueSeparator === void 0) { valueSeparator = "/"; }
    return telemetryInfo
        .map(function (info) {
        var value = info.value ? "" + valueSeparator + info.value : "";
        return "" + info.key + value;
    })
        .join(keySeparator);
}
var getDefaultUserAgentHeaderName = _msRestUserAgentPolicy__WEBPACK_IMPORTED_MODULE_3__["getDefaultUserAgentKey"];
function getDefaultUserAgentValue() {
    var runtimeInfo = getRuntimeInfo();
    var platformSpecificData = Object(_msRestUserAgentPolicy__WEBPACK_IMPORTED_MODULE_3__["getPlatformSpecificData"])();
    var userAgent = getUserAgentString(runtimeInfo.concat(platformSpecificData));
    return userAgent;
}
function userAgentPolicy(userAgentData) {
    var key = !userAgentData || userAgentData.key === undefined || userAgentData.key === null
        ? Object(_msRestUserAgentPolicy__WEBPACK_IMPORTED_MODULE_3__["getDefaultUserAgentKey"])()
        : userAgentData.key;
    var value = !userAgentData || userAgentData.value === undefined || userAgentData.value === null
        ? getDefaultUserAgentValue()
        : userAgentData.value;
    return {
        create: function (nextPolicy, options) {
            return new UserAgentPolicy(nextPolicy, options, key, value);
        }
    };
}
var UserAgentPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(UserAgentPolicy, _super);
    function UserAgentPolicy(_nextPolicy, _options, headerKey, headerValue) {
        var _this = _super.call(this, _nextPolicy, _options) || this;
        _this._nextPolicy = _nextPolicy;
        _this._options = _options;
        _this.headerKey = headerKey;
        _this.headerValue = headerValue;
        return _this;
    }
    UserAgentPolicy.prototype.sendRequest = function (request) {
        this.addUserAgentHeader(request);
        return this._nextPolicy.sendRequest(request);
    };
    UserAgentPolicy.prototype.addUserAgentHeader = function (request) {
        if (!request.headers) {
            request.headers = new _httpHeaders__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]();
        }
        if (!request.headers.get(this.headerKey) && this.headerValue) {
            request.headers.set(this.headerKey, this.headerValue);
        }
    };
    return UserAgentPolicy;
}(_requestPolicy__WEBPACK_IMPORTED_MODULE_4__["BaseRequestPolicy"]));

//# sourceMappingURL=userAgentPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/queryCollectionFormat.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/queryCollectionFormat.js ***!
  \***********************************************************************/
/*! exports provided: QueryCollectionFormat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryCollectionFormat", function() { return QueryCollectionFormat; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * The format that will be used to join an array of values together for a query parameter value.
 */
var QueryCollectionFormat;
(function (QueryCollectionFormat) {
    QueryCollectionFormat["Csv"] = ",";
    QueryCollectionFormat["Ssv"] = " ";
    QueryCollectionFormat["Tsv"] = "\t";
    QueryCollectionFormat["Pipes"] = "|";
    QueryCollectionFormat["Multi"] = "Multi";
})(QueryCollectionFormat || (QueryCollectionFormat = {}));
//# sourceMappingURL=queryCollectionFormat.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/restError.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/restError.js ***!
  \***********************************************************/
/*! exports provided: RestError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RestError", function() { return RestError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _util_inspect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/inspect */ "./node_modules/@azure/core-http/es/src/util/inspect.browser.js");
/* harmony import */ var _util_sanitizer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/sanitizer */ "./node_modules/@azure/core-http/es/src/util/sanitizer.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.



var errorSanitizer = new _util_sanitizer__WEBPACK_IMPORTED_MODULE_2__["Sanitizer"]();
var RestError = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RestError, _super);
    function RestError(message, code, statusCode, request, response) {
        var _this = _super.call(this, message) || this;
        _this.name = "RestError";
        _this.code = code;
        _this.statusCode = statusCode;
        _this.request = request;
        _this.response = response;
        Object.setPrototypeOf(_this, RestError.prototype);
        return _this;
    }
    /**
     * Logging method for util.inspect in Node
     */
    RestError.prototype[_util_inspect__WEBPACK_IMPORTED_MODULE_1__["custom"]] = function () {
        return "RestError: " + this.message + " \n " + errorSanitizer.sanitize(this);
    };
    RestError.REQUEST_SEND_ERROR = "REQUEST_SEND_ERROR";
    RestError.PARSE_ERROR = "PARSE_ERROR";
    return RestError;
}(Error));

//# sourceMappingURL=restError.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/serializer.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/serializer.js ***!
  \************************************************************/
/*! exports provided: Serializer, serializeObject, MapperType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Serializer", function() { return Serializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeObject", function() { return serializeObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapperType", function() { return MapperType; });
/* harmony import */ var _util_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/base64 */ "./node_modules/@azure/core-http/es/src/util/base64.browser.js");
/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/* eslint-disable eqeqeq */


var Serializer = /** @class */ (function () {
    function Serializer(modelMappers, isXML) {
        if (modelMappers === void 0) { modelMappers = {}; }
        this.modelMappers = modelMappers;
        this.isXML = isXML;
    }
    Serializer.prototype.validateConstraints = function (mapper, value, objectName) {
        var failValidation = function (constraintName, constraintValue) {
            throw new Error("\"" + objectName + "\" with value \"" + value + "\" should satisfy the constraint \"" + constraintName + "\": " + constraintValue + ".");
        };
        if (mapper.constraints && value != undefined) {
            var _a = mapper.constraints, ExclusiveMaximum = _a.ExclusiveMaximum, ExclusiveMinimum = _a.ExclusiveMinimum, InclusiveMaximum = _a.InclusiveMaximum, InclusiveMinimum = _a.InclusiveMinimum, MaxItems = _a.MaxItems, MaxLength = _a.MaxLength, MinItems = _a.MinItems, MinLength = _a.MinLength, MultipleOf = _a.MultipleOf, Pattern = _a.Pattern, UniqueItems = _a.UniqueItems;
            if (ExclusiveMaximum != undefined && value >= ExclusiveMaximum) {
                failValidation("ExclusiveMaximum", ExclusiveMaximum);
            }
            if (ExclusiveMinimum != undefined && value <= ExclusiveMinimum) {
                failValidation("ExclusiveMinimum", ExclusiveMinimum);
            }
            if (InclusiveMaximum != undefined && value > InclusiveMaximum) {
                failValidation("InclusiveMaximum", InclusiveMaximum);
            }
            if (InclusiveMinimum != undefined && value < InclusiveMinimum) {
                failValidation("InclusiveMinimum", InclusiveMinimum);
            }
            if (MaxItems != undefined && value.length > MaxItems) {
                failValidation("MaxItems", MaxItems);
            }
            if (MaxLength != undefined && value.length > MaxLength) {
                failValidation("MaxLength", MaxLength);
            }
            if (MinItems != undefined && value.length < MinItems) {
                failValidation("MinItems", MinItems);
            }
            if (MinLength != undefined && value.length < MinLength) {
                failValidation("MinLength", MinLength);
            }
            if (MultipleOf != undefined && value % MultipleOf !== 0) {
                failValidation("MultipleOf", MultipleOf);
            }
            if (Pattern) {
                var pattern = typeof Pattern === "string" ? new RegExp(Pattern) : Pattern;
                if (typeof value !== "string" || value.match(pattern) === null) {
                    failValidation("Pattern", Pattern);
                }
            }
            if (UniqueItems &&
                value.some(function (item, i, ar) { return ar.indexOf(item) !== i; })) {
                failValidation("UniqueItems", UniqueItems);
            }
        }
    };
    /**
     * Serialize the given object based on its metadata defined in the mapper
     *
     * @param {Mapper} mapper The mapper which defines the metadata of the serializable object
     *
     * @param {object|string|Array|number|boolean|Date|stream} object A valid Javascript object to be serialized
     *
     * @param {string} objectName Name of the serialized object
     *
     * @returns {object|string|Array|number|boolean|Date|stream} A valid serialized Javascript object
     */
    Serializer.prototype.serialize = function (mapper, object, objectName) {
        var payload = {};
        var mapperType = mapper.type.name;
        if (!objectName) {
            objectName = mapper.serializedName;
        }
        if (mapperType.match(/^Sequence$/i) !== null) {
            payload = [];
        }
        if (mapper.isConstant) {
            object = mapper.defaultValue;
        }
        // This table of allowed values should help explain
        // the mapper.required and mapper.nullable properties.
        // X means "neither undefined or null are allowed".
        //           || required
        //           || true      | false
        //  nullable || ==========================
        //      true || null      | undefined/null
        //     false || X         | undefined
        // undefined || X         | undefined/null
        var required = mapper.required, nullable = mapper.nullable;
        if (required && nullable && object === undefined) {
            throw new Error(objectName + " cannot be undefined.");
        }
        if (required && !nullable && object == undefined) {
            throw new Error(objectName + " cannot be null or undefined.");
        }
        if (!required && nullable === false && object === null) {
            throw new Error(objectName + " cannot be null.");
        }
        if (object == undefined) {
            payload = object;
        }
        else {
            // Validate Constraints if any
            this.validateConstraints(mapper, object, objectName);
            if (mapperType.match(/^any$/i) !== null) {
                payload = object;
            }
            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {
                payload = serializeBasicTypes(mapperType, objectName, object);
            }
            else if (mapperType.match(/^Enum$/i) !== null) {
                var enumMapper = mapper;
                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);
            }
            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {
                payload = serializeDateTypes(mapperType, object, objectName);
            }
            else if (mapperType.match(/^ByteArray$/i) !== null) {
                payload = serializeByteArrayType(objectName, object);
            }
            else if (mapperType.match(/^Base64Url$/i) !== null) {
                payload = serializeBase64UrlType(objectName, object);
            }
            else if (mapperType.match(/^Sequence$/i) !== null) {
                payload = serializeSequenceType(this, mapper, object, objectName);
            }
            else if (mapperType.match(/^Dictionary$/i) !== null) {
                payload = serializeDictionaryType(this, mapper, object, objectName);
            }
            else if (mapperType.match(/^Composite$/i) !== null) {
                payload = serializeCompositeType(this, mapper, object, objectName);
            }
        }
        return payload;
    };
    /**
     * Deserialize the given object based on its metadata defined in the mapper
     *
     * @param {object} mapper The mapper which defines the metadata of the serializable object
     *
     * @param {object|string|Array|number|boolean|Date|stream} responseBody A valid Javascript entity to be deserialized
     *
     * @param {string} objectName Name of the deserialized object
     *
     * @returns {object|string|Array|number|boolean|Date|stream} A valid deserialized Javascript object
     */
    Serializer.prototype.deserialize = function (mapper, responseBody, objectName) {
        if (responseBody == undefined) {
            if (this.isXML && mapper.type.name === "Sequence" && !mapper.xmlIsWrapped) {
                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish
                // between the list being empty versus being missing,
                // so let's do the more user-friendly thing and return an empty list.
                responseBody = [];
            }
            // specifically check for undefined as default value can be a falsey value `0, "", false, null`
            if (mapper.defaultValue !== undefined) {
                responseBody = mapper.defaultValue;
            }
            return responseBody;
        }
        var payload;
        var mapperType = mapper.type.name;
        if (!objectName) {
            objectName = mapper.serializedName;
        }
        if (mapperType.match(/^Composite$/i) !== null) {
            payload = deserializeCompositeType(this, mapper, responseBody, objectName);
        }
        else {
            if (this.isXML) {
                /**
                 * If the mapper specifies this as a non-composite type value but the responseBody contains
                 * both header ("$") and body ("_") properties, then just reduce the responseBody value to
                 * the body ("_") property.
                 */
                if (responseBody["$"] != undefined && responseBody["_"] != undefined) {
                    responseBody = responseBody["_"];
                }
            }
            if (mapperType.match(/^Number$/i) !== null) {
                payload = parseFloat(responseBody);
                if (isNaN(payload)) {
                    payload = responseBody;
                }
            }
            else if (mapperType.match(/^Boolean$/i) !== null) {
                if (responseBody === "true") {
                    payload = true;
                }
                else if (responseBody === "false") {
                    payload = false;
                }
                else {
                    payload = responseBody;
                }
            }
            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {
                payload = responseBody;
            }
            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {
                payload = new Date(responseBody);
            }
            else if (mapperType.match(/^UnixTime$/i) !== null) {
                payload = unixTimeToDate(responseBody);
            }
            else if (mapperType.match(/^ByteArray$/i) !== null) {
                payload = _util_base64__WEBPACK_IMPORTED_MODULE_0__["decodeString"](responseBody);
            }
            else if (mapperType.match(/^Base64Url$/i) !== null) {
                payload = base64UrlToByteArray(responseBody);
            }
            else if (mapperType.match(/^Sequence$/i) !== null) {
                payload = deserializeSequenceType(this, mapper, responseBody, objectName);
            }
            else if (mapperType.match(/^Dictionary$/i) !== null) {
                payload = deserializeDictionaryType(this, mapper, responseBody, objectName);
            }
        }
        if (mapper.isConstant) {
            payload = mapper.defaultValue;
        }
        return payload;
    };
    return Serializer;
}());

function trimEnd(str, ch) {
    var len = str.length;
    while (len - 1 >= 0 && str[len - 1] === ch) {
        --len;
    }
    return str.substr(0, len);
}
function bufferToBase64Url(buffer) {
    if (!buffer) {
        return undefined;
    }
    if (!(buffer instanceof Uint8Array)) {
        throw new Error("Please provide an input of type Uint8Array for converting to Base64Url.");
    }
    // Uint8Array to Base64.
    var str = _util_base64__WEBPACK_IMPORTED_MODULE_0__["encodeByteArray"](buffer);
    // Base64 to Base64Url.
    return trimEnd(str, "=")
        .replace(/\+/g, "-")
        .replace(/\//g, "_");
}
function base64UrlToByteArray(str) {
    if (!str) {
        return undefined;
    }
    if (str && typeof str.valueOf() !== "string") {
        throw new Error("Please provide an input of type string for converting to Uint8Array");
    }
    // Base64Url to Base64.
    str = str.replace(/-/g, "+").replace(/_/g, "/");
    // Base64 to Uint8Array.
    return _util_base64__WEBPACK_IMPORTED_MODULE_0__["decodeString"](str);
}
function splitSerializeName(prop) {
    var classes = [];
    var partialclass = "";
    if (prop) {
        var subwords = prop.split(".");
        for (var _i = 0, subwords_1 = subwords; _i < subwords_1.length; _i++) {
            var item = subwords_1[_i];
            if (item.charAt(item.length - 1) === "\\") {
                partialclass += item.substr(0, item.length - 1) + ".";
            }
            else {
                partialclass += item;
                classes.push(partialclass);
                partialclass = "";
            }
        }
    }
    return classes;
}
function dateToUnixTime(d) {
    if (!d) {
        return undefined;
    }
    if (typeof d.valueOf() === "string") {
        d = new Date(d);
    }
    return Math.floor(d.getTime() / 1000);
}
function unixTimeToDate(n) {
    if (!n) {
        return undefined;
    }
    return new Date(n * 1000);
}
function serializeBasicTypes(typeName, objectName, value) {
    if (value !== null && value !== undefined) {
        if (typeName.match(/^Number$/i) !== null) {
            if (typeof value !== "number") {
                throw new Error(objectName + " with value " + value + " must be of type number.");
            }
        }
        else if (typeName.match(/^String$/i) !== null) {
            if (typeof value.valueOf() !== "string") {
                throw new Error(objectName + " with value \"" + value + "\" must be of type string.");
            }
        }
        else if (typeName.match(/^Uuid$/i) !== null) {
            if (!(typeof value.valueOf() === "string" && _util_utils__WEBPACK_IMPORTED_MODULE_1__["isValidUuid"](value))) {
                throw new Error(objectName + " with value \"" + value + "\" must be of type string and a valid uuid.");
            }
        }
        else if (typeName.match(/^Boolean$/i) !== null) {
            if (typeof value !== "boolean") {
                throw new Error(objectName + " with value " + value + " must be of type boolean.");
            }
        }
        else if (typeName.match(/^Stream$/i) !== null) {
            var objectType = typeof value;
            if (objectType !== "string" &&
                objectType !== "function" &&
                !(value instanceof ArrayBuffer) &&
                !ArrayBuffer.isView(value) &&
                !(typeof Blob === "function" && value instanceof Blob)) {
                throw new Error(objectName + " must be a string, Blob, ArrayBuffer, ArrayBufferView, or a function returning NodeJS.ReadableStream.");
            }
        }
    }
    return value;
}
function serializeEnumType(objectName, allowedValues, value) {
    if (!allowedValues) {
        throw new Error("Please provide a set of allowedValues to validate " + objectName + " as an Enum Type.");
    }
    var isPresent = allowedValues.some(function (item) {
        if (typeof item.valueOf() === "string") {
            return item.toLowerCase() === value.toLowerCase();
        }
        return item === value;
    });
    if (!isPresent) {
        throw new Error(value + " is not a valid value for " + objectName + ". The valid values are: " + JSON.stringify(allowedValues) + ".");
    }
    return value;
}
function serializeByteArrayType(objectName, value) {
    var returnValue = "";
    if (value != undefined) {
        if (!(value instanceof Uint8Array)) {
            throw new Error(objectName + " must be of type Uint8Array.");
        }
        returnValue = _util_base64__WEBPACK_IMPORTED_MODULE_0__["encodeByteArray"](value);
    }
    return returnValue;
}
function serializeBase64UrlType(objectName, value) {
    var returnValue = "";
    if (value != undefined) {
        if (!(value instanceof Uint8Array)) {
            throw new Error(objectName + " must be of type Uint8Array.");
        }
        returnValue = bufferToBase64Url(value) || "";
    }
    return returnValue;
}
function serializeDateTypes(typeName, value, objectName) {
    if (value != undefined) {
        if (typeName.match(/^Date$/i) !== null) {
            if (!(value instanceof Date ||
                (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                throw new Error(objectName + " must be an instanceof Date or a string in ISO8601 format.");
            }
            value =
                value instanceof Date
                    ? value.toISOString().substring(0, 10)
                    : new Date(value).toISOString().substring(0, 10);
        }
        else if (typeName.match(/^DateTime$/i) !== null) {
            if (!(value instanceof Date ||
                (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                throw new Error(objectName + " must be an instanceof Date or a string in ISO8601 format.");
            }
            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();
        }
        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {
            if (!(value instanceof Date ||
                (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                throw new Error(objectName + " must be an instanceof Date or a string in RFC-1123 format.");
            }
            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();
        }
        else if (typeName.match(/^UnixTime$/i) !== null) {
            if (!(value instanceof Date ||
                (typeof value.valueOf() === "string" && !isNaN(Date.parse(value))))) {
                throw new Error(objectName + " must be an instanceof Date or a string in RFC-1123/ISO8601 format " +
                    "for it to be serialized in UnixTime/Epoch format.");
            }
            value = dateToUnixTime(value);
        }
        else if (typeName.match(/^TimeSpan$/i) !== null) {
            if (!_util_utils__WEBPACK_IMPORTED_MODULE_1__["isDuration"](value)) {
                throw new Error(objectName + " must be a string in ISO 8601 format. Instead was \"" + value + "\".");
            }
        }
    }
    return value;
}
function serializeSequenceType(serializer, mapper, object, objectName) {
    if (!Array.isArray(object)) {
        throw new Error(objectName + " must be of type Array.");
    }
    var elementType = mapper.type.element;
    if (!elementType || typeof elementType !== "object") {
        throw new Error("element\" metadata for an Array must be defined in the " +
            ("mapper and it must of type \"object\" in " + objectName + "."));
    }
    var tempArray = [];
    for (var i = 0; i < object.length; i++) {
        tempArray[i] = serializer.serialize(elementType, object[i], objectName);
    }
    return tempArray;
}
function serializeDictionaryType(serializer, mapper, object, objectName) {
    if (typeof object !== "object") {
        throw new Error(objectName + " must be of type object.");
    }
    var valueType = mapper.type.value;
    if (!valueType || typeof valueType !== "object") {
        throw new Error("\"value\" metadata for a Dictionary must be defined in the " +
            ("mapper and it must of type \"object\" in " + objectName + "."));
    }
    var tempDictionary = {};
    for (var _i = 0, _a = Object.keys(object); _i < _a.length; _i++) {
        var key = _a[_i];
        tempDictionary[key] = serializer.serialize(valueType, object[key], objectName + "." + key);
    }
    return tempDictionary;
}
/**
 * Resolves a composite mapper's modelProperties.
 * @param serializer the serializer containing the entire set of mappers
 * @param mapper the composite mapper to resolve
 */
function resolveModelProperties(serializer, mapper, objectName) {
    var modelProps = mapper.type.modelProperties;
    if (!modelProps) {
        var className = mapper.type.className;
        if (!className) {
            throw new Error("Class name for model \"" + objectName + "\" is not provided in the mapper \"" + JSON.stringify(mapper, undefined, 2) + "\".");
        }
        var modelMapper = serializer.modelMappers[className];
        if (!modelMapper) {
            throw new Error("mapper() cannot be null or undefined for model \"" + className + "\".");
        }
        modelProps = modelMapper.type.modelProperties;
        if (!modelProps) {
            throw new Error("modelProperties cannot be null or undefined in the " +
                ("mapper \"" + JSON.stringify(modelMapper) + "\" of type \"" + className + "\" for object \"" + objectName + "\"."));
        }
    }
    return modelProps;
}
function serializeCompositeType(serializer, mapper, object, objectName) {
    var _a;
    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
        mapper = getPolymorphicMapper(serializer, mapper, object, "clientName");
    }
    if (object != undefined) {
        var payload = {};
        var modelProps = resolveModelProperties(serializer, mapper, objectName);
        for (var _i = 0, _b = Object.keys(modelProps); _i < _b.length; _i++) {
            var key = _b[_i];
            var propertyMapper = modelProps[key];
            if (propertyMapper.readOnly) {
                continue;
            }
            var propName = void 0;
            var parentObject = payload;
            if (serializer.isXML) {
                if (propertyMapper.xmlIsWrapped) {
                    propName = propertyMapper.xmlName;
                }
                else {
                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;
                }
            }
            else {
                var paths = splitSerializeName(propertyMapper.serializedName);
                propName = paths.pop();
                for (var _c = 0, paths_1 = paths; _c < paths_1.length; _c++) {
                    var pathName = paths_1[_c];
                    var childObject = parentObject[pathName];
                    if (childObject == undefined &&
                        (object[key] != undefined || propertyMapper.defaultValue !== undefined)) {
                        parentObject[pathName] = {};
                    }
                    parentObject = parentObject[pathName];
                }
            }
            if (parentObject != undefined) {
                var propertyObjectName = propertyMapper.serializedName !== ""
                    ? objectName + "." + propertyMapper.serializedName
                    : objectName;
                var toSerialize = object[key];
                var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
                if (polymorphicDiscriminator &&
                    polymorphicDiscriminator.clientName === key &&
                    toSerialize == undefined) {
                    toSerialize = mapper.serializedName;
                }
                var serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName);
                if (serializedValue !== undefined && propName != undefined) {
                    if (propertyMapper.xmlIsAttribute) {
                        // $ is the key attributes are kept under in xml2js.
                        // This keeps things simple while preventing name collision
                        // with names in user documents.
                        parentObject.$ = parentObject.$ || {};
                        parentObject.$[propName] = serializedValue;
                    }
                    else if (propertyMapper.xmlIsWrapped) {
                        parentObject[propName] = (_a = {}, _a[propertyMapper.xmlElementName] = serializedValue, _a);
                    }
                    else {
                        parentObject[propName] = serializedValue;
                    }
                }
            }
        }
        var additionalPropertiesMapper = mapper.type.additionalProperties;
        if (additionalPropertiesMapper) {
            var propNames = Object.keys(modelProps);
            var _loop_1 = function (clientPropName) {
                var isAdditionalProperty = propNames.every(function (pn) { return pn !== clientPropName; });
                if (isAdditionalProperty) {
                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '["' + clientPropName + '"]');
                }
            };
            for (var clientPropName in object) {
                _loop_1(clientPropName);
            }
        }
        return payload;
    }
    return object;
}
function isSpecialXmlProperty(propertyName) {
    return ["$", "_"].includes(propertyName);
}
function deserializeCompositeType(serializer, mapper, responseBody, objectName) {
    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {
        mapper = getPolymorphicMapper(serializer, mapper, responseBody, "serializedName");
    }
    var modelProps = resolveModelProperties(serializer, mapper, objectName);
    var instance = {};
    var handledPropertyNames = [];
    for (var _i = 0, _a = Object.keys(modelProps); _i < _a.length; _i++) {
        var key = _a[_i];
        var propertyMapper = modelProps[key];
        var paths = splitSerializeName(modelProps[key].serializedName);
        handledPropertyNames.push(paths[0]);
        var serializedName = propertyMapper.serializedName, xmlName = propertyMapper.xmlName, xmlElementName = propertyMapper.xmlElementName;
        var propertyObjectName = objectName;
        if (serializedName !== "" && serializedName !== undefined) {
            propertyObjectName = objectName + "." + serializedName;
        }
        var headerCollectionPrefix = propertyMapper.headerCollectionPrefix;
        if (headerCollectionPrefix) {
            var dictionary = {};
            for (var _b = 0, _c = Object.keys(responseBody); _b < _c.length; _b++) {
                var headerKey = _c[_b];
                if (headerKey.startsWith(headerCollectionPrefix)) {
                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName);
                }
                handledPropertyNames.push(headerKey);
            }
            instance[key] = dictionary;
        }
        else if (serializer.isXML) {
            if (propertyMapper.xmlIsAttribute && responseBody.$) {
                instance[key] = serializer.deserialize(propertyMapper, responseBody.$[xmlName], propertyObjectName);
            }
            else {
                var propertyName = xmlElementName || xmlName || serializedName;
                var unwrappedProperty = responseBody[propertyName];
                if (propertyMapper.xmlIsWrapped) {
                    unwrappedProperty = responseBody[xmlName];
                    unwrappedProperty = unwrappedProperty && unwrappedProperty[xmlElementName];
                    var isEmptyWrappedList = unwrappedProperty === undefined;
                    if (isEmptyWrappedList) {
                        unwrappedProperty = [];
                    }
                }
                instance[key] = serializer.deserialize(propertyMapper, unwrappedProperty, propertyObjectName);
            }
        }
        else {
            // deserialize the property if it is present in the provided responseBody instance
            var propertyInstance = void 0;
            var res = responseBody;
            // traversing the object step by step.
            for (var _d = 0, paths_2 = paths; _d < paths_2.length; _d++) {
                var item = paths_2[_d];
                if (!res)
                    break;
                res = res[item];
            }
            propertyInstance = res;
            var polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;
            // checking that the model property name (key)(ex: "fishtype") and the
            // clientName of the polymorphicDiscriminator {metadata} (ex: "fishtype")
            // instead of the serializedName of the polymorphicDiscriminator (ex: "fish.type")
            // is a better approach. The generator is not consistent with escaping '\.' in the
            // serializedName of the property (ex: "fish\.type") that is marked as polymorphic discriminator
            // and the serializedName of the metadata polymorphicDiscriminator (ex: "fish.type"). However,
            // the clientName transformation of the polymorphicDiscriminator (ex: "fishtype") and
            // the transformation of model property name (ex: "fishtype") is done consistently.
            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.
            if (polymorphicDiscriminator &&
                key === polymorphicDiscriminator.clientName &&
                propertyInstance == undefined) {
                propertyInstance = mapper.serializedName;
            }
            var serializedValue = void 0;
            // paging
            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === "") {
                propertyInstance = responseBody[key];
                instance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);
            }
            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {
                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName);
                instance[key] = serializedValue;
            }
        }
    }
    var additionalPropertiesMapper = mapper.type.additionalProperties;
    if (additionalPropertiesMapper) {
        var isAdditionalProperty = function (responsePropName) {
            for (var clientPropName in modelProps) {
                var paths = splitSerializeName(modelProps[clientPropName].serializedName);
                if (paths[0] === responsePropName) {
                    return false;
                }
            }
            return true;
        };
        for (var responsePropName in responseBody) {
            if (isAdditionalProperty(responsePropName)) {
                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '["' + responsePropName + '"]');
            }
        }
    }
    else if (responseBody) {
        for (var _e = 0, _f = Object.keys(responseBody); _e < _f.length; _e++) {
            var key = _f[_e];
            if (instance[key] === undefined &&
                !handledPropertyNames.includes(key) &&
                !isSpecialXmlProperty(key)) {
                instance[key] = responseBody[key];
            }
        }
    }
    return instance;
}
function deserializeDictionaryType(serializer, mapper, responseBody, objectName) {
    var value = mapper.type.value;
    if (!value || typeof value !== "object") {
        throw new Error("\"value\" metadata for a Dictionary must be defined in the " +
            ("mapper and it must of type \"object\" in " + objectName));
    }
    if (responseBody) {
        var tempDictionary = {};
        for (var _i = 0, _a = Object.keys(responseBody); _i < _a.length; _i++) {
            var key = _a[_i];
            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName);
        }
        return tempDictionary;
    }
    return responseBody;
}
function deserializeSequenceType(serializer, mapper, responseBody, objectName) {
    var element = mapper.type.element;
    if (!element || typeof element !== "object") {
        throw new Error("element\" metadata for an Array must be defined in the " +
            ("mapper and it must of type \"object\" in " + objectName));
    }
    if (responseBody) {
        if (!Array.isArray(responseBody)) {
            // xml2js will interpret a single element array as just the element, so force it to be an array
            responseBody = [responseBody];
        }
        var tempArray = [];
        for (var i = 0; i < responseBody.length; i++) {
            tempArray[i] = serializer.deserialize(element, responseBody[i], objectName + "[" + i + "]");
        }
        return tempArray;
    }
    return responseBody;
}
function getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {
    var polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);
    if (polymorphicDiscriminator) {
        var discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];
        if (discriminatorName != undefined) {
            var discriminatorValue = object[discriminatorName];
            if (discriminatorValue != undefined) {
                var typeName = mapper.type.uberParent || mapper.type.className;
                var indexDiscriminator = discriminatorValue === typeName
                    ? discriminatorValue
                    : typeName + "." + discriminatorValue;
                var polymorphicMapper = serializer.modelMappers.discriminators[indexDiscriminator];
                if (polymorphicMapper) {
                    mapper = polymorphicMapper;
                }
            }
        }
    }
    return mapper;
}
function getPolymorphicDiscriminatorRecursively(serializer, mapper) {
    return (mapper.type.polymorphicDiscriminator ||
        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||
        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));
}
function getPolymorphicDiscriminatorSafely(serializer, typeName) {
    return (typeName &&
        serializer.modelMappers[typeName] &&
        serializer.modelMappers[typeName].type.polymorphicDiscriminator);
}
// TODO: why is this here?
function serializeObject(toSerialize) {
    if (toSerialize == undefined)
        return undefined;
    if (toSerialize instanceof Uint8Array) {
        toSerialize = _util_base64__WEBPACK_IMPORTED_MODULE_0__["encodeByteArray"](toSerialize);
        return toSerialize;
    }
    else if (toSerialize instanceof Date) {
        return toSerialize.toISOString();
    }
    else if (Array.isArray(toSerialize)) {
        var array = [];
        for (var i = 0; i < toSerialize.length; i++) {
            array.push(serializeObject(toSerialize[i]));
        }
        return array;
    }
    else if (typeof toSerialize === "object") {
        var dictionary = {};
        for (var property in toSerialize) {
            dictionary[property] = serializeObject(toSerialize[property]);
        }
        return dictionary;
    }
    return toSerialize;
}
/**
 * Utility function to create a K:V from a list of strings
 */
function strEnum(o) {
    var result = {};
    for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {
        var key = o_1[_i];
        result[key] = key;
    }
    return result;
}
var MapperType = strEnum([
    "Base64Url",
    "Boolean",
    "ByteArray",
    "Composite",
    "Date",
    "DateTime",
    "DateTimeRfc1123",
    "Dictionary",
    "Enum",
    "Number",
    "Object",
    "Sequence",
    "String",
    "Stream",
    "TimeSpan",
    "UnixTime"
]);
//# sourceMappingURL=serializer.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/serviceClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/serviceClient.js ***!
  \***************************************************************/
/*! exports provided: ServiceClient, serializeRequestBody, createPipelineFromOptions, getPropertyParent, getOperationArgumentValueFromParameterPath, flattenResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceClient", function() { return ServiceClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeRequestBody", function() { return serializeRequestBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPipelineFromOptions", function() { return createPipelineFromOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPropertyParent", function() { return getPropertyParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOperationArgumentValueFromParameterPath", function() { return getOperationArgumentValueFromParameterPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flattenResponse", function() { return flattenResponse; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-auth */ "./node_modules/@azure/core-auth/dist-esm/src/index.js");
/* harmony import */ var _defaultHttpClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultHttpClient */ "./node_modules/@azure/core-http/es/src/defaultHttpClient.browser.js");
/* harmony import */ var _policies_logPolicy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./policies/logPolicy */ "./node_modules/@azure/core-http/es/src/policies/logPolicy.js");
/* harmony import */ var _operationParameter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operationParameter */ "./node_modules/@azure/core-http/es/src/operationParameter.js");
/* harmony import */ var _operationSpec__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operationSpec */ "./node_modules/@azure/core-http/es/src/operationSpec.js");
/* harmony import */ var _policies_deserializationPolicy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/deserializationPolicy */ "./node_modules/@azure/core-http/es/src/policies/deserializationPolicy.js");
/* harmony import */ var _policies_exponentialRetryPolicy__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/exponentialRetryPolicy */ "./node_modules/@azure/core-http/es/src/policies/exponentialRetryPolicy.js");
/* harmony import */ var _policies_generateClientRequestIdPolicy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies/generateClientRequestIdPolicy */ "./node_modules/@azure/core-http/es/src/policies/generateClientRequestIdPolicy.js");
/* harmony import */ var _policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/userAgentPolicy */ "./node_modules/@azure/core-http/es/src/policies/userAgentPolicy.js");
/* harmony import */ var _policies_redirectPolicy__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/redirectPolicy */ "./node_modules/@azure/core-http/es/src/policies/redirectPolicy.js");
/* harmony import */ var _policies_requestPolicy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/requestPolicy */ "./node_modules/@azure/core-http/es/src/policies/requestPolicy.js");
/* harmony import */ var _policies_rpRegistrationPolicy__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/rpRegistrationPolicy */ "./node_modules/@azure/core-http/es/src/policies/rpRegistrationPolicy.js");
/* harmony import */ var _policies_bearerTokenAuthenticationPolicy__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/bearerTokenAuthenticationPolicy */ "./node_modules/@azure/core-http/es/src/policies/bearerTokenAuthenticationPolicy.js");
/* harmony import */ var _policies_systemErrorRetryPolicy__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/systemErrorRetryPolicy */ "./node_modules/@azure/core-http/es/src/policies/systemErrorRetryPolicy.js");
/* harmony import */ var _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./queryCollectionFormat */ "./node_modules/@azure/core-http/es/src/queryCollectionFormat.js");
/* harmony import */ var _serializer__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./serializer */ "./node_modules/@azure/core-http/es/src/serializer.js");
/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./url */ "./node_modules/@azure/core-http/es/src/url.js");
/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
/* harmony import */ var _util_xml__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./util/xml */ "./node_modules/@azure/core-http/es/src/util/xml.browser.js");
/* harmony import */ var _webResource__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./webResource */ "./node_modules/@azure/core-http/es/src/webResource.js");
/* harmony import */ var _policies_proxyPolicy__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./policies/proxyPolicy */ "./node_modules/@azure/core-http/es/src/policies/proxyPolicy.browser.js");
/* harmony import */ var _policies_throttlingRetryPolicy__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./policies/throttlingRetryPolicy */ "./node_modules/@azure/core-http/es/src/policies/throttlingRetryPolicy.js");
/* harmony import */ var _policies_signingPolicy__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./policies/signingPolicy */ "./node_modules/@azure/core-http/es/src/policies/signingPolicy.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./log */ "./node_modules/@azure/core-http/es/src/log.js");
/* harmony import */ var _policies_keepAlivePolicy__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./policies/keepAlivePolicy */ "./node_modules/@azure/core-http/es/src/policies/keepAlivePolicy.js");
/* harmony import */ var _policies_tracingPolicy__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./policies/tracingPolicy */ "./node_modules/@azure/core-http/es/src/policies/tracingPolicy.js");
/* harmony import */ var _policies_disableResponseDecompressionPolicy__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./policies/disableResponseDecompressionPolicy */ "./node_modules/@azure/core-http/es/src/policies/disableResponseDecompressionPolicy.browser.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.





























/**
 * @class
 * Initializes a new instance of the ServiceClient.
 */
var ServiceClient = /** @class */ (function () {
    /**
     * The ServiceClient constructor
     * @constructor
     * @param credentials The credentials used for authentication with the service.
     * @param options The service client options that govern the behavior of the client.
     */
    function ServiceClient(credentials, 
    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */
    options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        this._withCredentials = options.withCredentials || false;
        this._httpClient = options.httpClient || new _defaultHttpClient__WEBPACK_IMPORTED_MODULE_2__["DefaultHttpClient"]();
        this._requestPolicyOptions = new _policies_requestPolicy__WEBPACK_IMPORTED_MODULE_11__["RequestPolicyOptions"](options.httpPipelineLogger);
        var requestPolicyFactories;
        if (Array.isArray(options.requestPolicyFactories)) {
            _log__WEBPACK_IMPORTED_MODULE_24__["logger"].info("ServiceClient: using custom request policies");
            requestPolicyFactories = options.requestPolicyFactories;
        }
        else {
            var authPolicyFactory = undefined;
            if (Object(_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__["isTokenCredential"])(credentials)) {
                _log__WEBPACK_IMPORTED_MODULE_24__["logger"].info("ServiceClient: creating bearer token authentication policy from provided credentials");
                // Create a wrapped RequestPolicyFactory here so that we can provide the
                // correct scope to the BearerTokenAuthenticationPolicy at the first time
                // one is requested.  This is needed because generated ServiceClient
                // implementations do not set baseUri until after ServiceClient's constructor
                // is finished, leaving baseUri empty at the time when it is needed to
                // build the correct scope name.
                var wrappedPolicyFactory = function () {
                    var bearerTokenPolicyFactory = undefined;
                    // eslint-disable-next-line @typescript-eslint/no-this-alias
                    var serviceClient = _this;
                    return {
                        create: function (nextPolicy, options) {
                            if (bearerTokenPolicyFactory === undefined || bearerTokenPolicyFactory === null) {
                                bearerTokenPolicyFactory = Object(_policies_bearerTokenAuthenticationPolicy__WEBPACK_IMPORTED_MODULE_13__["bearerTokenAuthenticationPolicy"])(credentials, (serviceClient.baseUri || "") + "/.default");
                            }
                            return bearerTokenPolicyFactory.create(nextPolicy, options);
                        }
                    };
                };
                authPolicyFactory = wrappedPolicyFactory();
            }
            else if (credentials && typeof credentials.signRequest === "function") {
                _log__WEBPACK_IMPORTED_MODULE_24__["logger"].info("ServiceClient: creating signing policy from provided credentials");
                authPolicyFactory = Object(_policies_signingPolicy__WEBPACK_IMPORTED_MODULE_23__["signingPolicy"])(credentials);
            }
            else if (credentials !== undefined && credentials !== null) {
                throw new Error("The credentials argument must implement the TokenCredential interface");
            }
            _log__WEBPACK_IMPORTED_MODULE_24__["logger"].info("ServiceClient: using default request policies");
            requestPolicyFactories = createDefaultRequestPolicyFactories(authPolicyFactory, options);
            if (options.requestPolicyFactories) {
                // options.requestPolicyFactories can also be a function that manipulates
                // the default requestPolicyFactories array
                var newRequestPolicyFactories = options.requestPolicyFactories(requestPolicyFactories);
                if (newRequestPolicyFactories) {
                    requestPolicyFactories = newRequestPolicyFactories;
                }
            }
        }
        this._requestPolicyFactories = requestPolicyFactories;
    }
    /**
     * Send the provided httpRequest.
     */
    ServiceClient.prototype.sendRequest = function (options) {
        if (options === null || options === undefined || typeof options !== "object") {
            throw new Error("options cannot be null or undefined and it must be of type object.");
        }
        var httpRequest;
        try {
            if (Object(_webResource__WEBPACK_IMPORTED_MODULE_20__["isWebResourceLike"])(options)) {
                options.validateRequestProperties();
                httpRequest = options;
            }
            else {
                httpRequest = new _webResource__WEBPACK_IMPORTED_MODULE_20__["WebResource"]();
                httpRequest = httpRequest.prepare(options);
            }
        }
        catch (error) {
            return Promise.reject(error);
        }
        var httpPipeline = this._httpClient;
        if (this._requestPolicyFactories && this._requestPolicyFactories.length > 0) {
            for (var i = this._requestPolicyFactories.length - 1; i >= 0; --i) {
                httpPipeline = this._requestPolicyFactories[i].create(httpPipeline, this._requestPolicyOptions);
            }
        }
        return httpPipeline.sendRequest(httpRequest);
    };
    /**
     * Send an HTTP request that is populated using the provided OperationSpec.
     * @param {OperationArguments} operationArguments The arguments that the HTTP request's templated values will be populated from.
     * @param {OperationSpec} operationSpec The OperationSpec to use to populate the httpRequest.
     * @param {ServiceCallback} callback The callback to call when the response is received.
     */
    ServiceClient.prototype.sendOperationRequest = function (operationArguments, operationSpec, callback) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var httpRequest, result, baseUri, requestUrl, _i, _a, urlParameter, urlParameterValue, _b, _c, queryParameter, queryParameterValue, index, item, index, contentType, _d, _e, headerParameter, headerValue, headerCollectionPrefix, _f, _g, key, options, customHeaderName, rawResponse, sendRequestError, error_1, error_2, cb;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        if (typeof operationArguments.options === "function") {
                            callback = operationArguments.options;
                            operationArguments.options = undefined;
                        }
                        httpRequest = new _webResource__WEBPACK_IMPORTED_MODULE_20__["WebResource"]();
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 6, , 7]);
                        baseUri = operationSpec.baseUrl || this.baseUri;
                        if (!baseUri) {
                            throw new Error("If operationSpec.baseUrl is not specified, then the ServiceClient must have a baseUri string property that contains the base URL to use.");
                        }
                        httpRequest.method = operationSpec.httpMethod;
                        httpRequest.operationSpec = operationSpec;
                        requestUrl = _url__WEBPACK_IMPORTED_MODULE_17__["URLBuilder"].parse(baseUri);
                        if (operationSpec.path) {
                            requestUrl.appendPath(operationSpec.path);
                        }
                        if (operationSpec.urlParameters && operationSpec.urlParameters.length > 0) {
                            for (_i = 0, _a = operationSpec.urlParameters; _i < _a.length; _i++) {
                                urlParameter = _a[_i];
                                urlParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, urlParameter, operationSpec.serializer);
                                urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(urlParameter));
                                if (!urlParameter.skipEncoding) {
                                    urlParameterValue = encodeURIComponent(urlParameterValue);
                                }
                                requestUrl.replaceAll("{" + (urlParameter.mapper.serializedName || Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(urlParameter)) + "}", urlParameterValue);
                            }
                        }
                        if (operationSpec.queryParameters && operationSpec.queryParameters.length > 0) {
                            for (_b = 0, _c = operationSpec.queryParameters; _b < _c.length; _b++) {
                                queryParameter = _c[_b];
                                queryParameterValue = getOperationArgumentValueFromParameter(this, operationArguments, queryParameter, operationSpec.serializer);
                                if (queryParameterValue !== undefined && queryParameterValue !== null) {
                                    queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(queryParameter));
                                    if (queryParameter.collectionFormat !== undefined &&
                                        queryParameter.collectionFormat !== null) {
                                        if (queryParameter.collectionFormat === _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_15__["QueryCollectionFormat"].Multi) {
                                            if (queryParameterValue.length === 0) {
                                                queryParameterValue = "";
                                            }
                                            else {
                                                for (index in queryParameterValue) {
                                                    item = queryParameterValue[index];
                                                    queryParameterValue[index] =
                                                        item === undefined || item === null ? "" : item.toString();
                                                }
                                            }
                                        }
                                        else if (queryParameter.collectionFormat === _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_15__["QueryCollectionFormat"].Ssv ||
                                            queryParameter.collectionFormat === _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_15__["QueryCollectionFormat"].Tsv) {
                                            queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                                        }
                                    }
                                    if (!queryParameter.skipEncoding) {
                                        if (Array.isArray(queryParameterValue)) {
                                            for (index in queryParameterValue) {
                                                if (queryParameterValue[index] !== undefined &&
                                                    queryParameterValue[index] !== null) {
                                                    queryParameterValue[index] = encodeURIComponent(queryParameterValue[index]);
                                                }
                                            }
                                        }
                                        else {
                                            queryParameterValue = encodeURIComponent(queryParameterValue);
                                        }
                                    }
                                    if (queryParameter.collectionFormat !== undefined &&
                                        queryParameter.collectionFormat !== null &&
                                        queryParameter.collectionFormat !== _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_15__["QueryCollectionFormat"].Multi &&
                                        queryParameter.collectionFormat !== _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_15__["QueryCollectionFormat"].Ssv &&
                                        queryParameter.collectionFormat !== _queryCollectionFormat__WEBPACK_IMPORTED_MODULE_15__["QueryCollectionFormat"].Tsv) {
                                        queryParameterValue = queryParameterValue.join(queryParameter.collectionFormat);
                                    }
                                    requestUrl.setQueryParameter(queryParameter.mapper.serializedName || Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(queryParameter), queryParameterValue);
                                }
                            }
                        }
                        httpRequest.url = requestUrl.toString();
                        contentType = operationSpec.contentType || this.requestContentType;
                        if (contentType) {
                            httpRequest.headers.set("Content-Type", contentType);
                        }
                        if (operationSpec.headerParameters) {
                            for (_d = 0, _e = operationSpec.headerParameters; _d < _e.length; _d++) {
                                headerParameter = _e[_d];
                                headerValue = getOperationArgumentValueFromParameter(this, operationArguments, headerParameter, operationSpec.serializer);
                                if (headerValue !== undefined && headerValue !== null) {
                                    headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(headerParameter));
                                    headerCollectionPrefix = headerParameter.mapper
                                        .headerCollectionPrefix;
                                    if (headerCollectionPrefix) {
                                        for (_f = 0, _g = Object.keys(headerValue); _f < _g.length; _f++) {
                                            key = _g[_f];
                                            httpRequest.headers.set(headerCollectionPrefix + key, headerValue[key]);
                                        }
                                    }
                                    else {
                                        httpRequest.headers.set(headerParameter.mapper.serializedName ||
                                            Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(headerParameter), headerValue);
                                    }
                                }
                            }
                        }
                        options = operationArguments.options;
                        if (options) {
                            if (options.customHeaders) {
                                for (customHeaderName in options.customHeaders) {
                                    httpRequest.headers.set(customHeaderName, options.customHeaders[customHeaderName]);
                                }
                            }
                            if (options.abortSignal) {
                                httpRequest.abortSignal = options.abortSignal;
                            }
                            if (options.timeout) {
                                httpRequest.timeout = options.timeout;
                            }
                            if (options.onUploadProgress) {
                                httpRequest.onUploadProgress = options.onUploadProgress;
                            }
                            if (options.onDownloadProgress) {
                                httpRequest.onDownloadProgress = options.onDownloadProgress;
                            }
                            if (options.spanOptions) {
                                httpRequest.spanOptions = options.spanOptions;
                            }
                            if (options.shouldDeserialize !== undefined && options.shouldDeserialize !== null) {
                                httpRequest.shouldDeserialize = options.shouldDeserialize;
                            }
                        }
                        httpRequest.withCredentials = this._withCredentials;
                        serializeRequestBody(this, httpRequest, operationArguments, operationSpec);
                        if (httpRequest.streamResponseBody === undefined || httpRequest.streamResponseBody === null) {
                            httpRequest.streamResponseBody = Object(_operationSpec__WEBPACK_IMPORTED_MODULE_5__["isStreamOperation"])(operationSpec);
                        }
                        rawResponse = void 0;
                        sendRequestError = void 0;
                        _h.label = 2;
                    case 2:
                        _h.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.sendRequest(httpRequest)];
                    case 3:
                        rawResponse = _h.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _h.sent();
                        sendRequestError = error_1;
                        return [3 /*break*/, 5];
                    case 5:
                        if (sendRequestError) {
                            if (sendRequestError.response) {
                                sendRequestError.details = flattenResponse(sendRequestError.response, operationSpec.responses[sendRequestError.statusCode] ||
                                    operationSpec.responses["default"]);
                            }
                            result = Promise.reject(sendRequestError);
                        }
                        else {
                            result = Promise.resolve(flattenResponse(rawResponse, operationSpec.responses[rawResponse.status]));
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        error_2 = _h.sent();
                        result = Promise.reject(error_2);
                        return [3 /*break*/, 7];
                    case 7:
                        cb = callback;
                        if (cb) {
                            result
                                // tslint:disable-next-line:no-null-keyword
                                .then(function (res) { return cb(null, res._response.parsedBody, res._response.request, res._response); })
                                .catch(function (err) { return cb(err); });
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return ServiceClient;
}());

function serializeRequestBody(serviceClient, httpRequest, operationArguments, operationSpec) {
    var _a;
    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {
        httpRequest.body = getOperationArgumentValueFromParameter(serviceClient, operationArguments, operationSpec.requestBody, operationSpec.serializer);
        var bodyMapper = operationSpec.requestBody.mapper;
        var required = bodyMapper.required, xmlName = bodyMapper.xmlName, xmlElementName = bodyMapper.xmlElementName, serializedName = bodyMapper.serializedName;
        var typeName = bodyMapper.type.name;
        try {
            if ((httpRequest.body !== undefined && httpRequest.body !== null) || required) {
                var requestBodyParameterPathString = Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(operationSpec.requestBody);
                httpRequest.body = operationSpec.serializer.serialize(bodyMapper, httpRequest.body, requestBodyParameterPathString);
                var isStream = typeName === _serializer__WEBPACK_IMPORTED_MODULE_16__["MapperType"].Stream;
                if (operationSpec.isXML) {
                    if (typeName === _serializer__WEBPACK_IMPORTED_MODULE_16__["MapperType"].Sequence) {
                        httpRequest.body = Object(_util_xml__WEBPACK_IMPORTED_MODULE_19__["stringifyXML"])(_util_utils__WEBPACK_IMPORTED_MODULE_18__["prepareXMLRootList"](httpRequest.body, xmlElementName || xmlName || serializedName), { rootName: xmlName || serializedName });
                    }
                    else if (!isStream) {
                        httpRequest.body = Object(_util_xml__WEBPACK_IMPORTED_MODULE_19__["stringifyXML"])(httpRequest.body, {
                            rootName: xmlName || serializedName
                        });
                    }
                }
                else if (typeName === _serializer__WEBPACK_IMPORTED_MODULE_16__["MapperType"].String &&
                    (((_a = operationSpec.contentType) === null || _a === void 0 ? void 0 : _a.match("text/plain")) || operationSpec.mediaType === "text")) {
                    // the String serializer has validated that request body is a string
                    // so just send the string.
                    return;
                }
                else if (!isStream) {
                    httpRequest.body = JSON.stringify(httpRequest.body);
                }
            }
        }
        catch (error) {
            throw new Error("Error \"" + error.message + "\" occurred in serializing the payload - " + JSON.stringify(serializedName, undefined, "  ") + ".");
        }
    }
    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {
        httpRequest.formData = {};
        for (var _i = 0, _b = operationSpec.formDataParameters; _i < _b.length; _i++) {
            var formDataParameter = _b[_i];
            var formDataParameterValue = getOperationArgumentValueFromParameter(serviceClient, operationArguments, formDataParameter, operationSpec.serializer);
            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {
                var formDataParameterPropertyName = formDataParameter.mapper.serializedName || Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(formDataParameter);
                httpRequest.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameter"])(formDataParameter));
            }
        }
    }
}
function getValueOrFunctionResult(value, defaultValueCreator) {
    var result;
    if (typeof value === "string") {
        result = value;
    }
    else {
        result = defaultValueCreator();
        if (typeof value === "function") {
            result = value(result);
        }
    }
    return result;
}
function createDefaultRequestPolicyFactories(authPolicyFactory, options) {
    var factories = [];
    if (options.generateClientRequestIdHeader) {
        factories.push(Object(_policies_generateClientRequestIdPolicy__WEBPACK_IMPORTED_MODULE_8__["generateClientRequestIdPolicy"])(options.clientRequestIdHeaderName));
    }
    if (authPolicyFactory) {
        factories.push(authPolicyFactory);
    }
    var userAgentHeaderName = getValueOrFunctionResult(options.userAgentHeaderName, _policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_9__["getDefaultUserAgentHeaderName"]);
    var userAgentHeaderValue = getValueOrFunctionResult(options.userAgent, _policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_9__["getDefaultUserAgentValue"]);
    if (userAgentHeaderName && userAgentHeaderValue) {
        factories.push(Object(_policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_9__["userAgentPolicy"])({ key: userAgentHeaderName, value: userAgentHeaderValue }));
    }
    factories.push(Object(_policies_redirectPolicy__WEBPACK_IMPORTED_MODULE_10__["redirectPolicy"])());
    factories.push(Object(_policies_rpRegistrationPolicy__WEBPACK_IMPORTED_MODULE_12__["rpRegistrationPolicy"])(options.rpRegistrationRetryTimeout));
    if (!options.noRetryPolicy) {
        factories.push(Object(_policies_exponentialRetryPolicy__WEBPACK_IMPORTED_MODULE_7__["exponentialRetryPolicy"])());
        factories.push(Object(_policies_systemErrorRetryPolicy__WEBPACK_IMPORTED_MODULE_14__["systemErrorRetryPolicy"])());
        factories.push(Object(_policies_throttlingRetryPolicy__WEBPACK_IMPORTED_MODULE_22__["throttlingRetryPolicy"])());
    }
    factories.push(Object(_policies_deserializationPolicy__WEBPACK_IMPORTED_MODULE_6__["deserializationPolicy"])(options.deserializationContentTypes));
    if (_util_utils__WEBPACK_IMPORTED_MODULE_18__["isNode"]) {
        factories.push(Object(_policies_proxyPolicy__WEBPACK_IMPORTED_MODULE_21__["proxyPolicy"])(options.proxySettings));
    }
    factories.push(Object(_policies_logPolicy__WEBPACK_IMPORTED_MODULE_3__["logPolicy"])({ logger: _log__WEBPACK_IMPORTED_MODULE_24__["logger"].info }));
    return factories;
}
function createPipelineFromOptions(pipelineOptions, authPolicyFactory) {
    var requestPolicyFactories = [];
    var userAgentValue = undefined;
    if (pipelineOptions.userAgentOptions && pipelineOptions.userAgentOptions.userAgentPrefix) {
        var userAgentInfo = [];
        userAgentInfo.push(pipelineOptions.userAgentOptions.userAgentPrefix);
        // Add the default user agent value if it isn't already specified
        // by the userAgentPrefix option.
        var defaultUserAgentInfo = Object(_policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_9__["getDefaultUserAgentValue"])();
        if (userAgentInfo.indexOf(defaultUserAgentInfo) === -1) {
            userAgentInfo.push(defaultUserAgentInfo);
        }
        userAgentValue = userAgentInfo.join(" ");
    }
    var keepAliveOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _policies_keepAlivePolicy__WEBPACK_IMPORTED_MODULE_25__["DefaultKeepAliveOptions"]), pipelineOptions.keepAliveOptions);
    var retryOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _policies_exponentialRetryPolicy__WEBPACK_IMPORTED_MODULE_7__["DefaultRetryOptions"]), pipelineOptions.retryOptions);
    var redirectOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _policies_redirectPolicy__WEBPACK_IMPORTED_MODULE_10__["DefaultRedirectOptions"]), pipelineOptions.redirectOptions);
    if (_util_utils__WEBPACK_IMPORTED_MODULE_18__["isNode"]) {
        requestPolicyFactories.push(Object(_policies_proxyPolicy__WEBPACK_IMPORTED_MODULE_21__["proxyPolicy"])(pipelineOptions.proxyOptions));
    }
    var deserializationOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _policies_deserializationPolicy__WEBPACK_IMPORTED_MODULE_6__["DefaultDeserializationOptions"]), pipelineOptions.deserializationOptions);
    var loggingOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, pipelineOptions.loggingOptions);
    requestPolicyFactories.push(Object(_policies_tracingPolicy__WEBPACK_IMPORTED_MODULE_26__["tracingPolicy"])({ userAgent: userAgentValue }), Object(_policies_keepAlivePolicy__WEBPACK_IMPORTED_MODULE_25__["keepAlivePolicy"])(keepAliveOptions), Object(_policies_userAgentPolicy__WEBPACK_IMPORTED_MODULE_9__["userAgentPolicy"])({ value: userAgentValue }), Object(_policies_generateClientRequestIdPolicy__WEBPACK_IMPORTED_MODULE_8__["generateClientRequestIdPolicy"])(), Object(_policies_deserializationPolicy__WEBPACK_IMPORTED_MODULE_6__["deserializationPolicy"])(deserializationOptions.expectedContentTypes), Object(_policies_throttlingRetryPolicy__WEBPACK_IMPORTED_MODULE_22__["throttlingRetryPolicy"])(), Object(_policies_systemErrorRetryPolicy__WEBPACK_IMPORTED_MODULE_14__["systemErrorRetryPolicy"])(), Object(_policies_exponentialRetryPolicy__WEBPACK_IMPORTED_MODULE_7__["exponentialRetryPolicy"])(retryOptions.maxRetries, retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs));
    if (redirectOptions.handleRedirects) {
        requestPolicyFactories.push(Object(_policies_redirectPolicy__WEBPACK_IMPORTED_MODULE_10__["redirectPolicy"])(redirectOptions.maxRetries));
    }
    if (authPolicyFactory) {
        requestPolicyFactories.push(authPolicyFactory);
    }
    requestPolicyFactories.push(Object(_policies_logPolicy__WEBPACK_IMPORTED_MODULE_3__["logPolicy"])(loggingOptions));
    if (_util_utils__WEBPACK_IMPORTED_MODULE_18__["isNode"] && pipelineOptions.decompressResponse === false) {
        requestPolicyFactories.push(Object(_policies_disableResponseDecompressionPolicy__WEBPACK_IMPORTED_MODULE_27__["disableResponseDecompressionPolicy"])());
    }
    return {
        httpClient: pipelineOptions.httpClient,
        requestPolicyFactories: requestPolicyFactories
    };
}
/**
 * Get the property parent for the property at the provided path when starting with the provided
 * parent object.
 */
function getPropertyParent(parent, propertyPath) {
    if (parent && propertyPath) {
        var propertyPathLength = propertyPath.length;
        for (var i = 0; i < propertyPathLength - 1; ++i) {
            var propertyName = propertyPath[i];
            if (!parent[propertyName]) {
                parent[propertyName] = {};
            }
            parent = parent[propertyName];
        }
    }
    return parent;
}
function getOperationArgumentValueFromParameter(serviceClient, operationArguments, parameter, serializer) {
    return getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameter.parameterPath, parameter.mapper, serializer);
}
function getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, parameterPath, parameterMapper, serializer) {
    var value;
    if (typeof parameterPath === "string") {
        parameterPath = [parameterPath];
    }
    if (Array.isArray(parameterPath)) {
        if (parameterPath.length > 0) {
            if (parameterMapper.isConstant) {
                value = parameterMapper.defaultValue;
            }
            else {
                var propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);
                if (!propertySearchResult.propertyFound) {
                    propertySearchResult = getPropertyFromParameterPath(serviceClient, parameterPath);
                }
                var useDefaultValue = false;
                if (!propertySearchResult.propertyFound) {
                    useDefaultValue =
                        parameterMapper.required ||
                            (parameterPath[0] === "options" && parameterPath.length === 2);
                }
                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;
            }
            // Serialize just for validation purposes.
            var parameterPathString = Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameterPath"])(parameterPath, parameterMapper);
            serializer.serialize(parameterMapper, value, parameterPathString);
        }
    }
    else {
        if (parameterMapper.required) {
            value = {};
        }
        for (var propertyName in parameterPath) {
            var propertyMapper = parameterMapper.type.modelProperties[propertyName];
            var propertyPath = parameterPath[propertyName];
            var propertyValue = getOperationArgumentValueFromParameterPath(serviceClient, operationArguments, propertyPath, propertyMapper, serializer);
            // Serialize just for validation purposes.
            var propertyPathString = Object(_operationParameter__WEBPACK_IMPORTED_MODULE_4__["getPathStringFromParameterPath"])(propertyPath, propertyMapper);
            serializer.serialize(propertyMapper, propertyValue, propertyPathString);
            if (propertyValue !== undefined && propertyValue !== null) {
                if (!value) {
                    value = {};
                }
                value[propertyName] = propertyValue;
            }
        }
    }
    return value;
}
function getPropertyFromParameterPath(parent, parameterPath) {
    var result = { propertyFound: false };
    var i = 0;
    for (; i < parameterPath.length; ++i) {
        var parameterPathPart = parameterPath[i];
        // Make sure to check inherited properties too, so don't use hasOwnProperty().
        if (parent !== undefined && parent !== null && parameterPathPart in parent) {
            parent = parent[parameterPathPart];
        }
        else {
            break;
        }
    }
    if (i === parameterPath.length) {
        result.propertyValue = parent;
        result.propertyFound = true;
    }
    return result;
}
function flattenResponse(_response, responseSpec) {
    var parsedHeaders = _response.parsedHeaders;
    var bodyMapper = responseSpec && responseSpec.bodyMapper;
    var addOperationResponse = function (obj) {
        return Object.defineProperty(obj, "_response", {
            value: _response
        });
    };
    if (bodyMapper) {
        var typeName = bodyMapper.type.name;
        if (typeName === "Stream") {
            return addOperationResponse(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, parsedHeaders), { blobBody: _response.blobBody, readableStreamBody: _response.readableStreamBody }));
        }
        var modelProperties_1 = (typeName === "Composite" && bodyMapper.type.modelProperties) || {};
        var isPageableResponse = Object.keys(modelProperties_1).some(function (k) { return modelProperties_1[k].serializedName === ""; });
        if (typeName === "Sequence" || isPageableResponse) {
            var arrayResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spreadArrays"])((_response.parsedBody || []));
            for (var _i = 0, _a = Object.keys(modelProperties_1); _i < _a.length; _i++) {
                var key = _a[_i];
                if (modelProperties_1[key].serializedName) {
                    arrayResponse[key] = _response.parsedBody[key];
                }
            }
            if (parsedHeaders) {
                for (var _b = 0, _c = Object.keys(parsedHeaders); _b < _c.length; _b++) {
                    var key = _c[_b];
                    arrayResponse[key] = parsedHeaders[key];
                }
            }
            addOperationResponse(arrayResponse);
            return arrayResponse;
        }
        if (typeName === "Composite" || typeName === "Dictionary") {
            return addOperationResponse(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, parsedHeaders), _response.parsedBody));
        }
    }
    if (bodyMapper ||
        _response.request.method === "HEAD" ||
        _util_utils__WEBPACK_IMPORTED_MODULE_18__["isPrimitiveType"](_response.parsedBody)) {
        // primitive body types and HEAD booleans
        return addOperationResponse(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, parsedHeaders), { body: _response.parsedBody }));
    }
    return addOperationResponse(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, parsedHeaders), _response.parsedBody));
}
//# sourceMappingURL=serviceClient.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/url.js":
/*!*****************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/url.js ***!
  \*****************************************************/
/*! exports provided: URLQuery, URLBuilder, URLToken, isAlphaNumericCharacter, URLTokenizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URLQuery", function() { return URLQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URLBuilder", function() { return URLBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URLToken", function() { return URLToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAlphaNumericCharacter", function() { return isAlphaNumericCharacter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URLTokenizer", function() { return URLTokenizer; });
/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * A class that handles the query portion of a URLBuilder.
 */
var URLQuery = /** @class */ (function () {
    function URLQuery() {
        this._rawQuery = {};
    }
    /**
     * Get whether or not there any query parameters in this URLQuery.
     */
    URLQuery.prototype.any = function () {
        return Object.keys(this._rawQuery).length > 0;
    };
    /**
     * Get the keys of the query string.
     */
    URLQuery.prototype.keys = function () {
        return Object.keys(this._rawQuery);
    };
    /**
     * Set a query parameter with the provided name and value. If the parameterValue is undefined or
     * empty, then this will attempt to remove an existing query parameter with the provided
     * parameterName.
     */
    URLQuery.prototype.set = function (parameterName, parameterValue) {
        if (parameterName) {
            if (parameterValue !== undefined && parameterValue !== null) {
                var newValue = Array.isArray(parameterValue) ? parameterValue : parameterValue.toString();
                this._rawQuery[parameterName] = newValue;
            }
            else {
                delete this._rawQuery[parameterName];
            }
        }
    };
    /**
     * Get the value of the query parameter with the provided name. If no parameter exists with the
     * provided parameter name, then undefined will be returned.
     */
    URLQuery.prototype.get = function (parameterName) {
        return parameterName ? this._rawQuery[parameterName] : undefined;
    };
    /**
     * Get the string representation of this query. The return value will not start with a "?".
     */
    URLQuery.prototype.toString = function () {
        var result = "";
        for (var parameterName in this._rawQuery) {
            if (result) {
                result += "&";
            }
            var parameterValue = this._rawQuery[parameterName];
            if (Array.isArray(parameterValue)) {
                var parameterStrings = [];
                for (var _i = 0, parameterValue_1 = parameterValue; _i < parameterValue_1.length; _i++) {
                    var parameterValueElement = parameterValue_1[_i];
                    parameterStrings.push(parameterName + "=" + parameterValueElement);
                }
                result += parameterStrings.join("&");
            }
            else {
                result += parameterName + "=" + parameterValue;
            }
        }
        return result;
    };
    /**
     * Parse a URLQuery from the provided text.
     */
    URLQuery.parse = function (text) {
        var result = new URLQuery();
        if (text) {
            if (text.startsWith("?")) {
                text = text.substring(1);
            }
            var currentState = "ParameterName";
            var parameterName = "";
            var parameterValue = "";
            for (var i = 0; i < text.length; ++i) {
                var currentCharacter = text[i];
                switch (currentState) {
                    case "ParameterName":
                        switch (currentCharacter) {
                            case "=":
                                currentState = "ParameterValue";
                                break;
                            case "&":
                                parameterName = "";
                                parameterValue = "";
                                break;
                            default:
                                parameterName += currentCharacter;
                                break;
                        }
                        break;
                    case "ParameterValue":
                        switch (currentCharacter) {
                            case "=":
                                parameterName = "";
                                parameterValue = "";
                                currentState = "Invalid";
                                break;
                            case "&":
                                result.set(parameterName, parameterValue);
                                parameterName = "";
                                parameterValue = "";
                                currentState = "ParameterName";
                                break;
                            default:
                                parameterValue += currentCharacter;
                                break;
                        }
                        break;
                    case "Invalid":
                        if (currentCharacter === "&") {
                            currentState = "ParameterName";
                        }
                        break;
                    default:
                        throw new Error("Unrecognized URLQuery parse state: " + currentState);
                }
            }
            if (currentState === "ParameterValue") {
                result.set(parameterName, parameterValue);
            }
        }
        return result;
    };
    return URLQuery;
}());

/**
 * A class that handles creating, modifying, and parsing URLs.
 */
var URLBuilder = /** @class */ (function () {
    function URLBuilder() {
    }
    /**
     * Set the scheme/protocol for this URL. If the provided scheme contains other parts of a URL
     * (such as a host, port, path, or query), those parts will be added to this URL as well.
     */
    URLBuilder.prototype.setScheme = function (scheme) {
        if (!scheme) {
            this._scheme = undefined;
        }
        else {
            this.set(scheme, "SCHEME");
        }
    };
    /**
     * Get the scheme that has been set in this URL.
     */
    URLBuilder.prototype.getScheme = function () {
        return this._scheme;
    };
    /**
     * Set the host for this URL. If the provided host contains other parts of a URL (such as a
     * port, path, or query), those parts will be added to this URL as well.
     */
    URLBuilder.prototype.setHost = function (host) {
        if (!host) {
            this._host = undefined;
        }
        else {
            this.set(host, "SCHEME_OR_HOST");
        }
    };
    /**
     * Get the host that has been set in this URL.
     */
    URLBuilder.prototype.getHost = function () {
        return this._host;
    };
    /**
     * Set the port for this URL. If the provided port contains other parts of a URL (such as a
     * path or query), those parts will be added to this URL as well.
     */
    URLBuilder.prototype.setPort = function (port) {
        if (port === undefined || port === null || port === "") {
            this._port = undefined;
        }
        else {
            this.set(port.toString(), "PORT");
        }
    };
    /**
     * Get the port that has been set in this URL.
     */
    URLBuilder.prototype.getPort = function () {
        return this._port;
    };
    /**
     * Set the path for this URL. If the provided path contains a query, then it will be added to
     * this URL as well.
     */
    URLBuilder.prototype.setPath = function (path) {
        if (!path) {
            this._path = undefined;
        }
        else {
            var schemeIndex = path.indexOf("://");
            if (schemeIndex !== -1) {
                var schemeStart = path.lastIndexOf("/", schemeIndex);
                // Make sure to only grab the URL part of the path before setting the state back to SCHEME
                // this will handle cases such as "/a/b/c/https://microsoft.com" => "https://microsoft.com"
                this.set(schemeStart === -1 ? path : path.substr(schemeStart + 1), "SCHEME");
            }
            else {
                this.set(path, "PATH");
            }
        }
    };
    /**
     * Append the provided path to this URL's existing path. If the provided path contains a query,
     * then it will be added to this URL as well.
     */
    URLBuilder.prototype.appendPath = function (path) {
        if (path) {
            var currentPath = this.getPath();
            if (currentPath) {
                if (!currentPath.endsWith("/")) {
                    currentPath += "/";
                }
                if (path.startsWith("/")) {
                    path = path.substring(1);
                }
                path = currentPath + path;
            }
            this.set(path, "PATH");
        }
    };
    /**
     * Get the path that has been set in this URL.
     */
    URLBuilder.prototype.getPath = function () {
        return this._path;
    };
    /**
     * Set the query in this URL.
     */
    URLBuilder.prototype.setQuery = function (query) {
        if (!query) {
            this._query = undefined;
        }
        else {
            this._query = URLQuery.parse(query);
        }
    };
    /**
     * Set a query parameter with the provided name and value in this URL's query. If the provided
     * query parameter value is undefined or empty, then the query parameter will be removed if it
     * existed.
     */
    URLBuilder.prototype.setQueryParameter = function (queryParameterName, queryParameterValue) {
        if (queryParameterName) {
            if (!this._query) {
                this._query = new URLQuery();
            }
            this._query.set(queryParameterName, queryParameterValue);
        }
    };
    /**
     * Get the value of the query parameter with the provided query parameter name. If no query
     * parameter exists with the provided name, then undefined will be returned.
     */
    URLBuilder.prototype.getQueryParameterValue = function (queryParameterName) {
        return this._query ? this._query.get(queryParameterName) : undefined;
    };
    /**
     * Get the query in this URL.
     */
    URLBuilder.prototype.getQuery = function () {
        return this._query ? this._query.toString() : undefined;
    };
    /**
     * Set the parts of this URL by parsing the provided text using the provided startState.
     */
    URLBuilder.prototype.set = function (text, startState) {
        var tokenizer = new URLTokenizer(text, startState);
        while (tokenizer.next()) {
            var token = tokenizer.current();
            var tokenPath = void 0;
            if (token) {
                switch (token.type) {
                    case "SCHEME":
                        this._scheme = token.text || undefined;
                        break;
                    case "HOST":
                        this._host = token.text || undefined;
                        break;
                    case "PORT":
                        this._port = token.text || undefined;
                        break;
                    case "PATH":
                        tokenPath = token.text || undefined;
                        if (!this._path || this._path === "/" || tokenPath !== "/") {
                            this._path = tokenPath;
                        }
                        break;
                    case "QUERY":
                        this._query = URLQuery.parse(token.text);
                        break;
                    default:
                        throw new Error("Unrecognized URLTokenType: " + token.type);
                }
            }
        }
    };
    URLBuilder.prototype.toString = function () {
        var result = "";
        if (this._scheme) {
            result += this._scheme + "://";
        }
        if (this._host) {
            result += this._host;
        }
        if (this._port) {
            result += ":" + this._port;
        }
        if (this._path) {
            if (!this._path.startsWith("/")) {
                result += "/";
            }
            result += this._path;
        }
        if (this._query && this._query.any()) {
            result += "?" + this._query.toString();
        }
        return result;
    };
    /**
     * If the provided searchValue is found in this URLBuilder, then replace it with the provided
     * replaceValue.
     */
    URLBuilder.prototype.replaceAll = function (searchValue, replaceValue) {
        if (searchValue) {
            this.setScheme(Object(_util_utils__WEBPACK_IMPORTED_MODULE_0__["replaceAll"])(this.getScheme(), searchValue, replaceValue));
            this.setHost(Object(_util_utils__WEBPACK_IMPORTED_MODULE_0__["replaceAll"])(this.getHost(), searchValue, replaceValue));
            this.setPort(Object(_util_utils__WEBPACK_IMPORTED_MODULE_0__["replaceAll"])(this.getPort(), searchValue, replaceValue));
            this.setPath(Object(_util_utils__WEBPACK_IMPORTED_MODULE_0__["replaceAll"])(this.getPath(), searchValue, replaceValue));
            this.setQuery(Object(_util_utils__WEBPACK_IMPORTED_MODULE_0__["replaceAll"])(this.getQuery(), searchValue, replaceValue));
        }
    };
    URLBuilder.parse = function (text) {
        var result = new URLBuilder();
        result.set(text, "SCHEME_OR_HOST");
        return result;
    };
    return URLBuilder;
}());

var URLToken = /** @class */ (function () {
    function URLToken(text, type) {
        this.text = text;
        this.type = type;
    }
    URLToken.scheme = function (text) {
        return new URLToken(text, "SCHEME");
    };
    URLToken.host = function (text) {
        return new URLToken(text, "HOST");
    };
    URLToken.port = function (text) {
        return new URLToken(text, "PORT");
    };
    URLToken.path = function (text) {
        return new URLToken(text, "PATH");
    };
    URLToken.query = function (text) {
        return new URLToken(text, "QUERY");
    };
    return URLToken;
}());

/**
 * Get whether or not the provided character (single character string) is an alphanumeric (letter or
 * digit) character.
 */
function isAlphaNumericCharacter(character) {
    var characterCode = character.charCodeAt(0);
    return ((48 /* '0' */ <= characterCode && characterCode <= 57) /* '9' */ ||
        (65 /* 'A' */ <= characterCode && characterCode <= 90) /* 'Z' */ ||
        (97 /* 'a' */ <= characterCode && characterCode <= 122) /* 'z' */);
}
/**
 * A class that tokenizes URL strings.
 */
var URLTokenizer = /** @class */ (function () {
    function URLTokenizer(_text, state) {
        this._text = _text;
        this._textLength = _text ? _text.length : 0;
        this._currentState = state !== undefined && state !== null ? state : "SCHEME_OR_HOST";
        this._currentIndex = 0;
    }
    /**
     * Get the current URLToken this URLTokenizer is pointing at, or undefined if the URLTokenizer
     * hasn't started or has finished tokenizing.
     */
    URLTokenizer.prototype.current = function () {
        return this._currentToken;
    };
    /**
     * Advance to the next URLToken and return whether or not a URLToken was found.
     */
    URLTokenizer.prototype.next = function () {
        if (!hasCurrentCharacter(this)) {
            this._currentToken = undefined;
        }
        else {
            switch (this._currentState) {
                case "SCHEME":
                    nextScheme(this);
                    break;
                case "SCHEME_OR_HOST":
                    nextSchemeOrHost(this);
                    break;
                case "HOST":
                    nextHost(this);
                    break;
                case "PORT":
                    nextPort(this);
                    break;
                case "PATH":
                    nextPath(this);
                    break;
                case "QUERY":
                    nextQuery(this);
                    break;
                default:
                    throw new Error("Unrecognized URLTokenizerState: " + this._currentState);
            }
        }
        return !!this._currentToken;
    };
    return URLTokenizer;
}());

/**
 * Read the remaining characters from this Tokenizer's character stream.
 */
function readRemaining(tokenizer) {
    var result = "";
    if (tokenizer._currentIndex < tokenizer._textLength) {
        result = tokenizer._text.substring(tokenizer._currentIndex);
        tokenizer._currentIndex = tokenizer._textLength;
    }
    return result;
}
/**
 * Whether or not this URLTokenizer has a current character.
 */
function hasCurrentCharacter(tokenizer) {
    return tokenizer._currentIndex < tokenizer._textLength;
}
/**
 * Get the character in the text string at the current index.
 */
function getCurrentCharacter(tokenizer) {
    return tokenizer._text[tokenizer._currentIndex];
}
/**
 * Advance to the character in text that is "step" characters ahead. If no step value is provided,
 * then step will default to 1.
 */
function nextCharacter(tokenizer, step) {
    if (hasCurrentCharacter(tokenizer)) {
        if (!step) {
            step = 1;
        }
        tokenizer._currentIndex += step;
    }
}
/**
 * Starting with the current character, peek "charactersToPeek" number of characters ahead in this
 * Tokenizer's stream of characters.
 */
function peekCharacters(tokenizer, charactersToPeek) {
    var endIndex = tokenizer._currentIndex + charactersToPeek;
    if (tokenizer._textLength < endIndex) {
        endIndex = tokenizer._textLength;
    }
    return tokenizer._text.substring(tokenizer._currentIndex, endIndex);
}
/**
 * Read characters from this Tokenizer until the end of the stream or until the provided condition
 * is false when provided the current character.
 */
function readWhile(tokenizer, condition) {
    var result = "";
    while (hasCurrentCharacter(tokenizer)) {
        var currentCharacter = getCurrentCharacter(tokenizer);
        if (!condition(currentCharacter)) {
            break;
        }
        else {
            result += currentCharacter;
            nextCharacter(tokenizer);
        }
    }
    return result;
}
/**
 * Read characters from this Tokenizer until a non-alphanumeric character or the end of the
 * character stream is reached.
 */
function readWhileLetterOrDigit(tokenizer) {
    return readWhile(tokenizer, function (character) { return isAlphaNumericCharacter(character); });
}
/**
 * Read characters from this Tokenizer until one of the provided terminating characters is read or
 * the end of the character stream is reached.
 */
function readUntilCharacter(tokenizer) {
    var terminatingCharacters = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        terminatingCharacters[_i - 1] = arguments[_i];
    }
    return readWhile(tokenizer, function (character) { return terminatingCharacters.indexOf(character) === -1; });
}
function nextScheme(tokenizer) {
    var scheme = readWhileLetterOrDigit(tokenizer);
    tokenizer._currentToken = URLToken.scheme(scheme);
    if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentState = "DONE";
    }
    else {
        tokenizer._currentState = "HOST";
    }
}
function nextSchemeOrHost(tokenizer) {
    var schemeOrHost = readUntilCharacter(tokenizer, ":", "/", "?");
    if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentToken = URLToken.host(schemeOrHost);
        tokenizer._currentState = "DONE";
    }
    else if (getCurrentCharacter(tokenizer) === ":") {
        if (peekCharacters(tokenizer, 3) === "://") {
            tokenizer._currentToken = URLToken.scheme(schemeOrHost);
            tokenizer._currentState = "HOST";
        }
        else {
            tokenizer._currentToken = URLToken.host(schemeOrHost);
            tokenizer._currentState = "PORT";
        }
    }
    else {
        tokenizer._currentToken = URLToken.host(schemeOrHost);
        if (getCurrentCharacter(tokenizer) === "/") {
            tokenizer._currentState = "PATH";
        }
        else {
            tokenizer._currentState = "QUERY";
        }
    }
}
function nextHost(tokenizer) {
    if (peekCharacters(tokenizer, 3) === "://") {
        nextCharacter(tokenizer, 3);
    }
    var host = readUntilCharacter(tokenizer, ":", "/", "?");
    tokenizer._currentToken = URLToken.host(host);
    if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentState = "DONE";
    }
    else if (getCurrentCharacter(tokenizer) === ":") {
        tokenizer._currentState = "PORT";
    }
    else if (getCurrentCharacter(tokenizer) === "/") {
        tokenizer._currentState = "PATH";
    }
    else {
        tokenizer._currentState = "QUERY";
    }
}
function nextPort(tokenizer) {
    if (getCurrentCharacter(tokenizer) === ":") {
        nextCharacter(tokenizer);
    }
    var port = readUntilCharacter(tokenizer, "/", "?");
    tokenizer._currentToken = URLToken.port(port);
    if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentState = "DONE";
    }
    else if (getCurrentCharacter(tokenizer) === "/") {
        tokenizer._currentState = "PATH";
    }
    else {
        tokenizer._currentState = "QUERY";
    }
}
function nextPath(tokenizer) {
    var path = readUntilCharacter(tokenizer, "?");
    tokenizer._currentToken = URLToken.path(path);
    if (!hasCurrentCharacter(tokenizer)) {
        tokenizer._currentState = "DONE";
    }
    else {
        tokenizer._currentState = "QUERY";
    }
}
function nextQuery(tokenizer) {
    if (getCurrentCharacter(tokenizer) === "?") {
        nextCharacter(tokenizer);
    }
    var query = readRemaining(tokenizer);
    tokenizer._currentToken = URLToken.query(query);
    tokenizer._currentState = "DONE";
}
//# sourceMappingURL=url.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/util/base64.browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/util/base64.browser.js ***!
  \*********************************************************************/
/*! exports provided: encodeString, encodeByteArray, decodeString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeString", function() { return encodeString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeByteArray", function() { return encodeByteArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeString", function() { return decodeString; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Encodes a string in base64 format.
 * @param value the string to encode
 */
function encodeString(value) {
    return btoa(value);
}
/**
 * Encodes a byte array in base64 format.
 * @param value the Uint8Aray to encode
 */
function encodeByteArray(value) {
    var str = "";
    for (var i = 0; i < value.length; i++) {
        str += String.fromCharCode(value[i]);
    }
    return btoa(str);
}
/**
 * Decodes a base64 string into a byte array.
 * @param value the base64 string to decode
 */
function decodeString(value) {
    var byteString = atob(value);
    var arr = new Uint8Array(byteString.length);
    for (var i = 0; i < byteString.length; i++) {
        arr[i] = byteString.charCodeAt(i);
    }
    return arr;
}
//# sourceMappingURL=base64.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/util/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/util/constants.js ***!
  \****************************************************************/
/*! exports provided: Constants */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Constants", function() { return Constants; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var Constants = {
    /**
     * The core-http version
     * @const
     * @type {string}
     */
    coreHttpVersion: "1.1.4",
    /**
     * Specifies HTTP.
     *
     * @const
     * @type {string}
     */
    HTTP: "http:",
    /**
     * Specifies HTTPS.
     *
     * @const
     * @type {string}
     */
    HTTPS: "https:",
    /**
     * Specifies HTTP Proxy.
     *
     * @const
     * @type {string}
     */
    HTTP_PROXY: "HTTP_PROXY",
    /**
     * Specifies HTTPS Proxy.
     *
     * @const
     * @type {string}
     */
    HTTPS_PROXY: "HTTPS_PROXY",
    HttpConstants: {
        /**
         * Http Verbs
         *
         * @const
         * @enum {string}
         */
        HttpVerbs: {
            PUT: "PUT",
            GET: "GET",
            DELETE: "DELETE",
            POST: "POST",
            MERGE: "MERGE",
            HEAD: "HEAD",
            PATCH: "PATCH"
        },
        StatusCodes: {
            TooManyRequests: 429
        }
    },
    /**
     * Defines constants for use with HTTP headers.
     */
    HeaderConstants: {
        /**
         * The Authorization header.
         *
         * @const
         * @type {string}
         */
        AUTHORIZATION: "authorization",
        AUTHORIZATION_SCHEME: "Bearer",
        /**
         * The Retry-After response-header field can be used with a 503 (Service
         * Unavailable) or 349 (Too Many Requests) responses to indicate how long
         * the service is expected to be unavailable to the requesting client.
         *
         * @const
         * @type {string}
         */
        RETRY_AFTER: "Retry-After",
        /**
         * The UserAgent header.
         *
         * @const
         * @type {string}
         */
        USER_AGENT: "User-Agent"
    }
};
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/util/exponentialBackoffStrategy.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/util/exponentialBackoffStrategy.js ***!
  \*********************************************************************************/
/*! exports provided: DEFAULT_CLIENT_RETRY_COUNT, DEFAULT_CLIENT_RETRY_INTERVAL, DEFAULT_CLIENT_MAX_RETRY_INTERVAL, DEFAULT_CLIENT_MIN_RETRY_INTERVAL, isNumber, shouldRetry, updateRetryData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CLIENT_RETRY_COUNT", function() { return DEFAULT_CLIENT_RETRY_COUNT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CLIENT_RETRY_INTERVAL", function() { return DEFAULT_CLIENT_RETRY_INTERVAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CLIENT_MAX_RETRY_INTERVAL", function() { return DEFAULT_CLIENT_MAX_RETRY_INTERVAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CLIENT_MIN_RETRY_INTERVAL", function() { return DEFAULT_CLIENT_MIN_RETRY_INTERVAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shouldRetry", function() { return shouldRetry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateRetryData", function() { return updateRetryData; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var DEFAULT_CLIENT_RETRY_COUNT = 3;
// intervals are in ms
var DEFAULT_CLIENT_RETRY_INTERVAL = 1000 * 30;
var DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 90;
var DEFAULT_CLIENT_MIN_RETRY_INTERVAL = 1000 * 3;
function isNumber(n) {
    return typeof n === "number";
}
/**
 * @internal
 * Determines if the operation should be retried.
 *
 * @param {number} retryLimit Specifies the max number of retries.
 * @param {(response?: HttpOperationResponse, error?: RetryError) => boolean} predicate Initial chekck on whether to retry based on given responses or errors
 * @param {RetryData} retryData  The retry data.
 * @return {boolean} True if the operation qualifies for a retry; false otherwise.
 */
function shouldRetry(retryLimit, predicate, retryData, response, error) {
    if (!predicate(response, error)) {
        return false;
    }
    return retryData.retryCount < retryLimit;
}
/**
 * @internal
 * Updates the retry data for the next attempt.
 *
 * @param {RetryPolicyOptions} retryOptions specifies retry interval, and its lower bound and upper bound.
 * @param {RetryData} [retryData]  The retry data.
 * @param {RetryError} [err] The operation"s error, if any.
 */
function updateRetryData(retryOptions, retryData, err) {
    if (retryData === void 0) { retryData = { retryCount: 0, retryInterval: 0 }; }
    if (err) {
        if (retryData.error) {
            err.innerError = retryData.error;
        }
        retryData.error = err;
    }
    // Adjust retry count
    retryData.retryCount++;
    // Adjust retry interval
    var incrementDelta = Math.pow(2, retryData.retryCount - 1) - 1;
    var boundedRandDelta = retryOptions.retryInterval * 0.8 +
        Math.floor(Math.random() * (retryOptions.retryInterval * 0.4));
    incrementDelta *= boundedRandDelta;
    retryData.retryInterval = Math.min(retryOptions.minRetryInterval + incrementDelta, retryOptions.maxRetryInterval);
    return retryData;
}
//# sourceMappingURL=exponentialBackoffStrategy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/util/inspect.browser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/util/inspect.browser.js ***!
  \**********************************************************************/
/*! exports provided: custom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "custom", function() { return custom; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var custom = {};
//# sourceMappingURL=inspect.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/util/sanitizer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/util/sanitizer.js ***!
  \****************************************************************/
/*! exports provided: Sanitizer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sanitizer", function() { return Sanitizer; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../url */ "./node_modules/@azure/core-http/es/src/url.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.


var RedactedString = "REDACTED";
var defaultAllowedHeaderNames = [
    "x-ms-client-request-id",
    "x-ms-return-client-request-id",
    "x-ms-useragent",
    "x-ms-correlation-request-id",
    "x-ms-request-id",
    "client-request-id",
    "return-client-request-id",
    "traceparent",
    "Access-Control-Allow-Credentials",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Origin",
    "Access-Control-Expose-Headers",
    "Access-Control-Max-Age",
    "Access-Control-Request-Headers",
    "Access-Control-Request-Method",
    "Origin",
    "Accept",
    "Cache-Control",
    "Connection",
    "Content-Length",
    "Content-Type",
    "Date",
    "ETag",
    "Expires",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Unmodified-Since",
    "Last-Modified",
    "Pragma",
    "Request-Id",
    "Retry-After",
    "Server",
    "Transfer-Encoding",
    "User-Agent"
];
var defaultAllowedQueryParameters = ["api-version"];
var Sanitizer = /** @class */ (function () {
    function Sanitizer(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.allowedHeaderNames, allowedHeaderNames = _c === void 0 ? [] : _c, _d = _b.allowedQueryParameters, allowedQueryParameters = _d === void 0 ? [] : _d;
        allowedHeaderNames = Array.isArray(allowedHeaderNames)
            ? defaultAllowedHeaderNames.concat(allowedHeaderNames)
            : defaultAllowedHeaderNames;
        allowedQueryParameters = Array.isArray(allowedQueryParameters)
            ? defaultAllowedQueryParameters.concat(allowedQueryParameters)
            : defaultAllowedQueryParameters;
        this.allowedHeaderNames = new Set(allowedHeaderNames.map(function (n) { return n.toLowerCase(); }));
        this.allowedQueryParameters = new Set(allowedQueryParameters.map(function (p) { return p.toLowerCase(); }));
    }
    Sanitizer.prototype.sanitize = function (obj) {
        return JSON.stringify(obj, this.replacer.bind(this), 2);
    };
    Sanitizer.prototype.replacer = function (key, value) {
        // Ensure Errors include their interesting non-enumerable members
        if (value instanceof Error) {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, value), { name: value.name, message: value.message });
        }
        if (key === "_headersMap") {
            return this.sanitizeHeaders(key, value);
        }
        else if (key === "url") {
            return this.sanitizeUrl(value);
        }
        else if (key === "query") {
            return this.sanitizeQuery(value);
        }
        else if (key === "body") {
            // Don't log the request body
            return undefined;
        }
        else if (key === "response") {
            // Don't log response again
            return undefined;
        }
        else if (key === "operationSpec") {
            // When using sendOperationRequest, the request carries a massive
            // field with the autorest spec. No need to log it.
            return undefined;
        }
        return value;
    };
    Sanitizer.prototype.sanitizeHeaders = function (_, value) {
        return this.sanitizeObject(value, this.allowedHeaderNames, function (v, k) { return v[k].value; });
    };
    Sanitizer.prototype.sanitizeQuery = function (value) {
        return this.sanitizeObject(value, this.allowedQueryParameters, function (v, k) { return v[k]; });
    };
    Sanitizer.prototype.sanitizeObject = function (value, allowedKeys, accessor) {
        if (typeof value !== "object" || value === null) {
            return value;
        }
        var sanitized = {};
        for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
            var k = _a[_i];
            if (allowedKeys.has(k.toLowerCase())) {
                sanitized[k] = accessor(value, k);
            }
            else {
                sanitized[k] = RedactedString;
            }
        }
        return sanitized;
    };
    Sanitizer.prototype.sanitizeUrl = function (value) {
        if (typeof value !== "string" || value === null) {
            return value;
        }
        var urlBuilder = _url__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(value);
        var queryString = urlBuilder.getQuery();
        if (!queryString) {
            return value;
        }
        var query = _url__WEBPACK_IMPORTED_MODULE_1__["URLQuery"].parse(queryString);
        for (var _i = 0, _a = query.keys(); _i < _a.length; _i++) {
            var k = _a[_i];
            if (!this.allowedQueryParameters.has(k.toLowerCase())) {
                query.set(k, RedactedString);
            }
        }
        urlBuilder.setQuery(query.toString());
        return urlBuilder.toString();
    };
    return Sanitizer;
}());

//# sourceMappingURL=sanitizer.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/util/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/util/utils.js ***!
  \************************************************************/
/*! exports provided: isNode, urlIsHTTPS, encodeUri, stripResponse, stripRequest, isValidUuid, generateUuid, executePromisesSequentially, delay, promiseToCallback, promiseToServiceCallback, prepareXMLRootList, applyMixins, isDuration, replaceAll, isPrimitiveType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNode", function() { return isNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "urlIsHTTPS", function() { return urlIsHTTPS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeUri", function() { return encodeUri; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stripResponse", function() { return stripResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stripRequest", function() { return stripRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidUuid", function() { return isValidUuid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateUuid", function() { return generateUuid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "executePromisesSequentially", function() { return executePromisesSequentially; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "delay", function() { return delay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "promiseToCallback", function() { return promiseToCallback; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "promiseToServiceCallback", function() { return promiseToServiceCallback; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepareXMLRootList", function() { return prepareXMLRootList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMixins", function() { return applyMixins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDuration", function() { return isDuration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replaceAll", function() { return replaceAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPrimitiveType", function() { return isPrimitiveType; });
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/index.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./node_modules/@azure/core-http/es/src/util/constants.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.


var validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
/**
 * A constant that indicates whether the environment is node.js or browser based.
 */
var isNode = typeof process !== "undefined" &&
    !!process.version &&
    !!process.versions &&
    !!process.versions.node;
/**
 * Checks if a parsed URL is HTTPS
 *
 * @param {object} urlToCheck The url to check
 * @return {boolean} True if the URL is HTTPS; false otherwise.
 */
function urlIsHTTPS(urlToCheck) {
    return urlToCheck.protocol.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_1__["Constants"].HTTPS;
}
/**
 * Encodes an URI.
 *
 * @param {string} uri The URI to be encoded.
 * @return {string} The encoded URI.
 */
function encodeUri(uri) {
    return encodeURIComponent(uri)
        .replace(/!/g, "%21")
        .replace(/"/g, "%27")
        .replace(/\(/g, "%28")
        .replace(/\)/g, "%29")
        .replace(/\*/g, "%2A");
}
/**
 * Returns a stripped version of the Http Response which only contains body,
 * headers and the status.
 *
 * @param {HttpOperationResponse} response The Http Response
 *
 * @return {object} The stripped version of Http Response.
 */
function stripResponse(response) {
    var strippedResponse = {};
    strippedResponse.body = response.bodyAsText;
    strippedResponse.headers = response.headers;
    strippedResponse.status = response.status;
    return strippedResponse;
}
/**
 * Returns a stripped version of the Http Request that does not contain the
 * Authorization header.
 *
 * @param {WebResourceLike} request The Http Request object
 *
 * @return {WebResourceLike} The stripped version of Http Request.
 */
function stripRequest(request) {
    var strippedRequest = request.clone();
    if (strippedRequest.headers) {
        strippedRequest.headers.remove("authorization");
    }
    return strippedRequest;
}
/**
 * Validates the given uuid as a string
 *
 * @param {string} uuid The uuid as a string that needs to be validated
 *
 * @return {boolean} True if the uuid is valid; false otherwise.
 */
function isValidUuid(uuid) {
    return validUuidRegex.test(uuid);
}
/**
 * Generated UUID
 *
 * @return {string} RFC4122 v4 UUID.
 */
function generateUuid() {
    return Object(uuid__WEBPACK_IMPORTED_MODULE_0__["v4"])();
}
/**
 * Executes an array of promises sequentially. Inspiration of this method is here:
 * https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html. An awesome blog on promises!
 *
 * @param {Array} promiseFactories An array of promise factories(A function that return a promise)
 *
 * @param {any} [kickstart] Input to the first promise that is used to kickstart the promise chain.
 * If not provided then the promise chain starts with undefined.
 *
 * @return A chain of resolved or rejected promises
 */
function executePromisesSequentially(promiseFactories, kickstart) {
    var result = Promise.resolve(kickstart);
    promiseFactories.forEach(function (promiseFactory) {
        result = result.then(promiseFactory);
    });
    return result;
}
/**
 * A wrapper for setTimeout that resolves a promise after t milliseconds.
 * @param {number} t The number of milliseconds to be delayed.
 * @param {T} value The value to be resolved with after a timeout of t milliseconds.
 * @returns {Promise<T>} Resolved promise
 */
function delay(t, value) {
    return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });
}
/**
 * Converts a Promise to a callback.
 * @param {Promise<any>} promise The Promise to be converted to a callback
 * @returns {Function} A function that takes the callback (cb: Function): void
 * @deprecated generated code should instead depend on responseToBody
 */
function promiseToCallback(promise) {
    if (typeof promise.then !== "function") {
        throw new Error("The provided input is not a Promise.");
    }
    return function (cb) {
        promise
            .then(function (data) {
            // eslint-disable-next-line promise/no-callback-in-promise
            return cb(undefined, data);
        })
            .catch(function (err) {
            // eslint-disable-next-line promise/no-callback-in-promise
            cb(err);
        });
    };
}
/**
 * Converts a Promise to a service callback.
 * @param {Promise<HttpOperationResponse>} promise - The Promise of HttpOperationResponse to be converted to a service callback
 * @returns {Function} A function that takes the service callback (cb: ServiceCallback<T>): void
 */
function promiseToServiceCallback(promise) {
    if (typeof promise.then !== "function") {
        throw new Error("The provided input is not a Promise.");
    }
    return function (cb) {
        promise
            .then(function (data) {
            return process.nextTick(cb, undefined, data.parsedBody, data.request, data);
        })
            .catch(function (err) {
            process.nextTick(cb, err);
        });
    };
}
function prepareXMLRootList(obj, elementName) {
    var _a;
    if (!Array.isArray(obj)) {
        obj = [obj];
    }
    return _a = {}, _a[elementName] = obj, _a;
}
/**
 * Applies the properties on the prototype of sourceCtors to the prototype of targetCtor
 * @param {object} targetCtor The target object on which the properties need to be applied.
 * @param {Array<object>} sourceCtors An array of source objects from which the properties need to be taken.
 */
function applyMixins(targetCtor, sourceCtors) {
    sourceCtors.forEach(function (sourceCtors) {
        Object.getOwnPropertyNames(sourceCtors.prototype).forEach(function (name) {
            targetCtor.prototype[name] = sourceCtors.prototype[name];
        });
    });
}
var validateISODuration = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
/**
 * Indicates whether the given string is in ISO 8601 format.
 * @param {string} value The value to be validated for ISO 8601 duration format.
 * @return {boolean} `true` if valid, `false` otherwise.
 */
function isDuration(value) {
    return validateISODuration.test(value);
}
/**
 * Replace all of the instances of searchValue in value with the provided replaceValue.
 * @param {string | undefined} value The value to search and replace in.
 * @param {string} searchValue The value to search for in the value argument.
 * @param {string} replaceValue The value to replace searchValue with in the value argument.
 * @returns {string | undefined} The value where each instance of searchValue was replaced with replacedValue.
 */
function replaceAll(value, searchValue, replaceValue) {
    return !value || !searchValue ? value : value.split(searchValue).join(replaceValue || "");
}
/**
 * Determines whether the given entity is a basic/primitive type
 * (string, number, boolean, null, undefined).
 * @param {any} value Any entity
 * @return {boolean} - true is it is primitive type, false otherwise.
 */
function isPrimitiveType(value) {
    return (typeof value !== "object" && typeof value !== "function") || value === null;
}
//# sourceMappingURL=utils.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/util/xml.browser.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/util/xml.browser.js ***!
  \******************************************************************/
/*! exports provided: parseXML, stringifyXML */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseXML", function() { return parseXML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringifyXML", function() { return stringifyXML; });
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// tslint:disable-next-line:no-null-keyword
var doc = document.implementation.createDocument(null, null, null);
var parser = new DOMParser();
function parseXML(str, opts) {
    try {
        var dom = parser.parseFromString(str, "application/xml");
        throwIfError(dom);
        var obj = void 0;
        if (opts && opts.includeRoot) {
            obj = domToObject(dom);
        }
        else {
            obj = domToObject(dom.childNodes[0]);
        }
        return Promise.resolve(obj);
    }
    catch (err) {
        return Promise.reject(err);
    }
}
var errorNS = "";
try {
    errorNS = parser.parseFromString("INVALID", "text/xml").getElementsByTagName("parsererror")[0]
        .namespaceURI;
}
catch (ignored) {
    // Most browsers will return a document containing <parsererror>, but IE will throw.
}
function throwIfError(dom) {
    if (errorNS) {
        var parserErrors = dom.getElementsByTagNameNS(errorNS, "parsererror");
        if (parserErrors.length) {
            throw new Error(parserErrors.item(0).innerHTML);
        }
    }
}
function isElement(node) {
    return !!node.attributes;
}
/**
 * Get the Element-typed version of the provided Node if the provided node is an element with
 * attributes. If it isn't, then undefined is returned.
 */
function asElementWithAttributes(node) {
    return isElement(node) && node.hasAttributes() ? node : undefined;
}
function domToObject(node) {
    var result = {};
    var childNodeCount = node.childNodes.length;
    var firstChildNode = node.childNodes[0];
    var onlyChildTextValue = (firstChildNode &&
        childNodeCount === 1 &&
        firstChildNode.nodeType === Node.TEXT_NODE &&
        firstChildNode.nodeValue) ||
        undefined;
    var elementWithAttributes = asElementWithAttributes(node);
    if (elementWithAttributes) {
        result["$"] = {};
        for (var i = 0; i < elementWithAttributes.attributes.length; i++) {
            var attr = elementWithAttributes.attributes[i];
            result["$"][attr.nodeName] = attr.nodeValue;
        }
        if (onlyChildTextValue) {
            result["_"] = onlyChildTextValue;
        }
    }
    else if (childNodeCount === 0) {
        result = "";
    }
    else if (onlyChildTextValue) {
        result = onlyChildTextValue;
    }
    if (!onlyChildTextValue) {
        for (var i = 0; i < childNodeCount; i++) {
            var child = node.childNodes[i];
            // Ignore leading/trailing whitespace nodes
            if (child.nodeType !== Node.TEXT_NODE) {
                var childObject = domToObject(child);
                if (!result[child.nodeName]) {
                    result[child.nodeName] = childObject;
                }
                else if (Array.isArray(result[child.nodeName])) {
                    result[child.nodeName].push(childObject);
                }
                else {
                    result[child.nodeName] = [result[child.nodeName], childObject];
                }
            }
        }
    }
    return result;
}
var serializer = new XMLSerializer();
function stringifyXML(content, opts) {
    var rootName = (opts && opts.rootName) || "root";
    var dom = buildNode(content, rootName)[0];
    return ('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + serializer.serializeToString(dom));
}
function buildAttributes(attrs) {
    var result = [];
    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
        var key = _a[_i];
        var attr = doc.createAttribute(key);
        attr.value = attrs[key].toString();
        result.push(attr);
    }
    return result;
}
function buildNode(obj, elementName) {
    if (obj === undefined ||
        obj === null ||
        typeof obj === "string" ||
        typeof obj === "number" ||
        typeof obj === "boolean") {
        var elem = doc.createElement(elementName);
        elem.textContent = obj === undefined || obj === null ? "" : obj.toString();
        return [elem];
    }
    else if (Array.isArray(obj)) {
        var result = [];
        for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {
            var arrayElem = obj_1[_i];
            for (var _a = 0, _b = buildNode(arrayElem, elementName); _a < _b.length; _a++) {
                var child = _b[_a];
                result.push(child);
            }
        }
        return result;
    }
    else if (typeof obj === "object") {
        var elem = doc.createElement(elementName);
        for (var _c = 0, _d = Object.keys(obj); _c < _d.length; _c++) {
            var key = _d[_c];
            if (key === "$") {
                for (var _e = 0, _f = buildAttributes(obj[key]); _e < _f.length; _e++) {
                    var attr = _f[_e];
                    elem.attributes.setNamedItem(attr);
                }
            }
            else if (key === "_") {
                elem.textContent = obj[key].toString();
            }
            else {
                for (var _g = 0, _h = buildNode(obj[key], key); _g < _h.length; _g++) {
                    var child = _h[_g];
                    elem.appendChild(child);
                }
            }
        }
        return [elem];
    }
    else {
        throw new Error("Illegal value passed to buildObject: " + obj);
    }
}
//# sourceMappingURL=xml.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/webResource.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/webResource.js ***!
  \*************************************************************/
/*! exports provided: isWebResourceLike, WebResource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWebResourceLike", function() { return isWebResourceLike; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebResource", function() { return WebResource; });
/* harmony import */ var _httpHeaders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpHeaders */ "./node_modules/@azure/core-http/es/src/httpHeaders.js");
/* harmony import */ var _serializer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serializer */ "./node_modules/@azure/core-http/es/src/serializer.js");
/* harmony import */ var _util_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/utils */ "./node_modules/@azure/core-http/es/src/util/utils.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.



function isWebResourceLike(object) {
    if (typeof object !== "object") {
        return false;
    }
    if (typeof object.url === "string" &&
        typeof object.method === "string" &&
        typeof object.headers === "object" &&
        Object(_httpHeaders__WEBPACK_IMPORTED_MODULE_0__["isHttpHeadersLike"])(object.headers) &&
        typeof object.validateRequestProperties === "function" &&
        typeof object.prepare === "function" &&
        typeof object.clone === "function") {
        return true;
    }
    return false;
}
/**
 * Creates a new WebResource object.
 *
 * This class provides an abstraction over a REST call by being library / implementation agnostic and wrapping the necessary
 * properties to initiate a request.
 *
 * @constructor
 */
var WebResource = /** @class */ (function () {
    function WebResource(url, method, body, query, headers, streamResponseBody, withCredentials, abortSignal, timeout, onUploadProgress, onDownloadProgress, proxySettings, keepAlive, decompressResponse) {
        this.streamResponseBody = streamResponseBody;
        this.url = url || "";
        this.method = method || "GET";
        this.headers = Object(_httpHeaders__WEBPACK_IMPORTED_MODULE_0__["isHttpHeadersLike"])(headers) ? headers : new _httpHeaders__WEBPACK_IMPORTED_MODULE_0__["HttpHeaders"](headers);
        this.body = body;
        this.query = query;
        this.formData = undefined;
        this.withCredentials = withCredentials || false;
        this.abortSignal = abortSignal;
        this.timeout = timeout || 0;
        this.onUploadProgress = onUploadProgress;
        this.onDownloadProgress = onDownloadProgress;
        this.proxySettings = proxySettings;
        this.keepAlive = keepAlive;
        this.decompressResponse = decompressResponse;
        this.requestId = this.headers.get("x-ms-client-request-id") || Object(_util_utils__WEBPACK_IMPORTED_MODULE_2__["generateUuid"])();
    }
    /**
     * Validates that the required properties such as method, url, headers["Content-Type"],
     * headers["accept-language"] are defined. It will throw an error if one of the above
     * mentioned properties are not defined.
     */
    WebResource.prototype.validateRequestProperties = function () {
        if (!this.method) {
            throw new Error("WebResource.method is required.");
        }
        if (!this.url) {
            throw new Error("WebResource.url is required.");
        }
    };
    /**
     * Prepares the request.
     * @param {RequestPrepareOptions} options Options to provide for preparing the request.
     * @returns {WebResource} Returns the prepared WebResource (HTTP Request) object that needs to be given to the request pipeline.
     */
    WebResource.prototype.prepare = function (options) {
        if (!options) {
            throw new Error("options object is required");
        }
        if (options.method === undefined ||
            options.method === null ||
            typeof options.method.valueOf() !== "string") {
            throw new Error("options.method must be a string.");
        }
        if (options.url && options.pathTemplate) {
            throw new Error("options.url and options.pathTemplate are mutually exclusive. Please provide exactly one of them.");
        }
        if ((options.pathTemplate === undefined ||
            options.pathTemplate === null ||
            typeof options.pathTemplate.valueOf() !== "string") &&
            (options.url === undefined ||
                options.url === null ||
                typeof options.url.valueOf() !== "string")) {
            throw new Error("Please provide exactly one of options.pathTemplate or options.url.");
        }
        // set the url if it is provided.
        if (options.url) {
            if (typeof options.url !== "string") {
                throw new Error('options.url must be of type "string".');
            }
            this.url = options.url;
        }
        // set the method
        if (options.method) {
            var validMethods = ["GET", "PUT", "HEAD", "DELETE", "OPTIONS", "POST", "PATCH", "TRACE"];
            if (validMethods.indexOf(options.method.toUpperCase()) === -1) {
                throw new Error('The provided method "' +
                    options.method +
                    '" is invalid. Supported HTTP methods are: ' +
                    JSON.stringify(validMethods));
            }
        }
        this.method = options.method.toUpperCase();
        // construct the url if path template is provided
        if (options.pathTemplate) {
            var pathTemplate_1 = options.pathTemplate, pathParameters_1 = options.pathParameters;
            if (typeof pathTemplate_1 !== "string") {
                throw new Error('options.pathTemplate must be of type "string".');
            }
            if (!options.baseUrl) {
                options.baseUrl = "https://management.azure.com";
            }
            var baseUrl = options.baseUrl;
            var url_1 = baseUrl +
                (baseUrl.endsWith("/") ? "" : "/") +
                (pathTemplate_1.startsWith("/") ? pathTemplate_1.slice(1) : pathTemplate_1);
            var segments = url_1.match(/({[\w-]*\s*[\w-]*})/gi);
            if (segments && segments.length) {
                if (!pathParameters_1) {
                    throw new Error("pathTemplate: " + pathTemplate_1 + " has been provided. Hence, options.pathParameters must also be provided.");
                }
                segments.forEach(function (item) {
                    var pathParamName = item.slice(1, -1);
                    var pathParam = pathParameters_1[pathParamName];
                    if (pathParam === null ||
                        pathParam === undefined ||
                        !(typeof pathParam === "string" || typeof pathParam === "object")) {
                        var stringifiedPathParameters = JSON.stringify(pathParameters_1, undefined, 2);
                        throw new Error("pathTemplate: " + pathTemplate_1 + " contains the path parameter " + pathParamName +
                            (" however, it is not present in parameters: " + stringifiedPathParameters + ".") +
                            ("The value of the path parameter can either be a \"string\" of the form { " + pathParamName + ": \"some sample value\" } or ") +
                            ("it can be an \"object\" of the form { \"" + pathParamName + "\": { value: \"some sample value\", skipUrlEncoding: true } }."));
                    }
                    if (typeof pathParam.valueOf() === "string") {
                        url_1 = url_1.replace(item, encodeURIComponent(pathParam));
                    }
                    if (typeof pathParam.valueOf() === "object") {
                        if (!pathParam.value) {
                            throw new Error("options.pathParameters[" + pathParamName + "] is of type \"object\" but it does not contain a \"value\" property.");
                        }
                        if (pathParam.skipUrlEncoding) {
                            url_1 = url_1.replace(item, pathParam.value);
                        }
                        else {
                            url_1 = url_1.replace(item, encodeURIComponent(pathParam.value));
                        }
                    }
                });
            }
            this.url = url_1;
        }
        // append query parameters to the url if they are provided. They can be provided with pathTemplate or url option.
        if (options.queryParameters) {
            var queryParameters = options.queryParameters;
            if (typeof queryParameters !== "object") {
                throw new Error("options.queryParameters must be of type object. It should be a JSON object " +
                    "of \"query-parameter-name\" as the key and the \"query-parameter-value\" as the value. " +
                    "The \"query-parameter-value\" may be fo type \"string\" or an \"object\" of the form { value: \"query-parameter-value\", skipUrlEncoding: true }.");
            }
            // append question mark if it is not present in the url
            if (this.url && this.url.indexOf("?") === -1) {
                this.url += "?";
            }
            // construct queryString
            var queryParams = [];
            // We need to populate this.query as a dictionary if the request is being used for Sway's validateRequest().
            this.query = {};
            for (var queryParamName in queryParameters) {
                var queryParam = queryParameters[queryParamName];
                if (queryParam) {
                    if (typeof queryParam === "string") {
                        queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam));
                        this.query[queryParamName] = encodeURIComponent(queryParam);
                    }
                    else if (typeof queryParam === "object") {
                        if (!queryParam.value) {
                            throw new Error("options.queryParameters[" + queryParamName + "] is of type \"object\" but it does not contain a \"value\" property.");
                        }
                        if (queryParam.skipUrlEncoding) {
                            queryParams.push(queryParamName + "=" + queryParam.value);
                            this.query[queryParamName] = queryParam.value;
                        }
                        else {
                            queryParams.push(queryParamName + "=" + encodeURIComponent(queryParam.value));
                            this.query[queryParamName] = encodeURIComponent(queryParam.value);
                        }
                    }
                }
            } // end-of-for
            // append the queryString
            this.url += queryParams.join("&");
        }
        // add headers to the request if they are provided
        if (options.headers) {
            var headers = options.headers;
            for (var _i = 0, _a = Object.keys(options.headers); _i < _a.length; _i++) {
                var headerName = _a[_i];
                this.headers.set(headerName, headers[headerName]);
            }
        }
        // ensure accept-language is set correctly
        if (!this.headers.get("accept-language")) {
            this.headers.set("accept-language", "en-US");
        }
        // ensure the request-id is set correctly
        if (!this.headers.get("x-ms-client-request-id") && !options.disableClientRequestId) {
            this.headers.set("x-ms-client-request-id", this.requestId);
        }
        // default
        if (!this.headers.get("Content-Type")) {
            this.headers.set("Content-Type", "application/json; charset=utf-8");
        }
        // set the request body. request.js automatically sets the Content-Length request header, so we need not set it explicilty
        this.body = options.body;
        if (options.body !== undefined && options.body !== null) {
            // body as a stream special case. set the body as-is and check for some special request headers specific to sending a stream.
            if (options.bodyIsStream) {
                if (!this.headers.get("Transfer-Encoding")) {
                    this.headers.set("Transfer-Encoding", "chunked");
                }
                if (this.headers.get("Content-Type") !== "application/octet-stream") {
                    this.headers.set("Content-Type", "application/octet-stream");
                }
            }
            else {
                if (options.serializationMapper) {
                    this.body = new _serializer__WEBPACK_IMPORTED_MODULE_1__["Serializer"](options.mappers).serialize(options.serializationMapper, options.body, "requestBody");
                }
                if (!options.disableJsonStringifyOnBody) {
                    this.body = JSON.stringify(options.body);
                }
            }
        }
        if (options.spanOptions) {
            this.spanOptions = options.spanOptions;
        }
        this.abortSignal = options.abortSignal;
        this.onDownloadProgress = options.onDownloadProgress;
        this.onUploadProgress = options.onUploadProgress;
        return this;
    };
    /**
     * Clone this WebResource HTTP request object.
     * @returns {WebResource} The clone of this WebResource HTTP request object.
     */
    WebResource.prototype.clone = function () {
        var result = new WebResource(this.url, this.method, this.body, this.query, this.headers && this.headers.clone(), this.streamResponseBody, this.withCredentials, this.abortSignal, this.timeout, this.onUploadProgress, this.onDownloadProgress, this.proxySettings, this.keepAlive, this.decompressResponse);
        if (this.formData) {
            result.formData = this.formData;
        }
        if (this.operationSpec) {
            result.operationSpec = this.operationSpec;
        }
        if (this.shouldDeserialize) {
            result.shouldDeserialize = this.shouldDeserialize;
        }
        if (this.operationResponseGetter) {
            result.operationResponseGetter = this.operationResponseGetter;
        }
        return result;
    };
    return WebResource;
}());

//# sourceMappingURL=webResource.js.map

/***/ }),

/***/ "./node_modules/@azure/core-http/es/src/xhrHttpClient.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/core-http/es/src/xhrHttpClient.js ***!
  \***************************************************************/
/*! exports provided: XhrHttpClient, parseHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XhrHttpClient", function() { return XhrHttpClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseHeaders", function() { return parseHeaders; });
/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ "./node_modules/@azure/abort-controller/dist-esm/src/aborter.js");
/* harmony import */ var _httpHeaders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./httpHeaders */ "./node_modules/@azure/core-http/es/src/httpHeaders.js");
/* harmony import */ var _restError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./restError */ "./node_modules/@azure/core-http/es/src/restError.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.



/**
 * A HttpClient implementation that uses XMLHttpRequest to send HTTP requests.
 */
var XhrHttpClient = /** @class */ (function () {
    function XhrHttpClient() {
    }
    XhrHttpClient.prototype.sendRequest = function (request) {
        var xhr = new XMLHttpRequest();
        if (request.proxySettings) {
            throw new Error("HTTP proxy is not supported in browser environment");
        }
        var abortSignal = request.abortSignal;
        if (abortSignal) {
            if (abortSignal.aborted) {
                return Promise.reject(new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__["AbortError"]("The operation was aborted."));
            }
            var listener_1 = function () {
                xhr.abort();
            };
            abortSignal.addEventListener("abort", listener_1);
            xhr.addEventListener("readystatechange", function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    abortSignal.removeEventListener("abort", listener_1);
                }
            });
        }
        addProgressListener(xhr.upload, request.onUploadProgress);
        addProgressListener(xhr, request.onDownloadProgress);
        if (request.formData) {
            var formData = request.formData;
            var requestForm_1 = new FormData();
            var appendFormValue = function (key, value) {
                // eslint-disable-next-line no-prototype-builtins
                if (value && value.hasOwnProperty("value") && value.hasOwnProperty("options")) {
                    requestForm_1.append(key, value.value, value.options);
                }
                else {
                    requestForm_1.append(key, value);
                }
            };
            for (var _i = 0, _a = Object.keys(formData); _i < _a.length; _i++) {
                var formKey = _a[_i];
                var formValue = formData[formKey];
                if (Array.isArray(formValue)) {
                    for (var j = 0; j < formValue.length; j++) {
                        appendFormValue(formKey, formValue[j]);
                    }
                }
                else {
                    appendFormValue(formKey, formValue);
                }
            }
            request.body = requestForm_1;
            request.formData = undefined;
            var contentType = request.headers.get("Content-Type");
            if (contentType && contentType.indexOf("multipart/form-data") !== -1) {
                // browser will automatically apply a suitable content-type header
                request.headers.remove("Content-Type");
            }
        }
        xhr.open(request.method, request.url);
        xhr.timeout = request.timeout;
        xhr.withCredentials = request.withCredentials;
        for (var _b = 0, _c = request.headers.headersArray(); _b < _c.length; _b++) {
            var header = _c[_b];
            xhr.setRequestHeader(header.name, header.value);
        }
        xhr.responseType = request.streamResponseBody ? "blob" : "text";
        // tslint:disable-next-line:no-null-keyword
        xhr.send(request.body === undefined ? null : request.body);
        if (request.streamResponseBody) {
            return new Promise(function (resolve, reject) {
                xhr.addEventListener("readystatechange", function () {
                    // Resolve as soon as headers are loaded
                    if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {
                        var blobBody = new Promise(function (resolve, reject) {
                            xhr.addEventListener("load", function () {
                                resolve(xhr.response);
                            });
                            rejectOnTerminalEvent(request, xhr, reject);
                        });
                        resolve({
                            request: request,
                            status: xhr.status,
                            headers: parseHeaders(xhr),
                            blobBody: blobBody
                        });
                    }
                });
                rejectOnTerminalEvent(request, xhr, reject);
            });
        }
        else {
            return new Promise(function (resolve, reject) {
                xhr.addEventListener("load", function () {
                    return resolve({
                        request: request,
                        status: xhr.status,
                        headers: parseHeaders(xhr),
                        bodyAsText: xhr.responseText
                    });
                });
                rejectOnTerminalEvent(request, xhr, reject);
            });
        }
    };
    return XhrHttpClient;
}());

function addProgressListener(xhr, listener) {
    if (listener) {
        xhr.addEventListener("progress", function (rawEvent) {
            return listener({
                loadedBytes: rawEvent.loaded
            });
        });
    }
}
// exported locally for testing
function parseHeaders(xhr) {
    var responseHeaders = new _httpHeaders__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]();
    var headerLines = xhr
        .getAllResponseHeaders()
        .trim()
        .split(/[\r\n]+/);
    for (var _i = 0, headerLines_1 = headerLines; _i < headerLines_1.length; _i++) {
        var line = headerLines_1[_i];
        var index = line.indexOf(":");
        var headerName = line.slice(0, index);
        var headerValue = line.slice(index + 2);
        responseHeaders.set(headerName, headerValue);
    }
    return responseHeaders;
}
function rejectOnTerminalEvent(request, xhr, reject) {
    xhr.addEventListener("error", function () {
        return reject(new _restError__WEBPACK_IMPORTED_MODULE_2__["RestError"]("Failed to send request to " + request.url, _restError__WEBPACK_IMPORTED_MODULE_2__["RestError"].REQUEST_SEND_ERROR, undefined, request));
    });
    var abortError = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__["AbortError"]("The operation was aborted.");
    xhr.addEventListener("abort", function () { return reject(abortError); });
    xhr.addEventListener("timeout", function () { return reject(abortError); });
}
//# sourceMappingURL=xhrHttpClient.js.map

/***/ }),

/***/ "./node_modules/@azure/core-lro/dist-esm/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist-esm/src/index.js ***!
  \************************************************************/
/*! exports provided: PollerStoppedError, PollerCancelledError, Poller */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _poller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./poller */ "./node_modules/@azure/core-lro/dist-esm/src/poller.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PollerStoppedError", function() { return _poller__WEBPACK_IMPORTED_MODULE_0__["PollerStoppedError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PollerCancelledError", function() { return _poller__WEBPACK_IMPORTED_MODULE_0__["PollerCancelledError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Poller", function() { return _poller__WEBPACK_IMPORTED_MODULE_0__["Poller"]; });

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@azure/core-lro/dist-esm/src/poller.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist-esm/src/poller.js ***!
  \*************************************************************/
/*! exports provided: PollerStoppedError, PollerCancelledError, Poller */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PollerStoppedError", function() { return PollerStoppedError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PollerCancelledError", function() { return PollerCancelledError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Poller", function() { return Poller; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/@azure/core-lro/node_modules/tslib/tslib.es6.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * When a poller is manually stopped through the `stopPolling` method,
 * the poller will be rejected with an instance of the PollerStoppedError.
 */
var PollerStoppedError = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PollerStoppedError, _super);
    function PollerStoppedError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = "PollerStoppedError";
        Object.setPrototypeOf(_this, PollerStoppedError.prototype);
        return _this;
    }
    return PollerStoppedError;
}(Error));

/**
 * When a poller is cancelled through the `cancelOperation` method,
 * the poller will be rejected with an instance of the PollerCancelledError.
 */
var PollerCancelledError = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PollerCancelledError, _super);
    function PollerCancelledError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = "PollerCancelledError";
        Object.setPrototypeOf(_this, PollerCancelledError.prototype);
        return _this;
    }
    return PollerCancelledError;
}(Error));

/**
 * A class that represents the definition of a program that polls through consecutive requests
 * until it reaches a state of completion.
 *
 * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.
 * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.
 * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.
 *
 * ```ts
 * const poller = new MyPoller();
 *
 * // Polling just once:
 * await poller.poll();
 *
 * // We can try to cancel the request here, by calling:
 * //
 * //     await poller.cancelOperation();
 * //
 *
 * // Getting the final result:
 * const result = await poller.pollUntilDone();
 * ```
 *
 * The Poller is defined by two types, a type representing the state of the poller, which
 * must include a basic set of properties from `PollOperationState<TResult>`,
 * and a return type defined by `TResult`, which can be anything.
 *
 * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having
 * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.
 *
 * ```ts
 * class Client {
 *   public async makePoller: PollerLike<MyOperationState, MyResult> {
 *     const poller = new MyPoller({});
 *     // It might be preferred to return the poller after the first request is made,
 *     // so that some information can be obtained right away.
 *     await poller.poll();
 *     return poller;
 *   }
 * }
 *
 * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();
 * ```
 *
 * A poller can be created through its constructor, then it can be polled until it's completed.
 * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.
 * At any point in time, the intermediate forms of the result type can be requested without delay.
 * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.
 *
 * ```ts
 * const poller = myClient.makePoller();
 * const state: MyOperationState = poller.getOperationState();
 *
 * // The intermediate result can be obtained at any time.
 * const result: MyResult | undefined = poller.getResult();
 *
 * // The final result can only be obtained after the poller finishes.
 * const result: MyResult = await poller.pollUntilDone();
 * ```
 *
 */
var Poller = /** @class */ (function () {
    /**
     * A poller needs to be initialized by passing in at least the basic properties of the PollOperation<TState, TResult>.
     *
     * When writing an implementation of a Poller, this implementation needs to deal with the initialization
     * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's
     * operation has already been defined, at least its basic properties. The code below shows how to approach
     * the definition of the constructor of a new custom poller.
     *
     * ```ts
     * export class MyPoller extends Poller<MyOperationState, string> {
     *   constructor({
     *     // Anything you might need outside of the basics
     *   }) {
     *     let state: MyOperationState = {
     *       privateProperty: private,
     *       publicProperty: public,
     *     };
     *
     *     const operation = {
     *       state,
     *       update,
     *       cancel,
     *       toString
     *     }
     *
     *     // Sending the operation to the parent's constructor.
     *     super(operation);
     *
     *     // You can assign more local properties here.
     *   }
     * }
     * ```
     *
     * Inside of this constructor, a new promise is created. This will be used to
     * tell the user when the poller finishes (see `pollUntilDone()`). The promise's
     * resolve and reject methods are also used internally to control when to resolve
     * or reject anyone waiting for the poller to finish.
     *
     * The constructor of a custom implementation of a poller is where any serialized version of
     * a previous poller's operation should be deserialized into the operation sent to the
     * base constructor. For example:
     *
     * ```ts
     * export class MyPoller extends Poller<MyOperationState, string> {
     *   constructor(
     *     baseOperation: string | undefined
     *   ) {
     *     let state: MyOperationState = {};
     *     if (baseOperation) {
     *       state = {
     *         ...JSON.parse(baseOperation).state,
     *         ...state
     *       };
     *     }
     *     const operation = {
     *       state,
     *       // ...
     *     }
     *     super(operation);
     *   }
     * }
     * ```
     *
     * @param operation Must contain the basic properties of PollOperation<State, TResult>.
     */
    function Poller(operation) {
        var _this = this;
        this.stopped = true;
        this.pollProgressCallbacks = [];
        this.operation = operation;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
        // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.
        // The above warning would get thrown if `poller.poll` is called, it returns an error,
        // and pullUntilDone did not have a .catch or await try/catch on it's return value.
        this.promise.catch(function () { });
    }
    /**
     * @internal
     * @ignore
     * Starts a loop that will break only if the poller is done
     * or if the poller is stopped.
     */
    Poller.prototype.startPolling = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.stopped) {
                            this.stopped = false;
                        }
                        _a.label = 1;
                    case 1:
                        if (!(!this.isStopped() && !this.isDone())) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.poll()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.delay()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @internal
     * @ignore
     * pollOnce does one polling, by calling to the update method of the underlying
     * poll operation to make any relevant change effective.
     *
     * It only optionally receives an object with an abortSignal property, from @azure/abort-controller's AbortSignalLike.
     *
     * @param options Optional properties passed to the operation's update method.
     */
    Poller.prototype.pollOnce = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var state, _a, e_1;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        state = this.operation.state;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        if (!!this.isDone()) return [3 /*break*/, 3];
                        _a = this;
                        return [4 /*yield*/, this.operation.update({
                                abortSignal: options.abortSignal,
                                fireProgress: this.fireProgress.bind(this)
                            })];
                    case 2:
                        _a.operation = _b.sent();
                        if (this.isDone() && this.resolve) {
                            this.resolve(state.result);
                        }
                        _b.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        e_1 = _b.sent();
                        state.error = e_1;
                        if (this.reject) {
                            this.reject(e_1);
                        }
                        throw e_1;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @internal
     * @ignore
     * fireProgress calls the functions passed in via onProgress the method of the poller.
     *
     * It loops over all of the callbacks received from onProgress, and executes them, sending them
     * the current operation state.
     *
     * @param state The current operation state.
     */
    Poller.prototype.fireProgress = function (state) {
        for (var _i = 0, _a = this.pollProgressCallbacks; _i < _a.length; _i++) {
            var callback = _a[_i];
            callback(state);
        }
    };
    /**
     * @internal
     * @ignore
     * Invokes the underlying operation's cancel method, and rejects the
     * pollUntilDone promise.
     */
    Poller.prototype.cancelOnce = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.operation.cancel(options)];
                    case 1:
                        _a.operation = _b.sent();
                        if (this.reject) {
                            this.reject(new PollerCancelledError("Poller cancelled"));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a promise that will resolve once a single polling request finishes.
     * It does this by calling the update method of the Poller's operation.
     *
     * It only optionally receives an object with an abortSignal property, from @azure/abort-controller's AbortSignalLike.
     *
     * @param options Optional properties passed to the operation's update method.
     */
    Poller.prototype.poll = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (!this.pollOncePromise) {
            this.pollOncePromise = this.pollOnce(options);
            var clearPollOncePromise = function () {
                _this.pollOncePromise = undefined;
            };
            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise);
        }
        return this.pollOncePromise;
    };
    /**
     * Returns a promise that will resolve once the underlying operation is completed.
     */
    Poller.prototype.pollUntilDone = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                if (this.stopped) {
                    this.startPolling().catch(this.reject);
                }
                return [2 /*return*/, this.promise];
            });
        });
    };
    /**
     * Invokes the provided callback after each polling is completed,
     * sending the current state of the poller's operation.
     *
     * It returns a method that can be used to stop receiving updates on the given callback function.
     */
    Poller.prototype.onProgress = function (callback) {
        var _this = this;
        this.pollProgressCallbacks.push(callback);
        return function () {
            _this.pollProgressCallbacks = _this.pollProgressCallbacks.filter(function (c) { return c !== callback; });
        };
    };
    /**
     * Returns true if the poller has finished polling.
     */
    Poller.prototype.isDone = function () {
        var state = this.operation.state;
        return Boolean(state.isCompleted || state.isCancelled || state.error);
    };
    /**
     * Stops the poller from continuing to poll.
     */
    Poller.prototype.stopPolling = function () {
        if (!this.stopped) {
            this.stopped = true;
            if (this.reject) {
                this.reject(new PollerStoppedError("This poller is already stopped"));
            }
        }
    };
    /**
     * Returns true if the poller is stopped.
     */
    Poller.prototype.isStopped = function () {
        return this.stopped;
    };
    /**
     * Attempts to cancel the underlying operation.
     *
     * It only optionally receives an object with an abortSignal property, from @azure/abort-controller's AbortSignalLike.
     *
     * If it's called again before it finishes, it will throw an error.
     *
     * @param options Optional properties passed to the operation's update method.
     */
    Poller.prototype.cancelOperation = function (options) {
        if (options === void 0) { options = {}; }
        if (!this.stopped) {
            this.stopped = true;
        }
        if (!this.cancelPromise) {
            this.cancelPromise = this.cancelOnce(options);
        }
        else if (options.abortSignal) {
            throw new Error("A cancel request is currently pending");
        }
        return this.cancelPromise;
    };
    /**
     * Returns the state of the operation.
     *
     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,
     * implementations of the pollers can customize what's shared with the public by writing their own
     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller
     * and a public type representing a safe to share subset of the properties of the internal state.
     * Their definition of getOperationState can then return their public type.
     *
     * Example:
     *
     * ```ts
     * // Let's say we have our poller's operation state defined as:
     * interface MyOperationState extends PollOperationState<ResultType> {
     *   privateProperty?: string;
     *   publicProperty?: string;
     * }
     *
     * // To allow us to have a true separation of public and private state, we have to define another interface:
     * interface PublicState extends PollOperationState<ResultType> {
     *   publicProperty?: string;
     * }
     *
     * // Then, we define our Poller as follows:
     * export class MyPoller extends Poller<MyOperationState, ResultType> {
     *   // ... More content is needed here ...
     *
     *   public getOperationState(): PublicState {
     *     const state: PublicState = this.operation.state;
     *     return {
     *       // Properties from PollOperationState<TResult>
     *       isStarted: state.isStarted,
     *       isCompleted: state.isCompleted,
     *       isCancelled: state.isCancelled,
     *       error: state.error,
     *       result: state.result,
     *
     *       // The only other property needed by PublicState.
     *       publicProperty: state.publicProperty
     *     }
     *   }
     * }
     * ```
     *
     * You can see this in the tests of this repository, go to the file:
     * `../test/utils/testPoller.ts`
     * and look for the getOperationState implementation.
     */
    Poller.prototype.getOperationState = function () {
        return this.operation.state;
    };
    /**
     * Returns the result value of the operation,
     * regardless of the state of the poller.
     * It can return undefined or an incomplete form of the final TResult value
     * depending on the implementation.
     */
    Poller.prototype.getResult = function () {
        var state = this.operation.state;
        return state.result;
    };
    /**
     * Returns a serialized version of the poller's operation
     * by invoking the operation's toString method.
     */
    Poller.prototype.toString = function () {
        return this.operation.toString();
    };
    return Poller;
}());

//# sourceMappingURL=poller.js.map

/***/ }),

/***/ "./node_modules/@azure/core-lro/node_modules/tslib/tslib.es6.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-lro/node_modules/tslib/tslib.es6.js ***!
  \**********************************************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@azure/core-paging/dist-esm/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/core-paging/dist-esm/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! @azure/core-asynciterator-polyfill */ "./node_modules/@azure/core-asynciterator-polyfill/dist-esm/index.js");


/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/index.js ***!
  \****************************************************************/
/*! exports provided: getTracer, setTracer, NoOpSpan, NoOpTracer, OpenCensusSpanWrapper, OpenCensusTracerWrapper, TestTracer, TestSpan, extractSpanContextFromTraceParentHeader, getTraceParentHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _tracerProxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracerProxy */ "./node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getTracer", function() { return _tracerProxy__WEBPACK_IMPORTED_MODULE_0__["getTracer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "setTracer", function() { return _tracerProxy__WEBPACK_IMPORTED_MODULE_0__["setTracer"]; });

/* harmony import */ var _tracers_noop_noOpSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracers/noop/noOpSpan */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NoOpSpan", function() { return _tracers_noop_noOpSpan__WEBPACK_IMPORTED_MODULE_1__["NoOpSpan"]; });

/* harmony import */ var _tracers_noop_noOpTracer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tracers/noop/noOpTracer */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NoOpTracer", function() { return _tracers_noop_noOpTracer__WEBPACK_IMPORTED_MODULE_2__["NoOpTracer"]; });

/* harmony import */ var _tracers_opencensus_openCensusSpanWrapper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tracers/opencensus/openCensusSpanWrapper */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OpenCensusSpanWrapper", function() { return _tracers_opencensus_openCensusSpanWrapper__WEBPACK_IMPORTED_MODULE_3__["OpenCensusSpanWrapper"]; });

/* harmony import */ var _tracers_opencensus_openCensusTracerWrapper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tracers/opencensus/openCensusTracerWrapper */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTracerWrapper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OpenCensusTracerWrapper", function() { return _tracers_opencensus_openCensusTracerWrapper__WEBPACK_IMPORTED_MODULE_4__["OpenCensusTracerWrapper"]; });

/* harmony import */ var _tracers_test_testTracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tracers/test/testTracer */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testTracer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TestTracer", function() { return _tracers_test_testTracer__WEBPACK_IMPORTED_MODULE_5__["TestTracer"]; });

/* harmony import */ var _tracers_test_testSpan__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tracers/test/testSpan */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TestSpan", function() { return _tracers_test_testSpan__WEBPACK_IMPORTED_MODULE_6__["TestSpan"]; });

/* harmony import */ var _utils_traceParentHeader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/traceParentHeader */ "./node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extractSpanContextFromTraceParentHeader", function() { return _utils_traceParentHeader__WEBPACK_IMPORTED_MODULE_7__["extractSpanContextFromTraceParentHeader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getTraceParentHeader", function() { return _utils_traceParentHeader__WEBPACK_IMPORTED_MODULE_7__["getTraceParentHeader"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// Tracers and wrappers






// Utilities

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/tracerProxy.js ***!
  \**********************************************************************/
/*! exports provided: setTracer, getTracer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTracer", function() { return setTracer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTracer", function() { return getTracer; });
/* harmony import */ var _tracers_noop_noOpTracer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracers/noop/noOpTracer */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js");
/* harmony import */ var _utils_cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/cache */ "./node_modules/@azure/core-tracing/dist-esm/src/utils/cache.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


var defaultTracer;
function getDefaultTracer() {
    if (!defaultTracer) {
        defaultTracer = new _tracers_noop_noOpTracer__WEBPACK_IMPORTED_MODULE_0__["NoOpTracer"]();
    }
    return defaultTracer;
}
/**
 * Sets the global tracer, enabling tracing for the Azure SDK.
 * @param tracer An OpenTelemetry Tracer instance.
 */
function setTracer(tracer) {
    var cache = Object(_utils_cache__WEBPACK_IMPORTED_MODULE_1__["getCache"])();
    cache.tracer = tracer;
}
/**
 * Retrieves the active tracer, or returns a
 * no-op implementation if one is not set.
 */
function getTracer() {
    var cache = Object(_utils_cache__WEBPACK_IMPORTED_MODULE_1__["getCache"])();
    if (!cache.tracer) {
        return getDefaultTracer();
    }
    return cache.tracer;
}
//# sourceMappingURL=tracerProxy.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js ***!
  \********************************************************************************/
/*! exports provided: NoOpSpan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoOpSpan", function() { return NoOpSpan; });
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__);
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/**
 * A no-op implementation of Span that can safely be used without side-effects.
 */
var NoOpSpan = /** @class */ (function () {
    function NoOpSpan() {
    }
    /**
     * Returns the SpanContext associated with this Span.
     */
    NoOpSpan.prototype.context = function () {
        return {
            spanId: "",
            traceId: "",
            traceFlags: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__["TraceFlags"].NONE
        };
    };
    /**
     * Marks the end of Span execution.
     * @param _endTime The time to use as the Span's end time. Defaults to
     * the current time.
     */
    NoOpSpan.prototype.end = function (_endTime) {
        /* Noop */
    };
    /**
     * Sets an attribute on the Span
     * @param _key the attribute key
     * @param _value the attribute value
     */
    NoOpSpan.prototype.setAttribute = function (_key, _value) {
        return this;
    };
    /**
     * Sets attributes on the Span
     * @param _attributes the attributes to add
     */
    NoOpSpan.prototype.setAttributes = function (_attributes) {
        return this;
    };
    /**
     * Adds an event to the Span
     * @param _name The name of the event
     * @param _attributes The associated attributes to add for this event
     */
    NoOpSpan.prototype.addEvent = function (_name, _attributes) {
        return this;
    };
    /**
     * Sets a status on the span. Overrides the default of CanonicalCode.OK.
     * @param _status The status to set.
     */
    NoOpSpan.prototype.setStatus = function (_status) {
        return this;
    };
    /**
     * Updates the name of the Span
     * @param _name the new Span name
     */
    NoOpSpan.prototype.updateName = function (_name) {
        return this;
    };
    /**
     * Returns whether this span will be recorded
     */
    NoOpSpan.prototype.isRecording = function () {
        return false;
    };
    return NoOpSpan;
}());

//# sourceMappingURL=noOpSpan.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js ***!
  \**********************************************************************************/
/*! exports provided: NoOpTracer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoOpTracer", function() { return NoOpTracer; });
/* harmony import */ var _noOpSpan__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noOpSpan */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/**
 * A no-op implementation of Tracer that can be used when tracing
 * is disabled.
 */
var NoOpTracer = /** @class */ (function () {
    function NoOpTracer() {
    }
    /**
     * Starts a new Span.
     * @param _name The name of the span.
     * @param _options The SpanOptions used during Span creation.
     */
    NoOpTracer.prototype.startSpan = function (_name, _options) {
        return new _noOpSpan__WEBPACK_IMPORTED_MODULE_0__["NoOpSpan"]();
    };
    /**
     * Returns the current Span from the current context, if available.
     */
    NoOpTracer.prototype.getCurrentSpan = function () {
        return new _noOpSpan__WEBPACK_IMPORTED_MODULE_0__["NoOpSpan"]();
    };
    /**
     * Executes the given function within the context provided by a Span.
     * @param _span The span that provides the context.
     * @param fn The function to be executed.
     */
    NoOpTracer.prototype.withSpan = function (_span, fn) {
        return fn();
    };
    /**
     * Bind a Span as the target's scope
     * @param target An object to bind the scope.
     * @param _span A specific Span to use. Otherwise, use the current one.
     */
    NoOpTracer.prototype.bind = function (target, _span) {
        return target;
    };
    return NoOpTracer;
}());

//# sourceMappingURL=noOpTracer.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js ***!
  \***************************************************************************************************/
/*! exports provided: OpenCensusSpanWrapper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenCensusSpanWrapper", function() { return OpenCensusSpanWrapper; });
/* harmony import */ var _openCensusTraceStateWrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./openCensusTraceStateWrapper */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTraceStateWrapper.js");

function isWrappedSpan(span) {
    return !!span && span.getWrappedSpan !== undefined;
}
function isTracer(tracerOrSpan) {
    return tracerOrSpan.getWrappedTracer !== undefined;
}
/**
 * An implementation of OpenTelemetry Span that wraps an OpenCensus Span.
 */
var OpenCensusSpanWrapper = /** @class */ (function () {
    function OpenCensusSpanWrapper(tracerOrSpan, name, options) {
        if (name === void 0) { name = ""; }
        if (options === void 0) { options = {}; }
        if (isTracer(tracerOrSpan)) {
            var parent = isWrappedSpan(options.parent) ? options.parent.getWrappedSpan() : undefined;
            this._span = tracerOrSpan.getWrappedTracer().startChildSpan({
                name: name,
                childOf: parent
            });
            this._span.start();
            if (options.links) {
                for (var _i = 0, _a = options.links; _i < _a.length; _i++) {
                    var link = _a[_i];
                    // Since there is no way to set the link relationship, leave it as Unspecified.
                    this._span.addLink(link.context.traceId, link.context.spanId, 0 /* LinkType.UNSPECIFIED */, link.attributes);
                }
            }
        }
        else {
            this._span = tracerOrSpan;
        }
    }
    /**
     * The underlying OpenCensus Span
     */
    OpenCensusSpanWrapper.prototype.getWrappedSpan = function () {
        return this._span;
    };
    /**
     * Marks the end of Span execution.
     * @param endTime The time to use as the Span's end time. Defaults to
     * the current time.
     */
    OpenCensusSpanWrapper.prototype.end = function (_endTime) {
        this._span.end();
    };
    /**
     * Returns the SpanContext associated with this Span.
     */
    OpenCensusSpanWrapper.prototype.context = function () {
        var openCensusSpanContext = this._span.spanContext;
        return {
            spanId: openCensusSpanContext.spanId,
            traceId: openCensusSpanContext.traceId,
            traceFlags: openCensusSpanContext.options,
            traceState: new _openCensusTraceStateWrapper__WEBPACK_IMPORTED_MODULE_0__["OpenCensusTraceStateWrapper"](openCensusSpanContext.traceState)
        };
    };
    /**
     * Sets an attribute on the Span
     * @param key the attribute key
     * @param value the attribute value
     */
    OpenCensusSpanWrapper.prototype.setAttribute = function (key, value) {
        this._span.addAttribute(key, value);
        return this;
    };
    /**
     * Sets attributes on the Span
     * @param attributes the attributes to add
     */
    OpenCensusSpanWrapper.prototype.setAttributes = function (attributes) {
        this._span.attributes = attributes;
        return this;
    };
    /**
     * Adds an event to the Span
     * @param name The name of the event
     * @param attributes The associated attributes to add for this event
     */
    OpenCensusSpanWrapper.prototype.addEvent = function (_name, _attributes) {
        throw new Error("Method not implemented.");
    };
    /**
     * Sets a status on the span. Overrides the default of CanonicalCode.OK.
     * @param status The status to set.
     */
    OpenCensusSpanWrapper.prototype.setStatus = function (status) {
        this._span.setStatus(status.code, status.message);
        return this;
    };
    /**
     * Updates the name of the Span
     * @param name the new Span name
     */
    OpenCensusSpanWrapper.prototype.updateName = function (name) {
        this._span.name = name;
        return this;
    };
    /**
     * Returns whether this span will be recorded
     */
    OpenCensusSpanWrapper.prototype.isRecording = function () {
        // NoRecordSpans have an empty traceId
        return !!this._span.traceId;
    };
    return OpenCensusSpanWrapper;
}());

//# sourceMappingURL=openCensusSpanWrapper.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTraceStateWrapper.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTraceStateWrapper.js ***!
  \*********************************************************************************************************/
/*! exports provided: OpenCensusTraceStateWrapper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenCensusTraceStateWrapper", function() { return OpenCensusTraceStateWrapper; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
/**
 * @ignore
 * @internal
 */
var OpenCensusTraceStateWrapper = /** @class */ (function () {
    function OpenCensusTraceStateWrapper(state) {
        this._state = state;
    }
    OpenCensusTraceStateWrapper.prototype.get = function (_key) {
        throw new Error("Method not implemented.");
    };
    OpenCensusTraceStateWrapper.prototype.set = function (_key, _value) {
        throw new Error("Method not implemented.");
    };
    OpenCensusTraceStateWrapper.prototype.unset = function (_key) {
        throw new Error("Method not implemented");
    };
    OpenCensusTraceStateWrapper.prototype.serialize = function () {
        return this._state || "";
    };
    return OpenCensusTraceStateWrapper;
}());

//# sourceMappingURL=openCensusTraceStateWrapper.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTracerWrapper.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusTracerWrapper.js ***!
  \*****************************************************************************************************/
/*! exports provided: OpenCensusTracerWrapper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenCensusTracerWrapper", function() { return OpenCensusTracerWrapper; });
/* harmony import */ var _openCensusSpanWrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./openCensusSpanWrapper */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/opencensus/openCensusSpanWrapper.js");

/**
 * An implementation of OpenTelemetry Tracer that wraps an OpenCensus Tracer.
 */
var OpenCensusTracerWrapper = /** @class */ (function () {
    /**
     * Create a new wrapper around a given OpenCensus Tracer.
     * @param tracer The OpenCensus Tracer to wrap.
     */
    function OpenCensusTracerWrapper(tracer) {
        this._tracer = tracer;
    }
    /**
     * The wrapped OpenCensus Tracer
     */
    OpenCensusTracerWrapper.prototype.getWrappedTracer = function () {
        return this._tracer;
    };
    /**
     * Starts a new Span.
     * @param name The name of the span.
     * @param options The SpanOptions used during Span creation.
     */
    OpenCensusTracerWrapper.prototype.startSpan = function (name, options) {
        return new _openCensusSpanWrapper__WEBPACK_IMPORTED_MODULE_0__["OpenCensusSpanWrapper"](this, name, options);
    };
    /**
     * Returns the current Span from the current context, if available.
     */
    OpenCensusTracerWrapper.prototype.getCurrentSpan = function () {
        return undefined;
    };
    /**
     * Executes the given function within the context provided by a Span.
     * @param _span The span that provides the context.
     * @param _fn The function to be executed.
     */
    OpenCensusTracerWrapper.prototype.withSpan = function (_span, _fn) {
        throw new Error("Method not implemented.");
    };
    /**
     * Bind a Span as the target's scope
     * @param target An object to bind the scope.
     * @param _span A specific Span to use. Otherwise, use the current one.
     */
    OpenCensusTracerWrapper.prototype.bind = function (_target, _span) {
        throw new Error("Method not implemented.");
    };
    return OpenCensusTracerWrapper;
}());

//# sourceMappingURL=openCensusTracerWrapper.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js ***!
  \********************************************************************************/
/*! exports provided: TestSpan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestSpan", function() { return TestSpan; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/@azure/core-tracing/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _noop_noOpSpan__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../noop/noOpSpan */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpSpan.js");

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


/**
 * A mock span useful for testing.
 */
var TestSpan = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TestSpan, _super);
    /**
     * Starts a new Span.
     * @param parentTracer The tracer that created this Span
     * @param name The name of the span.
     * @param context The SpanContext this span belongs to
     * @param kind The SpanKind of this Span
     * @param parentSpanId The identifier of the parent Span
     * @param startTime The startTime of the event (defaults to now)
     */
    function TestSpan(parentTracer, name, context, kind, parentSpanId, startTime) {
        if (startTime === void 0) { startTime = Date.now(); }
        var _this = _super.call(this) || this;
        _this._tracer = parentTracer;
        _this.name = name;
        _this.kind = kind;
        _this.startTime = startTime;
        _this.parentSpanId = parentSpanId;
        _this.status = {
            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__["CanonicalCode"].OK
        };
        _this.endCalled = false;
        _this._context = context;
        _this.attributes = {};
        return _this;
    }
    /**
     * Returns the Tracer that created this Span
     */
    TestSpan.prototype.tracer = function () {
        return this._tracer;
    };
    /**
     * Returns the SpanContext associated with this Span.
     */
    TestSpan.prototype.context = function () {
        return this._context;
    };
    /**
     * Marks the end of Span execution.
     * @param _endTime The time to use as the Span's end time. Defaults to
     * the current time.
     */
    TestSpan.prototype.end = function (_endTime) {
        this.endCalled = true;
    };
    /**
     * Sets a status on the span. Overrides the default of CanonicalCode.OK.
     * @param status The status to set.
     */
    TestSpan.prototype.setStatus = function (status) {
        this.status = status;
        return this;
    };
    /**
     * Returns whether this span will be recorded
     */
    TestSpan.prototype.isRecording = function () {
        return true;
    };
    /**
     * Sets an attribute on the Span
     * @param key the attribute key
     * @param value the attribute value
     */
    TestSpan.prototype.setAttribute = function (key, value) {
        this.attributes[key] = value;
        return this;
    };
    /**
     * Sets attributes on the Span
     * @param attributes the attributes to add
     */
    TestSpan.prototype.setAttributes = function (attributes) {
        for (var _i = 0, _a = Object.keys(attributes); _i < _a.length; _i++) {
            var key = _a[_i];
            this.attributes[key] = attributes[key];
        }
        return this;
    };
    return TestSpan;
}(_noop_noOpSpan__WEBPACK_IMPORTED_MODULE_2__["NoOpSpan"]));

//# sourceMappingURL=testSpan.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testTracer.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testTracer.js ***!
  \**********************************************************************************/
/*! exports provided: TestTracer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestTracer", function() { return TestTracer; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/@azure/core-tracing/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _testSpan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./testSpan */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/test/testSpan.js");
/* harmony import */ var _noop_noOpTracer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../noop/noOpTracer */ "./node_modules/@azure/core-tracing/dist-esm/src/tracers/noop/noOpTracer.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__);

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.



/**
 * A mock tracer useful for testing
 */
var TestTracer = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TestTracer, _super);
    function TestTracer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.traceIdCounter = 0;
        _this.spanIdCounter = 0;
        _this.rootSpans = [];
        _this.knownSpans = [];
        return _this;
    }
    TestTracer.prototype.getNextTraceId = function () {
        this.traceIdCounter++;
        return String(this.traceIdCounter);
    };
    TestTracer.prototype.getNextSpanId = function () {
        this.spanIdCounter++;
        return String(this.spanIdCounter);
    };
    /**
     * Returns all Spans that were created without a parent
     */
    TestTracer.prototype.getRootSpans = function () {
        return this.rootSpans;
    };
    /**
     * Returns all Spans this Tracer knows about
     */
    TestTracer.prototype.getKnownSpans = function () {
        return this.knownSpans;
    };
    /**
     * Returns all Spans where end() has not been called
     */
    TestTracer.prototype.getActiveSpans = function () {
        return this.knownSpans.filter(function (span) {
            return !span.endCalled;
        });
    };
    /**
     * Return all Spans for a particular trace, grouped by their
     * parent Span in a tree-like structure
     * @param traceId The traceId to return the graph for
     */
    TestTracer.prototype.getSpanGraph = function (traceId) {
        var traceSpans = this.knownSpans.filter(function (span) {
            return span.context().traceId === traceId;
        });
        var roots = [];
        var nodeMap = new Map();
        for (var _i = 0, traceSpans_1 = traceSpans; _i < traceSpans_1.length; _i++) {
            var span = traceSpans_1[_i];
            var spanId = span.context().spanId;
            var node = {
                name: span.name,
                children: []
            };
            nodeMap.set(spanId, node);
            if (span.parentSpanId) {
                var parent = nodeMap.get(span.parentSpanId);
                if (!parent) {
                    throw new Error("Span with name " + node.name + " has an unknown parentSpan with id " + span.parentSpanId);
                }
                parent.children.push(node);
            }
            else {
                roots.push(node);
            }
        }
        return {
            roots: roots
        };
    };
    /**
     * Starts a new Span.
     * @param name The name of the span.
     * @param options The SpanOptions used during Span creation.
     */
    TestTracer.prototype.startSpan = function (name, options) {
        if (options === void 0) { options = {}; }
        var parentContext = this._getParentContext(options);
        var traceId;
        var isRootSpan = false;
        if (parentContext && parentContext.traceId) {
            traceId = parentContext.traceId;
        }
        else {
            traceId = this.getNextTraceId();
            isRootSpan = true;
        }
        var context = {
            traceId: traceId,
            spanId: this.getNextSpanId(),
            traceFlags: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["TraceFlags"].NONE
        };
        var span = new _testSpan__WEBPACK_IMPORTED_MODULE_1__["TestSpan"](this, name, context, options.kind || _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["SpanKind"].INTERNAL, parentContext ? parentContext.spanId : undefined, options.startTime);
        this.knownSpans.push(span);
        if (isRootSpan) {
            this.rootSpans.push(span);
        }
        return span;
    };
    TestTracer.prototype._getParentContext = function (options) {
        var parent = options.parent;
        var result;
        if (parent) {
            if ("traceId" in parent) {
                result = parent;
            }
            else {
                result = parent.context();
            }
        }
        return result;
    };
    return TestTracer;
}(_noop_noOpTracer__WEBPACK_IMPORTED_MODULE_2__["NoOpTracer"]));

//# sourceMappingURL=testTracer.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/utils/cache.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/utils/cache.js ***!
  \**********************************************************************/
/*! exports provided: getCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCache", function() { return getCache; });
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./global */ "./node_modules/@azure/core-tracing/dist-esm/src/utils/global.browser.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// V1 = OpenTelemetry 0.1
// V2 = OpenTelemetry 0.2
// V3 = OpenTelemetry 0.6.1
var GLOBAL_TRACER_VERSION = 3;
// preview5 shipped with @azure/core-tracing.tracerCache
// and didn't have smart detection for collisions
var GLOBAL_TRACER_SYMBOL = Symbol.for("@azure/core-tracing.tracerCache2");
var cache;
function loadTracerCache() {
    var globalObj = Object(_global__WEBPACK_IMPORTED_MODULE_0__["getGlobalObject"])();
    var existingCache = globalObj[GLOBAL_TRACER_SYMBOL];
    var setGlobalCache = true;
    if (existingCache) {
        if (existingCache.version === GLOBAL_TRACER_VERSION) {
            cache = existingCache;
        }
        else {
            setGlobalCache = false;
            if (existingCache.tracer) {
                throw new Error("Two incompatible versions of @azure/core-tracing have been loaded.\n          This library is " + GLOBAL_TRACER_VERSION + ", existing is " + existingCache.version + ".");
            }
        }
    }
    if (!cache) {
        cache = {
            tracer: undefined,
            version: GLOBAL_TRACER_VERSION
        };
    }
    if (setGlobalCache) {
        globalObj[GLOBAL_TRACER_SYMBOL] = cache;
    }
}
function getCache() {
    if (!cache) {
        loadTracerCache();
    }
    return cache;
}
//# sourceMappingURL=cache.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/utils/global.browser.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/utils/global.browser.js ***!
  \*******************************************************************************/
/*! exports provided: getGlobalObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGlobalObject", function() { return getGlobalObject; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
function getGlobalObject() {
    return self;
}
//# sourceMappingURL=global.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist-esm/src/utils/traceParentHeader.js ***!
  \**********************************************************************************/
/*! exports provided: extractSpanContextFromTraceParentHeader, getTraceParentHeader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractSpanContextFromTraceParentHeader", function() { return extractSpanContextFromTraceParentHeader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTraceParentHeader", function() { return getTraceParentHeader; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var VERSION = "00";
/**
 * Generates a `SpanContext` given a `traceparent` header value.
 * @param traceParent Serialized span context data as a `traceparent` header value.
 * @returns The `SpanContext` generated from the `traceparent` value.
 */
function extractSpanContextFromTraceParentHeader(traceParentHeader) {
    var parts = traceParentHeader.split("-");
    if (parts.length !== 4) {
        return;
    }
    var version = parts[0], traceId = parts[1], spanId = parts[2], traceOptions = parts[3];
    if (version !== VERSION) {
        return;
    }
    var traceFlags = parseInt(traceOptions, 16);
    var spanContext = {
        spanId: spanId,
        traceId: traceId,
        traceFlags: traceFlags
    };
    return spanContext;
}
/**
 * Generates a `traceparent` value given a span context.
 * @param spanContext Contains context for a specific span.
 * @returns The `spanContext` represented as a `traceparent` value.
 */
function getTraceParentHeader(spanContext) {
    var missingFields = [];
    if (!spanContext.traceId) {
        missingFields.push("traceId");
    }
    if (!spanContext.spanId) {
        missingFields.push("spanId");
    }
    if (missingFields.length) {
        return;
    }
    var flags = spanContext.traceFlags || 0 /* NONE */;
    var hexFlags = flags.toString(16);
    var traceFlags = hexFlags.length === 1 ? "0" + hexFlags : hexFlags;
    // https://www.w3.org/TR/trace-context/#traceparent-header-field-values
    return VERSION + "-" + spanContext.traceId + "-" + spanContext.spanId + "-" + traceFlags;
}
//# sourceMappingURL=traceParentHeader.js.map

/***/ }),

/***/ "./node_modules/@azure/core-tracing/node_modules/tslib/tslib.es6.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@azure/logger/dist-esm/src/debug.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/logger/dist-esm/src/debug.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/@azure/logger/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./log */ "./node_modules/@azure/logger/dist-esm/src/log.browser.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


var debugEnvVariable = (typeof process !== "undefined" && process.env && process.env.DEBUG) || undefined;
var enabledString;
var enabledNamespaces = [];
var skippedNamespaces = [];
var debuggers = [];
if (debugEnvVariable) {
    enable(debugEnvVariable);
}
function enable(namespaces) {
    var e_1, _a, e_2, _b;
    enabledString = namespaces;
    enabledNamespaces = [];
    skippedNamespaces = [];
    var wildcard = /\*/g;
    var namespaceList = namespaces.split(",").map(function (ns) { return ns.trim().replace(wildcard, ".*?"); });
    try {
        for (var namespaceList_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {
            var ns = namespaceList_1_1.value;
            if (ns.startsWith("-")) {
                skippedNamespaces.push(new RegExp("^" + ns.substr(1) + "$"));
            }
            else {
                enabledNamespaces.push(new RegExp("^" + ns + "$"));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var debuggers_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {
            var instance = debuggers_1_1.value;
            instance.enabled = enabled(instance.namespace);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
function enabled(namespace) {
    var e_3, _a, e_4, _b;
    if (namespace.endsWith("*")) {
        return true;
    }
    try {
        for (var skippedNamespaces_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {
            var skipped = skippedNamespaces_1_1.value;
            if (skipped.test(namespace)) {
                return false;
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    try {
        for (var enabledNamespaces_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {
            var enabled_1 = enabledNamespaces_1_1.value;
            if (enabled_1.test(namespace)) {
                return true;
            }
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return false;
}
function disable() {
    var result = enabledString || "";
    enable("");
    return result;
}
function createDebugger(namespace) {
    function debug() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!newDebugger.enabled) {
            return;
        }
        if (args.length > 0) {
            args[0] = namespace + " " + args[0];
        }
        newDebugger.log.apply(newDebugger, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(args));
    }
    var newDebugger = Object.assign(debug, {
        enabled: enabled(namespace),
        destroy: destroy,
        log: debugObj.log,
        namespace: namespace,
        extend: extend
    });
    debuggers.push(newDebugger);
    return newDebugger;
}
function destroy() {
    var index = debuggers.indexOf(this);
    if (index >= 0) {
        debuggers.splice(index, 1);
        return true;
    }
    return false;
}
function extend(namespace) {
    var newDebugger = createDebugger(this.namespace + ":" + namespace);
    newDebugger.log = this.log;
    return newDebugger;
}
var debugObj = Object.assign(function (namespace) {
    return createDebugger(namespace);
}, {
    enable: enable,
    enabled: enabled,
    disable: disable,
    log: _log__WEBPACK_IMPORTED_MODULE_1__["log"]
});
/* harmony default export */ __webpack_exports__["default"] = (debugObj);
//# sourceMappingURL=debug.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/@azure/logger/dist-esm/src/log.browser.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/logger/dist-esm/src/log.browser.js ***!
  \****************************************************************/
/*! exports provided: log */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/@azure/logger/node_modules/tslib/tslib.es6.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var logFunction = console.debug || console.log;
function log() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    logFunction.apply(void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(args));
}
//# sourceMappingURL=log.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/logger/dist-esm/src/logger.js":
/*!***********************************************************!*\
  !*** ./node_modules/@azure/logger/dist-esm/src/logger.js ***!
  \***********************************************************/
/*! exports provided: AzureLogger, setLogLevel, getLogLevel, createClientLogger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AzureLogger", function() { return AzureLogger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLogLevel", function() { return setLogLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLogLevel", function() { return getLogLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createClientLogger", function() { return createClientLogger; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/@azure/logger/node_modules/tslib/tslib.es6.js");
/* harmony import */ var _debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./debug */ "./node_modules/@azure/logger/dist-esm/src/debug.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


var registeredLoggers = new Set();
var logLevelFromEnv = (typeof process !== "undefined" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;
var azureLogLevel;
/**
 * The AzureLogger provides a mechanism for overriding where logs are output to.
 * By default, logs are sent to stderr.
 * Override the `log` method to redirect logs to another location.
 */
var AzureLogger = Object(_debug__WEBPACK_IMPORTED_MODULE_1__["default"])("azure");
AzureLogger.log = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    _debug__WEBPACK_IMPORTED_MODULE_1__["default"].log.apply(_debug__WEBPACK_IMPORTED_MODULE_1__["default"], Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(args));
};
var AZURE_LOG_LEVELS = ["verbose", "info", "warning", "error"];
if (logLevelFromEnv) {
    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash
    if (isAzureLogLevel(logLevelFromEnv)) {
        setLogLevel(logLevelFromEnv);
    }
    else {
        console.error("AZURE_LOG_LEVEL set to unknown log level '" + logLevelFromEnv + "'; logging is not enabled. Acceptable values: " + AZURE_LOG_LEVELS.join(", ") + ".");
    }
}
/**
 * Immediately enables logging at the specified log level.
 * @param level The log level to enable for logging.
 * Options from most verbose to least verbose are:
 * - verbose
 * - info
 * - warning
 * - error
 */
function setLogLevel(level) {
    var e_1, _a;
    if (level && !isAzureLogLevel(level)) {
        throw new Error("Unknown log level '" + level + "'. Acceptable values: " + AZURE_LOG_LEVELS.join(","));
    }
    azureLogLevel = level;
    var enabledNamespaces = [];
    try {
        for (var registeredLoggers_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(registeredLoggers), registeredLoggers_1_1 = registeredLoggers_1.next(); !registeredLoggers_1_1.done; registeredLoggers_1_1 = registeredLoggers_1.next()) {
            var logger = registeredLoggers_1_1.value;
            if (shouldEnable(logger)) {
                enabledNamespaces.push(logger.namespace);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (registeredLoggers_1_1 && !registeredLoggers_1_1.done && (_a = registeredLoggers_1.return)) _a.call(registeredLoggers_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    _debug__WEBPACK_IMPORTED_MODULE_1__["default"].enable(enabledNamespaces.join(","));
}
/**
 * Retrieves the currently specified log level.
 */
function getLogLevel() {
    return azureLogLevel;
}
var levelMap = {
    verbose: 400,
    info: 300,
    warning: 200,
    error: 100
};
/**
 * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.
 * @param namespace The name of the SDK package.
 * @ignore
 */
function createClientLogger(namespace) {
    var clientRootLogger = AzureLogger.extend(namespace);
    patchLogMethod(AzureLogger, clientRootLogger);
    return {
        error: createLogger(clientRootLogger, "error"),
        warning: createLogger(clientRootLogger, "warning"),
        info: createLogger(clientRootLogger, "info"),
        verbose: createLogger(clientRootLogger, "verbose")
    };
}
function patchLogMethod(parent, child) {
    child.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        parent.log.apply(parent, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"])(args));
    };
}
function createLogger(parent, level) {
    var logger = Object.assign(parent.extend(level), {
        level: level
    });
    patchLogMethod(parent, logger);
    if (shouldEnable(logger)) {
        var enabledNamespaces = _debug__WEBPACK_IMPORTED_MODULE_1__["default"].disable();
        _debug__WEBPACK_IMPORTED_MODULE_1__["default"].enable(enabledNamespaces + "," + logger.namespace);
    }
    registeredLoggers.add(logger);
    return logger;
}
function shouldEnable(logger) {
    if (azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]) {
        return true;
    }
    else {
        return false;
    }
}
function isAzureLogLevel(logLevel) {
    return AZURE_LOG_LEVELS.includes(logLevel);
}
//# sourceMappingURL=logger.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/@azure/logger/node_modules/tslib/tslib.es6.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/logger/node_modules/tslib/tslib.es6.js ***!
  \********************************************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//# sourceMappingURL=BatchResponse.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js ***!
  \*******************************************************************************************/
/*! exports provided: BatchResponseParser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BatchResponseParser", function() { return BatchResponseParser; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
/* harmony import */ var _BatchUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BatchUtils */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js");




var HTTP_HEADER_DELIMITER = ": ";
var SPACE_DELIMITER = " ";
var NOT_FOUND = -1;
/**
 * Util class for parsing batch response.
 */
var BatchResponseParser = /** @class */ (function () {
    function BatchResponseParser(batchResponse, subRequests) {
        if (!batchResponse || !batchResponse.contentType) {
            // In special case(reported), server may return invalid content-type which could not be parsed.
            throw new RangeError("batchResponse is malformed or doesn't contain valid content-type.");
        }
        if (!subRequests || subRequests.size === 0) {
            // This should be prevent during coding.
            throw new RangeError("Invalid state: subRequests is not provided or size is 0.");
        }
        this.batchResponse = batchResponse;
        this.subRequests = subRequests;
        this.responseBatchBoundary = this.batchResponse.contentType.split("=")[1];
        this.perResponsePrefix = "--" + this.responseBatchBoundary + _utils_constants__WEBPACK_IMPORTED_MODULE_2__["HTTP_LINE_ENDING"];
        this.batchResponseEnding = "--" + this.responseBatchBoundary + "--";
    }
    // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response
    BatchResponseParser.prototype.parseBatchResponse = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var responseBodyAsText, subResponses, subResponseCount, deserializedSubResponses, subResponsesSucceededCount, subResponsesFailedCount, index, subResponse, deserializedSubResponse, responseLines, subRespHeaderStartFound, subRespHeaderEndFound, subRespFailed, contentId, _i, responseLines_1, responseLine, tokens, tokens;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse
                        // sub request's response.
                        if (this.batchResponse._response.status != _utils_constants__WEBPACK_IMPORTED_MODULE_2__["HTTPURLConnection"].HTTP_ACCEPTED) {
                            throw new Error("Invalid state: batch request failed with status: '" + this.batchResponse._response.status + "'.");
                        }
                        return [4 /*yield*/, Object(_BatchUtils__WEBPACK_IMPORTED_MODULE_3__["getBodyAsText"])(this.batchResponse)];
                    case 1:
                        responseBodyAsText = _a.sent();
                        subResponses = responseBodyAsText
                            .split(this.batchResponseEnding)[0] // string after ending is useless
                            .split(this.perResponsePrefix)
                            .slice(1);
                        subResponseCount = subResponses.length;
                        // Defensive coding in case of potential error parsing.
                        // Note: subResponseCount == 1 is special case where sub request is invalid.
                        // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.
                        // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.
                        if (subResponseCount != this.subRequests.size && subResponseCount != 1) {
                            throw new Error("Invalid state: sub responses' count is not equal to sub requests' count.");
                        }
                        deserializedSubResponses = new Array(subResponseCount);
                        subResponsesSucceededCount = 0;
                        subResponsesFailedCount = 0;
                        // Parse sub subResponses.
                        for (index = 0; index < subResponseCount; index++) {
                            subResponse = subResponses[index];
                            deserializedSubResponses[index] = {};
                            deserializedSubResponse = deserializedSubResponses[index];
                            deserializedSubResponse.headers = new _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]();
                            responseLines = subResponse.split("" + _utils_constants__WEBPACK_IMPORTED_MODULE_2__["HTTP_LINE_ENDING"]);
                            subRespHeaderStartFound = false;
                            subRespHeaderEndFound = false;
                            subRespFailed = false;
                            contentId = NOT_FOUND;
                            for (_i = 0, responseLines_1 = responseLines; _i < responseLines_1.length; _i++) {
                                responseLine = responseLines_1[_i];
                                if (!subRespHeaderStartFound) {
                                    // Convention line to indicate content ID
                                    if (responseLine.startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_2__["HeaderConstants"].CONTENT_ID)) {
                                        contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);
                                    }
                                    // Http version line with status code indicates the start of sub request's response.
                                    // Example: HTTP/1.1 202 Accepted
                                    if (responseLine.startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_2__["HTTP_VERSION_1_1"])) {
                                        subRespHeaderStartFound = true;
                                        tokens = responseLine.split(SPACE_DELIMITER);
                                        deserializedSubResponse.status = parseInt(tokens[1]);
                                        deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);
                                    }
                                    continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *
                                }
                                if (responseLine.trim() === "") {
                                    // Sub response's header start line already found, and the first empty line indicates header end line found.
                                    if (!subRespHeaderEndFound) {
                                        subRespHeaderEndFound = true;
                                    }
                                    continue; // Skip empty line
                                }
                                // Note: when code reach here, it indicates subRespHeaderStartFound == true
                                if (!subRespHeaderEndFound) {
                                    if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {
                                        // Defensive coding to prevent from missing valuable lines.
                                        throw new Error("Invalid state: find non-empty line '" + responseLine + "' without HTTP header delimiter '" + HTTP_HEADER_DELIMITER + "'.");
                                    }
                                    tokens = responseLine.split(HTTP_HEADER_DELIMITER);
                                    deserializedSubResponse.headers.set(tokens[0], tokens[1]);
                                    if (tokens[0] === _utils_constants__WEBPACK_IMPORTED_MODULE_2__["HeaderConstants"].X_MS_ERROR_CODE) {
                                        deserializedSubResponse.errorCode = tokens[1];
                                        subRespFailed = true;
                                    }
                                }
                                else {
                                    // Assemble body of sub response.
                                    if (!deserializedSubResponse.bodyAsText) {
                                        deserializedSubResponse.bodyAsText = "";
                                    }
                                    deserializedSubResponse.bodyAsText += responseLine;
                                }
                            } // Inner for end
                            if (contentId != NOT_FOUND) {
                                deserializedSubResponse._request = this.subRequests.get(contentId);
                            }
                            if (subRespFailed) {
                                subResponsesFailedCount++;
                            }
                            else {
                                subResponsesSucceededCount++;
                            }
                        }
                        return [2 /*return*/, {
                                subResponses: deserializedSubResponses,
                                subResponsesSucceededCount: subResponsesSucceededCount,
                                subResponsesFailedCount: subResponsesFailedCount
                            }];
                }
            });
        });
    };
    return BatchResponseParser;
}());

//# sourceMappingURL=BatchResponseParser.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js ***!
  \******************************************************************************************/
/*! exports provided: getBodyAsText, utf8ByteLength */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBodyAsText", function() { return getBodyAsText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utf8ByteLength", function() { return utf8ByteLength; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _utils_utils_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils.browser */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js");


function getBodyAsText(batchResponse) {
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var blob;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, batchResponse.blobBody];
                case 1:
                    blob = (_a.sent());
                    return [4 /*yield*/, Object(_utils_utils_browser__WEBPACK_IMPORTED_MODULE_1__["blobToString"])(blob)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function utf8ByteLength(str) {
    return new Blob([str]).size;
}
//# sourceMappingURL=BatchUtils.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js ***!
  \*********************************************************************************/
/*! exports provided: BlobBatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobBatch", function() { return BlobBatch; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js");
/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Clients */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js");
/* harmony import */ var _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/Mutex */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js");
/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Pipeline */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js");
/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils.common */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js");
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js");
/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/tracing */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js");











/**
 * A BlobBatch represents an aggregated set of operations on blobs.
 * Currently, only `delete` and `setAccessTier` are supported.
 *
 * @export
 * @class BlobBatch
 */
var BlobBatch = /** @class */ (function () {
    function BlobBatch() {
        this.batch = "batch";
        this.batchRequest = new InnerBatchRequest();
    }
    /**
     * Get the value of Content-Type for a batch request.
     * The value must be multipart/mixed with a batch boundary.
     * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252
     */
    BlobBatch.prototype.getMultiPartContentType = function () {
        return this.batchRequest.getMultipartContentType();
    };
    /**
     * Get assembled HTTP request body for sub requests.
     */
    BlobBatch.prototype.getHttpRequestBody = function () {
        return this.batchRequest.getHttpRequestBody();
    };
    /**
     * Get sub requests that are added into the batch request.
     */
    BlobBatch.prototype.getSubRequests = function () {
        return this.batchRequest.getSubRequests();
    };
    BlobBatch.prototype.addSubRequestInternal = function (subRequest, assembleSubRequestFunc) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__["Mutex"].lock(this.batch)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, , 4, 6]);
                        this.batchRequest.preAddSubRequest(subRequest);
                        return [4 /*yield*/, assembleSubRequestFunc()];
                    case 3:
                        _a.sent();
                        this.batchRequest.postAddSubRequest(subRequest);
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__["Mutex"].unlock(this.batch)];
                    case 5:
                        _a.sent();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    BlobBatch.prototype.setBatchType = function (batchType) {
        if (!this.batchType) {
            this.batchType = batchType;
        }
        if (this.batchType !== batchType) {
            throw new RangeError("BlobBatch only supports one operation type per batch and it already is being used for " + this.batchType + " operations.");
        }
    };
    BlobBatch.prototype.deleteBlob = function (urlOrBlobClient, credentialOrOptions, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var url, credential, _a, span, spanOptions, e_1;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (typeof urlOrBlobClient === "string" &&
                            ((_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"] && credentialOrOptions instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_9__["StorageSharedKeyCredential"]) ||
                                credentialOrOptions instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_3__["AnonymousCredential"] ||
                                Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isTokenCredential"])(credentialOrOptions))) {
                            // First overload
                            url = urlOrBlobClient;
                            credential = credentialOrOptions;
                        }
                        else if (urlOrBlobClient instanceof _Clients__WEBPACK_IMPORTED_MODULE_4__["BlobClient"]) {
                            // Second overload
                            url = urlOrBlobClient.url;
                            credential = urlOrBlobClient.credential;
                            options = credentialOrOptions;
                        }
                        else {
                            throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
                        }
                        if (!options) {
                            options = {};
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BatchDeleteRequest-addSubRequest", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        this.setBatchType("delete");
                        return [4 /*yield*/, this.addSubRequestInternal({
                                url: url,
                                credential: credential
                            }, function () { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, new _Clients__WEBPACK_IMPORTED_MODULE_4__["BlobClient"](url, this.batchRequest.createPipeline(credential)).delete(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_1.message
                        });
                        throw e_1;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    BlobBatch.prototype.setBlobAccessTier = function (urlOrBlobClient, credentialOrTier, tierOrOptions, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var url, credential, tier, _a, span, spanOptions, e_2;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (typeof urlOrBlobClient === "string" &&
                            ((_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"] && credentialOrTier instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_9__["StorageSharedKeyCredential"]) ||
                                credentialOrTier instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_3__["AnonymousCredential"] ||
                                Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isTokenCredential"])(credentialOrTier))) {
                            // First overload
                            url = urlOrBlobClient;
                            credential = credentialOrTier;
                            tier = tierOrOptions;
                        }
                        else if (urlOrBlobClient instanceof _Clients__WEBPACK_IMPORTED_MODULE_4__["BlobClient"]) {
                            // Second overload
                            url = urlOrBlobClient.url;
                            credential = urlOrBlobClient.credential;
                            tier = credentialOrTier;
                            options = tierOrOptions;
                        }
                        else {
                            throw new RangeError("Invalid arguments. Either url and credential, or BlobClient need be provided.");
                        }
                        if (!options) {
                            options = {};
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BatchSetTierRequest-addSubRequest", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        this.setBatchType("setAccessTier");
                        return [4 /*yield*/, this.addSubRequestInternal({
                                url: url,
                                credential: credential
                            }, function () { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, new _Clients__WEBPACK_IMPORTED_MODULE_4__["BlobClient"](url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_2 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_2.message
                        });
                        throw e_2;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return BlobBatch;
}());

/**
 * Inner batch request class which is responsible for assembling and serializing sub requests.
 * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.
 */
var InnerBatchRequest = /** @class */ (function () {
    function InnerBatchRequest() {
        this.operationCount = 0;
        this.body = "";
        var tempGuid = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["generateUuid"])();
        // batch_{batchid}
        this.boundary = "batch_" + tempGuid;
        // --batch_{batchid}
        // Content-Type: application/http
        // Content-Transfer-Encoding: binary
        this.subRequestPrefix = "--" + this.boundary + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HTTP_LINE_ENDING"] + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HeaderConstants"].CONTENT_TYPE + ": application/http" + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HTTP_LINE_ENDING"] + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HeaderConstants"].CONTENT_TRANSFER_ENCODING + ": binary";
        // multipart/mixed; boundary=batch_{batchid}
        this.multipartContentType = "multipart/mixed; boundary=" + this.boundary;
        // --batch_{batchid}--
        this.batchRequestEnding = "--" + this.boundary + "--";
        this.subRequests = new Map();
    }
    /**
     * Create pipeline to assemble sub requests. The idea here is to use existing
     * credential and serialization/deserialization components, with additional policies to
     * filter unnecessary headers, assemble sub requests into request's body
     * and intercept request from going to wire.
     * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
     */
    InnerBatchRequest.prototype.createPipeline = function (credential) {
        var isAnonymousCreds = credential instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_3__["AnonymousCredential"];
        var policyFactoryLength = 3 + (isAnonymousCreds ? 0 : 1); // [deserializationPolicy, BatchHeaderFilterPolicyFactory, (Optional)Credential, BatchRequestAssemblePolicyFactory]
        var factories = new Array(policyFactoryLength);
        factories[0] = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["deserializationPolicy"])(); // Default deserializationPolicy is provided by protocol layer
        factories[1] = new BatchHeaderFilterPolicyFactory(); // Use batch header filter policy to exclude unnecessary headers
        if (!isAnonymousCreds) {
            factories[2] = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isTokenCredential"])(credential)
                ? Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["bearerTokenAuthenticationPolicy"])(credential, _utils_constants__WEBPACK_IMPORTED_MODULE_8__["StorageOAuthScopes"])
                : credential;
        }
        factories[policyFactoryLength - 1] = new BatchRequestAssemblePolicyFactory(this); // Use batch assemble policy to assemble request and intercept request from going to wire
        return new _Pipeline__WEBPACK_IMPORTED_MODULE_6__["Pipeline"](factories, {});
    };
    InnerBatchRequest.prototype.appendSubRequestToBody = function (request) {
        // Start to assemble sub request
        this.body += [
            this.subRequestPrefix,
            _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HeaderConstants"].CONTENT_ID + ": " + this.operationCount,
            "",
            request.method.toString() + " " + Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__["getURLPathAndQuery"])(request.url) + " " + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HTTP_VERSION_1_1"] + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HTTP_LINE_ENDING"] // sub request start line with method
        ].join(_utils_constants__WEBPACK_IMPORTED_MODULE_8__["HTTP_LINE_ENDING"]);
        for (var _i = 0, _a = request.headers.headersArray(); _i < _a.length; _i++) {
            var header = _a[_i];
            this.body += header.name + ": " + header.value + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HTTP_LINE_ENDING"];
        }
        this.body += _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HTTP_LINE_ENDING"]; // sub request's headers need be ending with an empty line
        // No body to assemble for current batch request support
        // End to assemble sub request
    };
    InnerBatchRequest.prototype.preAddSubRequest = function (subRequest) {
        if (this.operationCount >= _utils_constants__WEBPACK_IMPORTED_MODULE_8__["BATCH_MAX_REQUEST"]) {
            throw new RangeError("Cannot exceed " + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["BATCH_MAX_REQUEST"] + " sub requests in a single batch");
        }
        // Fast fail if url for sub request is invalid
        var path = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__["getURLPath"])(subRequest.url);
        if (!path || path == "") {
            throw new RangeError("Invalid url for sub request: '" + subRequest.url + "'");
        }
    };
    InnerBatchRequest.prototype.postAddSubRequest = function (subRequest) {
        this.subRequests.set(this.operationCount, subRequest);
        this.operationCount++;
    };
    // Return the http request body with assembling the ending line to the sub request body.
    InnerBatchRequest.prototype.getHttpRequestBody = function () {
        return "" + this.body + this.batchRequestEnding + _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HTTP_LINE_ENDING"];
    };
    InnerBatchRequest.prototype.getMultipartContentType = function () {
        return this.multipartContentType;
    };
    InnerBatchRequest.prototype.getSubRequests = function () {
        return this.subRequests;
    };
    return InnerBatchRequest;
}());
var BatchRequestAssemblePolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BatchRequestAssemblePolicy, _super);
    function BatchRequestAssemblePolicy(batchRequest, nextPolicy, options) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.dummyResponse = {
            request: new _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["WebResource"](),
            status: 200,
            headers: new _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]()
        };
        _this.batchRequest = batchRequest;
        return _this;
    }
    BatchRequestAssemblePolicy.prototype.sendRequest = function (request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.batchRequest.appendSubRequestToBody(request)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.dummyResponse]; // Intercept request from going to wire
                }
            });
        });
    };
    return BatchRequestAssemblePolicy;
}(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));
var BatchRequestAssemblePolicyFactory = /** @class */ (function () {
    function BatchRequestAssemblePolicyFactory(batchRequest) {
        this.batchRequest = batchRequest;
    }
    BatchRequestAssemblePolicyFactory.prototype.create = function (nextPolicy, options) {
        return new BatchRequestAssemblePolicy(this.batchRequest, nextPolicy, options);
    };
    return BatchRequestAssemblePolicyFactory;
}());
var BatchHeaderFilterPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BatchHeaderFilterPolicy, _super);
    function BatchHeaderFilterPolicy(nextPolicy, options) {
        return _super.call(this, nextPolicy, options) || this;
    }
    BatchHeaderFilterPolicy.prototype.sendRequest = function (request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var xMsHeaderName, _i, _a, header;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                xMsHeaderName = "";
                for (_i = 0, _a = request.headers.headersArray(); _i < _a.length; _i++) {
                    header = _a[_i];
                    if (Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__["iEqual"])(header.name, _utils_constants__WEBPACK_IMPORTED_MODULE_8__["HeaderConstants"].X_MS_VERSION)) {
                        xMsHeaderName = header.name;
                    }
                }
                if (xMsHeaderName !== "") {
                    request.headers.remove(xMsHeaderName); // The subrequests should not have the x-ms-version header.
                }
                return [2 /*return*/, this._nextPolicy.sendRequest(request)];
            });
        });
    };
    return BatchHeaderFilterPolicy;
}(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));
var BatchHeaderFilterPolicyFactory = /** @class */ (function () {
    function BatchHeaderFilterPolicyFactory() {
    }
    BatchHeaderFilterPolicyFactory.prototype.create = function (nextPolicy, options) {
        return new BatchHeaderFilterPolicy(nextPolicy, options);
    };
    return BatchHeaderFilterPolicyFactory;
}());
//# sourceMappingURL=BlobBatch.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js ***!
  \***************************************************************************************/
/*! exports provided: BlobBatchClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobBatchClient", function() { return BlobBatchClient; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _BatchResponseParser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BatchResponseParser */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js");
/* harmony import */ var _BatchUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BatchUtils */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js");
/* harmony import */ var _BlobBatch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BlobBatch */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/tracing */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js");
/* harmony import */ var _generated_src_operations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./generated/src/operations */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js");
/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js");
/* harmony import */ var _generated_src_storageClientContext__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./generated/src/storageClientContext */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js");
/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Pipeline */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.










/**
 * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
 */
var BlobBatchClient = /** @class */ (function () {
    function BlobBatchClient(url, credentialOrPipeline, options) {
        var pipeline;
        if (credentialOrPipeline instanceof _Pipeline__WEBPACK_IMPORTED_MODULE_9__["Pipeline"]) {
            pipeline = credentialOrPipeline;
        }
        else if (!credentialOrPipeline) {
            // no credential provided
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_9__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__["AnonymousCredential"](), options);
        }
        else {
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_9__["newPipeline"])(credentialOrPipeline, options);
        }
        var storageClientContext = new _generated_src_storageClientContext__WEBPACK_IMPORTED_MODULE_8__["StorageClientContext"](url, pipeline.toServiceClientOptions());
        this._serviceContext = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_6__["Service"](storageClientContext);
    }
    /**
     * Creates a {@link BlobBatch}.
     * A BlobBatch represents an aggregated set of operations on blobs.
     */
    BlobBatchClient.prototype.createBatch = function () {
        return new _BlobBatch__WEBPACK_IMPORTED_MODULE_3__["BlobBatch"]();
    };
    BlobBatchClient.prototype.deleteBlobs = function (urlsOrBlobClients, credentialOrOptions, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var batch, _i, urlsOrBlobClients_1, urlOrBlobClient;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        batch = new _BlobBatch__WEBPACK_IMPORTED_MODULE_3__["BlobBatch"]();
                        _i = 0, urlsOrBlobClients_1 = urlsOrBlobClients;
                        _a.label = 1;
                    case 1:
                        if (!(_i < urlsOrBlobClients_1.length)) return [3 /*break*/, 6];
                        urlOrBlobClient = urlsOrBlobClients_1[_i];
                        if (!(typeof urlOrBlobClient === "string")) return [3 /*break*/, 3];
                        return [4 /*yield*/, batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, batch.deleteBlob(urlOrBlobClient, credentialOrOptions)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, this.submitBatch(batch)];
                }
            });
        });
    };
    BlobBatchClient.prototype.setBlobsAccessTier = function (urlsOrBlobClients, credentialOrTier, tierOrOptions, options) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var batch, _i, urlsOrBlobClients_2, urlOrBlobClient;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        batch = new _BlobBatch__WEBPACK_IMPORTED_MODULE_3__["BlobBatch"]();
                        _i = 0, urlsOrBlobClients_2 = urlsOrBlobClients;
                        _a.label = 1;
                    case 1:
                        if (!(_i < urlsOrBlobClients_2.length)) return [3 /*break*/, 6];
                        urlOrBlobClient = urlsOrBlobClients_2[_i];
                        if (!(typeof urlOrBlobClient === "string")) return [3 /*break*/, 3];
                        return [4 /*yield*/, batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, this.submitBatch(batch)];
                }
            });
        });
    };
    /**
     * Submit batch request which consists of multiple subrequests.
     *
     * Get `blobBatchClient` and other details before running the snippets.
     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`
     *
     * Example usage:
     *
     * ```js
     * let batchRequest = new BlobBatch();
     * await batchRequest.deleteBlob(urlInString0, credential0);
     * await batchRequest.deleteBlob(urlInString1, credential1, {
     *  deleteSnapshots: "include"
     * });
     * const batchResp = await blobBatchClient.submitBatch(batchRequest);
     * console.log(batchResp.subResponsesSucceededCount);
     * ```
     *
     * Example using a lease:
     *
     * ```js
     * let batchRequest = new BlobBatch();
     * await batchRequest.setBlobAccessTier(blockBlobClient0, "Cool");
     * await batchRequest.setBlobAccessTier(blockBlobClient1, "Cool", {
     *  conditions: { leaseId: leaseId }
     * });
     * const batchResp = await blobBatchClient.submitBatch(batchRequest);
     * console.log(batchResp.subResponsesSucceededCount);
     * ```
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     *
     * @param {BlobBatch} batchRequest A set of Delete or SetTier operations.
     * @param {BlobBatchSubmitBatchOptionalParams} [options]
     * @returns {Promise<BlobBatchSubmitBatchResponse>}
     * @memberof BlobBatchClient
     */
    BlobBatchClient.prototype.submitBatch = function (batchRequest, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, batchRequestBody, rawBatchResponse, batchResponseParser, responseSummary, res, e_1;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!batchRequest || batchRequest.getSubRequests().size == 0) {
                            throw new RangeError("Batch request should contain one or more sub requests.");
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_5__["createSpan"])("BlobBatchClient-submitBatch", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, 5, 6]);
                        batchRequestBody = batchRequest.getHttpRequestBody();
                        return [4 /*yield*/, this._serviceContext.submitBatch(batchRequestBody, Object(_BatchUtils__WEBPACK_IMPORTED_MODULE_2__["utf8ByteLength"])(batchRequestBody), batchRequest.getMultiPartContentType(), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { spanOptions: spanOptions }))];
                    case 2:
                        rawBatchResponse = _b.sent();
                        batchResponseParser = new _BatchResponseParser__WEBPACK_IMPORTED_MODULE_1__["BatchResponseParser"](rawBatchResponse, batchRequest.getSubRequests());
                        return [4 /*yield*/, batchResponseParser.parseBatchResponse()];
                    case 3:
                        responseSummary = _b.sent();
                        res = {
                            _response: rawBatchResponse._response,
                            contentType: rawBatchResponse.contentType,
                            errorCode: rawBatchResponse.errorCode,
                            requestId: rawBatchResponse.requestId,
                            clientRequestId: rawBatchResponse.clientRequestId,
                            version: rawBatchResponse.version,
                            subResponses: responseSummary.subResponses,
                            subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,
                            subResponsesFailedCount: responseSummary.subResponsesFailedCount
                        };
                        return [2 /*return*/, res];
                    case 4:
                        e_1 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__["CanonicalCode"].UNKNOWN,
                            message: e_1.message
                        });
                        throw e_1;
                    case 5:
                        span.end();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return BlobBatchClient;
}());

//# sourceMappingURL=BlobBatchClient.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js ***!
  \****************************************************************************************************/
/*! exports provided: BlobDownloadResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobDownloadResponse", function() { return BlobDownloadResponse; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// This file is used as a shim of "BlobDownloadResponse" for some browser bundlers
// when trying to bundle "BlobDownloadResponse"
// "BlobDownloadResponse" class is only available in Node.js runtime
var BlobDownloadResponse = 1;
//# sourceMappingURL=BlobDownloadResponse.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js ***!
  \*************************************************************************************************/
/*! exports provided: BlobQueryResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobQueryResponse", function() { return BlobQueryResponse; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
/**
 * ONLY AVAILABLE IN BROWSER RUNTIME.
 *
 * BlobQueryResponse implements BlobDownloadResponseModel interface, and in browser runtime it will
 * parse avor data returned by blob query.
 *
 * @export
 * @class BlobQueryResponse
 * @implements {BlobDownloadResponseModel}
 */
var BlobQueryResponse = /** @class */ (function () {
    /**
     * Creates an instance of BlobQueryResponse.
     *
     * @param {BlobQueryResponseModel} originalResponse
     * @param {BlobQuickQueryStreamOptions} [options={}]
     * @memberof BlobQueryResponse
     */
    function BlobQueryResponse(originalResponse, _options) {
        if (_options === void 0) { _options = {}; }
        this.originalResponse = originalResponse;
    }
    Object.defineProperty(BlobQueryResponse.prototype, "acceptRanges", {
        /**
         * Indicates that the service supports
         * requests for partial file content.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.acceptRanges;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "cacheControl", {
        /**
         * Returns if it was previously specified
         * for the file.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.cacheControl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "contentDisposition", {
        /**
         * Returns the value that was specified
         * for the 'x-ms-content-disposition' header and specifies how to process the
         * response.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.contentDisposition;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "contentEncoding", {
        /**
         * Returns the value that was specified
         * for the Content-Encoding request header.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.contentEncoding;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "contentLanguage", {
        /**
         * Returns the value that was specified
         * for the Content-Language request header.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.contentLanguage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "blobSequenceNumber", {
        /**
         * The current sequence number for a
         * page blob. This header is not returned for block blobs or append blobs.
         *
         * @readonly
         * @type {(number | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.blobSequenceNumber;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "blobType", {
        /**
         * The blob's type. Possible values include:
         * 'BlockBlob', 'PageBlob', 'AppendBlob'.
         *
         * @readonly
         * @type {(BlobType | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.blobType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "contentLength", {
        /**
         * The number of bytes present in the
         * response body.
         *
         * @readonly
         * @type {(number | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.contentLength;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "contentMD5", {
        /**
         * If the file has an MD5 hash and the
         * request is to read the full file, this response header is returned so that
         * the client can check for message content integrity. If the request is to
         * read a specified range and the 'x-ms-range-get-content-md5' is set to
         * true, then the request returns an MD5 hash for the range, as long as the
         * range size is less than or equal to 4 MB. If neither of these sets of
         * conditions is true, then no value is returned for the 'Content-MD5'
         * header.
         *
         * @readonly
         * @type {(Uint8Array | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.contentMD5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "contentRange", {
        /**
         * Indicates the range of bytes returned if
         * the client requested a subset of the file by setting the Range request
         * header.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.contentRange;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "contentType", {
        /**
         * The content type specified for the file.
         * The default content type is 'application/octet-stream'
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.contentType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "copyCompletedOn", {
        /**
         * Conclusion time of the last attempted
         * Copy File operation where this file was the destination file. This value
         * can specify the time of a completed, aborted, or failed copy attempt.
         *
         * @readonly
         * @type {(Date | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "copyId", {
        /**
         * String identifier for the last attempted Copy
         * File operation where this file was the destination file.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.copyId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "copyProgress", {
        /**
         * Contains the number of bytes copied and
         * the total bytes in the source in the last attempted Copy File operation
         * where this file was the destination file. Can show between 0 and
         * Content-Length bytes copied.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.copyProgress;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "copySource", {
        /**
         * URL up to 2KB in length that specifies the
         * source file used in the last attempted Copy File operation where this file
         * was the destination file.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.copySource;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "copyStatus", {
        /**
         * State of the copy operation
         * identified by 'x-ms-copy-id'. Possible values include: 'pending',
         * 'success', 'aborted', 'failed'
         *
         * @readonly
         * @type {(CopyStatusType | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.copyStatus;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "copyStatusDescription", {
        /**
         * Only appears when
         * x-ms-copy-status is failed or pending. Describes cause of fatal or
         * non-fatal copy operation failure.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.copyStatusDescription;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "leaseDuration", {
        /**
         * When a blob is leased,
         * specifies whether the lease is of infinite or fixed duration. Possible
         * values include: 'infinite', 'fixed'.
         *
         * @readonly
         * @type {(LeaseDurationType | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.leaseDuration;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "leaseState", {
        /**
         * Lease state of the blob. Possible
         * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.
         *
         * @readonly
         * @type {(LeaseStateType | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.leaseState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "leaseStatus", {
        /**
         * The current lease status of the
         * blob. Possible values include: 'locked', 'unlocked'.
         *
         * @readonly
         * @type {(LeaseStatusType | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.leaseStatus;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "date", {
        /**
         * A UTC date/time value generated by the service that
         * indicates the time at which the response was initiated.
         *
         * @readonly
         * @type {(Date | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.date;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "blobCommittedBlockCount", {
        /**
         * The number of committed blocks
         * present in the blob. This header is returned only for append blobs.
         *
         * @readonly
         * @type {(number | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.blobCommittedBlockCount;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "etag", {
        /**
         * The ETag contains a value that you can use to
         * perform operations conditionally, in quotes.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.etag;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "errorCode", {
        /**
         * The error code.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.errorCode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "isServerEncrypted", {
        /**
         * The value of this header is set to
         * true if the file data and application metadata are completely encrypted
         * using the specified algorithm. Otherwise, the value is set to false (when
         * the file is unencrypted, or if only parts of the file/application metadata
         * are encrypted).
         *
         * @readonly
         * @type {(boolean | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.isServerEncrypted;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "blobContentMD5", {
        /**
         * If the blob has a MD5 hash, and if
         * request contains range header (Range or x-ms-range), this response header
         * is returned with the value of the whole blob's MD5 value. This value may
         * or may not be equal to the value returned in Content-MD5 header, with the
         * latter calculated from the requested range.
         *
         * @readonly
         * @type {(Uint8Array | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.blobContentMD5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "lastModified", {
        /**
         * Returns the date and time the file was last
         * modified. Any operation that modifies the file or its properties updates
         * the last modified time.
         *
         * @readonly
         * @type {(Date | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.lastModified;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "metadata", {
        /**
         * A name-value pair
         * to associate with a file storage object.
         *
         * @readonly
         * @type {(Metadata | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.metadata;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "requestId", {
        /**
         * This header uniquely identifies the request
         * that was made and can be used for troubleshooting the request.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.requestId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "clientRequestId", {
        /**
         * If a client request id header is sent in the request, this header will be present in the
         * response with the same value.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.clientRequestId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "version", {
        /**
         * Indicates the version of the File service used
         * to execute the request.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.version;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "encryptionKeySha256", {
        /**
         * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned
         * when the blob was encrypted with a customer-provided key.
         *
         * @readonly
         * @type {(string | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.encryptionKeySha256;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "contentCrc64", {
        /**
         * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to
         * true, then the request returns a crc64 for the range, as long as the range size is less than
         * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is
         * specified in the same request, it will fail with 400(Bad Request)
         *
         * @type {(Uint8Array | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse.contentCrc64;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "blobBody", {
        /**
         * The response body as a browser Blob.
         * Always undefined in node.js.
         *
         * @readonly
         * @type {(Promise<Blob> | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            throw Error("Quick query in browser is not supported yet.");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "readableStreamBody", {
        /**
         * The response body as a node.js Readable stream.
         * Always undefined in the browser.
         *
         * @readonly
         * @type {(NodeJS.ReadableStream | undefined)}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobQueryResponse.prototype, "_response", {
        /**
         * The HTTP response.
         *
         * @type {HttpResponse}
         * @memberof BlobQueryResponse
         */
        get: function () {
            return this.originalResponse._response;
        },
        enumerable: false,
        configurable: true
    });
    return BlobQueryResponse;
}());

//# sourceMappingURL=BlobQueryResponse.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js ***!
  \*****************************************************************************************/
/*! exports provided: BlobServiceClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobServiceClient", function() { return BlobServiceClient; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _generated_src_operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./generated/src/operations */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js");
/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Pipeline */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js");
/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Clients */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js");
/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/utils.common */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js");
/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js");
/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js");
/* harmony import */ var _azure_core_paging__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/core-paging */ "./node_modules/@azure/core-paging/dist-esm/index.js");
/* harmony import */ var _azure_core_paging__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_azure_core_paging__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/tracing */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js");
/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./BlobBatchClient */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js");
/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./StorageClient */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js");

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.













/**
 * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you
 * to manipulate blob containers.
 *
 * @export
 * @class BlobServiceClient
 */
var BlobServiceClient = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BlobServiceClient, _super);
    function BlobServiceClient(url, credentialOrPipeline, options) {
        var _this = this;
        var pipeline;
        if (credentialOrPipeline instanceof _Pipeline__WEBPACK_IMPORTED_MODULE_4__["Pipeline"]) {
            pipeline = credentialOrPipeline;
        }
        else if ((_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"] && credentialOrPipeline instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"]) ||
            credentialOrPipeline instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_8__["AnonymousCredential"] ||
            Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isTokenCredential"])(credentialOrPipeline)) {
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_4__["newPipeline"])(credentialOrPipeline, options);
        }
        else {
            // The second parameter is undefined. Use anonymous credential
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_4__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_8__["AnonymousCredential"](), options);
        }
        _this = _super.call(this, url, pipeline) || this;
        _this.serviceContext = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_3__["Service"](_this.storageClientContext);
        return _this;
    }
    /**
     *
     * Creates an instance of BlobServiceClient from connection string.
     *
     * @param {string} connectionString Account connection string or a SAS connection string of an Azure storage account.
     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]
     *                                  Account connection string example -
     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
     *                                  SAS connection string example -
     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
     * @param {StoragePipelineOptions} [options] Optional. Options to configure the HTTP pipeline.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.fromConnectionString = function (connectionString, options) {
        options = options || {};
        var extractedCreds = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_6__["extractConnectionStringParts"])(connectionString);
        if (extractedCreds.kind === "AccountConnString") {
            if (_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"]) {
                var sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"](extractedCreds.accountName, extractedCreds.accountKey);
                options.proxyOptions = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["getDefaultProxySettings"])(extractedCreds.proxyUri);
                var pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_4__["newPipeline"])(sharedKeyCredential, options);
                return new BlobServiceClient(extractedCreds.url, pipeline);
            }
            else {
                throw new Error("Account connection string is only supported in Node.js environment");
            }
        }
        else if (extractedCreds.kind === "SASConnString") {
            var pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_4__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_8__["AnonymousCredential"](), options);
            return new BlobServiceClient(extractedCreds.url + "?" + extractedCreds.accountSas, pipeline);
        }
        else {
            throw new Error("Connection string must be either an Account connection string or a SAS connection string");
        }
    };
    /**
     * Creates a {@link ContainerClient} object
     *
     * @param {string} containerName A container name
     * @returns {ContainerClient} A new ContainerClient object for the given container name.
     * @memberof BlobServiceClient
     *
     * Example usage:
     *
     * ```js
     * const containerClient = blobServiceClient.getContainerClient("<container name>");
     * ```
     */
    BlobServiceClient.prototype.getContainerClient = function (containerName) {
        return new _Clients__WEBPACK_IMPORTED_MODULE_5__["ContainerClient"](Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_6__["appendToURLPath"])(this.url, encodeURIComponent(containerName)), this.pipeline);
    };
    /**
     * Create a Blob container.
     *
     * @param {string} containerName Name of the container to create.
     * @param {ContainerCreateOptions} [options] Options to configure Container Create operation.
     * @returns {Promise<{ containerClient: ContainerClient; containerCreateResponse: ContainerCreateResponse }>} Container creation response and the corresponding container client.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.createContainer = function (containerName, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, containerClient, containerCreateResponse, e_1;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-createContainer", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        containerClient = this.getContainerClient(containerName);
                        return [4 /*yield*/, containerClient.create(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        containerCreateResponse = _b.sent();
                        return [2 /*return*/, {
                                containerClient: containerClient,
                                containerCreateResponse: containerCreateResponse
                            }];
                    case 3:
                        e_1 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_1.message
                        });
                        throw e_1;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes a Blob container.
     *
     * @param {string} containerName Name of the container to delete.
     * @param {ContainerDeleteMethodOptions} [options] Options to configure Container Delete operation.
     * @returns {Promise<ContainerDeleteResponse>} Container deletion response.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.deleteContainer = function (containerName, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, containerClient, e_2;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-deleteContainer", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        containerClient = this.getContainerClient(containerName);
                        return [4 /*yield*/, containerClient.delete(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_2 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_2.message
                        });
                        throw e_2;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the properties of a storage account’s Blob service, including properties
     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
     *
     * @param {ServiceGetPropertiesOptions} [options] Options to the Service Get Properties operation.
     * @returns {Promise<ServiceGetPropertiesResponse>} Response data for the Service Get Properties operation.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.getProperties = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_3;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-getProperties", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.serviceContext.getProperties({
                                abortSignal: options.abortSignal,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_3 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_3.message
                        });
                        throw e_3;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets properties for a storage account’s Blob service endpoint, including properties
     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties}
     *
     * @param {BlobServiceProperties} properties
     * @param {ServiceSetPropertiesOptions} [options] Options to the Service Set Properties operation.
     * @returns {Promise<ServiceSetPropertiesResponse>} Response data for the Service Set Properties operation.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.setProperties = function (properties, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_4;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-setProperties", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.serviceContext.setProperties(properties, {
                                abortSignal: options.abortSignal,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_4 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_4.message
                        });
                        throw e_4;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieves statistics related to replication for the Blob service. It is only
     * available on the secondary location endpoint when read-access geo-redundant
     * replication is enabled for the storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats}
     *
     * @param {ServiceGetStatisticsOptions} [options] Options to the Service Get Statistics operation.
     * @returns {Promise<ServiceGetStatisticsResponse>} Response data for the Service Get Statistics operation.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.getStatistics = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_5;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-getStatistics", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.serviceContext.getStatistics({
                                abortSignal: options.abortSignal,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_5 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_5.message
                        });
                        throw e_5;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The Get Account Information operation returns the sku name and account kind
     * for the specified account.
     * The Get Account Information operation is available on service versions beginning
     * with version 2018-03-28.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information
     *
     * @param {ServiceGetAccountInfoOptions} [options] Options to the Service Get Account Info operation.
     * @returns {Promise<ServiceGetAccountInfoResponse>} Response data for the Service Get Account Info operation.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.getAccountInfo = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_6;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-getAccountInfo", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.serviceContext.getAccountInfo({
                                abortSignal: options.abortSignal,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_6 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_6.message
                        });
                        throw e_6;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a list of the containers under the specified account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2
     *
     * @param {string} [marker] A string value that identifies the portion of
     *                        the list of containers to be returned with the next listing operation. The
     *                        operation returns the NextMarker value within the response body if the
     *                        listing operation did not return all containers remaining to be listed
     *                        with the current page. The NextMarker value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param {ServiceListContainersSegmentOptions} [options] Options to the Service List Container Segment operation.
     * @returns {Promise<ServiceListContainersSegmentResponse>} Response data for the Service List Container Segment operation.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.listContainersSegment = function (marker, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_7;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-listContainersSegment", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.serviceContext.listContainersSegment(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ abortSignal: options.abortSignal, marker: marker }, options), { include: typeof options.include === "string" ? [options.include] : options.include, spanOptions: spanOptions }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_7 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_7.message
                        });
                        throw e_7;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The Filter Blobs operation enables callers to list blobs across all containers whose tags
     * match a given search expression. Filter blobs searches across all containers within a
     * storage account but can be scoped within the expression to a single container.
     *
     * @private
     * @param {string} tagFilterSqlExpression The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                        The given expression must evaluate to true for a blob to be returned in the results.
     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param {string} [marker] A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the NextMarker value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The NextMarker value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param {ServiceFindBlobsByTagsSegmentOptions} [options={}] Options to find blobs by tags.
     * @returns {Promise<ServiceFindBlobsByTagsSegmentResponse>}
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.findBlobsByTagsSegment = function (tagFilterSqlExpression, marker, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_8;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-findBlobsByTagsSegment", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.serviceContext.filterBlobs({
                                abortSignal: options.abortSignal,
                                where: tagFilterSqlExpression,
                                marker: marker,
                                maxPageSize: options.maxPageSize,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_8 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_8.message
                        });
                        throw e_8;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.
     *
     * @private
     * @param {string} tagFilterSqlExpression  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param {string} [marker] A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the NextMarker value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The NextMarker value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param {ServiceFindBlobsByTagsSegmentOptions} [options={}] Options to find blobs by tags.
     * @returns {AsyncIterableIterator<ServiceFindBlobsByTagsSegmentResponse>}
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.findBlobsByTagsSegments = function (tagFilterSqlExpression, marker, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncGenerator"])(this, arguments, function findBlobsByTagsSegments_1() {
            var response;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!!marker || marker === undefined)) return [3 /*break*/, 6];
                        _a.label = 1;
                    case 1: return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options))];
                    case 2:
                        response = _a.sent();
                        response.blobs = response.blobs || [];
                        marker = response.continuationToken;
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(response)];
                    case 3: return [4 /*yield*/, _a.sent()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        if (marker) return [3 /*break*/, 1];
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an AsyncIterableIterator for blobs.
     *
     * @private
     * @param {string} tagFilterSqlExpression  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param {ServiceFindBlobsByTagsSegmentOptions} [options={}] Options to findBlobsByTagsItems.
     * @returns {AsyncIterableIterator<FilterBlobItem>}
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.findBlobsByTagsItems = function (tagFilterSqlExpression, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncGenerator"])(this, arguments, function findBlobsByTagsItems_1() {
            var marker, _a, _b, segment, e_9_1;
            var e_9, _c;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, 8, 13]);
                        _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncValues"])(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options));
                        _d.label = 1;
                    case 1: return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(_a.next())];
                    case 2:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                        segment = _b.value;
                        return [5 /*yield**/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncDelegator"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncValues"])(segment.blobs)))];
                    case 3: return [4 /*yield*/, tslib__WEBPACK_IMPORTED_MODULE_0__["__await"].apply(void 0, [_d.sent()])];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5: return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_9_1 = _d.sent();
                        e_9 = { error: e_9_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _d.trys.push([8, , 11, 12]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(_c.call(_a))];
                    case 9:
                        _d.sent();
                        _d.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_9) throw e_9.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an async iterable iterator to find all blobs with specified tag
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const blob of blobServiceClient.findBlobsByTags("tagkey='tagvalue'")) {
     *   console.log(`Blob ${i++}: ${container.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = blobServiceClient.findBlobsByTags("tagkey='tagvalue'");
     * let blobItem = await iter.next();
     * while (!blobItem.done) {
     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
     *   blobItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 20 })) {
     *   if (response.blobs) {
     *     for (const blob of response.blobs) {
     *       console.log(`Blob ${i++}: ${blob.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = blobServiceClient.findBlobsByTags("tagkey='tagvalue'").byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *     console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = blobServiceClient
     *   .findBlobsByTags("tagkey='tagvalue'")
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints blob names
     * if (response.blobs) {
     *   for (const blob of response.blobs) {
     *      console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     * ```
     *
     * @param {string} tagFilterSqlExpression  The where parameter enables the caller to query blobs whose tags match a given expression.
     *                                         The given expression must evaluate to true for a blob to be returned in the results.
     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.
     * @param {ServiceFindBlobByTagsOptions} [options={}] Options to find blobs by tags.
     * @returns {PagedAsyncIterableIterator<FilterBlobItem, ServiceFindBlobsByTagsSegmentResponse>}
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.findBlobsByTags = function (tagFilterSqlExpression, options) {
        var _a;
        var _this = this;
        if (options === void 0) { options = {}; }
        // AsyncIterableIterator to iterate over blobs
        var listSegmentOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options);
        var iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);
        return _a = {
                /**
                 * @member {Promise} [next] The next method, part of the iteration protocol
                 */
                next: function () {
                    return iter.next();
                }
            },
            /**
             * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol
             */
            _a[Symbol.asyncIterator] = function () {
                return this;
            },
            /**
             * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time
             */
            _a.byPage = function (settings) {
                if (settings === void 0) { settings = {}; }
                return _this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ maxPageSize: settings.maxPageSize }, listSegmentOptions));
            },
            _a;
    };
    /**
     * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses
     *
     * @private
     * @param {string} [marker] A string value that identifies the portion of
     *                        the list of containers to be returned with the next listing operation. The
     *                        operation returns the NextMarker value within the response body if the
     *                        listing operation did not return all containers remaining to be listed
     *                        with the current page. The NextMarker value can be used as the value for
     *                        the marker parameter in a subsequent call to request the next page of list
     *                        items. The marker value is opaque to the client.
     * @param {ServiceListContainersSegmentOptions} [options] Options to list containers operation.
     * @returns {AsyncIterableIterator<ServiceListContainersSegmentResponse>}
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.listSegments = function (marker, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncGenerator"])(this, arguments, function listSegments_1() {
            var listContainersSegmentResponse;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!!marker || marker === undefined)) return [3 /*break*/, 7];
                        _a.label = 1;
                    case 1: return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(this.listContainersSegment(marker, options))];
                    case 2:
                        listContainersSegmentResponse = _a.sent();
                        listContainersSegmentResponse.containerItems =
                            listContainersSegmentResponse.containerItems || [];
                        marker = listContainersSegmentResponse.continuationToken;
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(listContainersSegmentResponse)];
                    case 3: return [4 /*yield*/, tslib__WEBPACK_IMPORTED_MODULE_0__["__await"].apply(void 0, [_a.sent()])];
                    case 4: return [4 /*yield*/, _a.sent()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        if (marker) return [3 /*break*/, 1];
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an AsyncIterableIterator for Container Items
     *
     * @private
     * @param {ServiceListContainersSegmentOptions} [options] Options to list containers operation.
     * @returns {AsyncIterableIterator<ContainerItem>}
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.listItems = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncGenerator"])(this, arguments, function listItems_1() {
            var marker, _a, _b, segment, e_10_1;
            var e_10, _c;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, 8, 13]);
                        _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncValues"])(this.listSegments(marker, options));
                        _d.label = 1;
                    case 1: return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(_a.next())];
                    case 2:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                        segment = _b.value;
                        return [5 /*yield**/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncDelegator"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncValues"])(segment.containerItems)))];
                    case 3: return [4 /*yield*/, tslib__WEBPACK_IMPORTED_MODULE_0__["__await"].apply(void 0, [_d.sent()])];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5: return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_10_1 = _d.sent();
                        e_10 = { error: e_10_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _d.trys.push([8, , 11, 12]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(_c.call(_a))];
                    case 9:
                        _d.sent();
                        _d.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_10) throw e_10.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an async iterable iterator to list all the containers
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the containers in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * let i = 1;
     * for await (const container of blobServiceClient.listContainers()) {
     *   console.log(`Container ${i++}: ${container.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * const iter = blobServiceClient.listContainers();
     * let containerItem = await iter.next();
     * while (!containerItem.done) {
     *   console.log(`Container ${i++}: ${containerItem.value.name}`);
     *   containerItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {
     *   if (response.containerItems) {
     *     for (const container of response.containerItems) {
     *       console.log(`Container ${i++}: ${container.name}`);
     *     }
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 container names
     * if (response.containerItems) {
     *   for (const container of response.containerItems) {
     *     console.log(`Container ${i++}: ${container.name}`);
     *   }
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     * // Passing next marker as continuationToken
     * iterator = blobServiceClient
     *   .listContainers()
     *   .byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 container names
     * if (response.containerItems) {
     *   for (const container of response.containerItems) {
     *      console.log(`Container ${i++}: ${container.name}`);
     *   }
     * }
     * ```
     *
     * @param {ServiceListContainersOptions} [options={}] Options to list containers.
     * @returns {PagedAsyncIterableIterator<ContainerItem, ServiceListContainersSegmentResponse>} An asyncIterableIterator that supports paging.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.listContainers = function (options) {
        var _a;
        var _this = this;
        if (options === void 0) { options = {}; }
        if (options.prefix === "") {
            options.prefix = undefined;
        }
        // AsyncIterableIterator to iterate over containers
        var listSegmentOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), (options.includeMetadata ? { include: "metadata" } : {}));
        var iter = this.listItems(listSegmentOptions);
        return _a = {
                /**
                 * @member {Promise} [next] The next method, part of the iteration protocol
                 */
                next: function () {
                    return iter.next();
                }
            },
            /**
             * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol
             */
            _a[Symbol.asyncIterator] = function () {
                return this;
            },
            /**
             * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time
             */
            _a.byPage = function (settings) {
                if (settings === void 0) { settings = {}; }
                return _this.listSegments(settings.continuationToken, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ maxPageSize: settings.maxPageSize }, listSegmentOptions));
            },
            _a;
    };
    /**
     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).
     *
     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using
     * bearer token authentication.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key
     *
     * @param {Date} startsOn      The start time for the user delegation SAS. Must be within 7 days of the current time
     * @param {Date} expiresOn     The end time for the user delegation SAS. Must be within 7 days of the current time
     * @returns {Promise<ServiceGetUserDelegationKeyResponse>}
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.getUserDelegationKey = function (startsOn, expiresOn, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, response, userDelegationKey, res, e_11;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_10__["createSpan"])("BlobServiceClient-getUserDelegationKey", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.serviceContext.getUserDelegationKey({
                                startsOn: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_6__["truncatedISO8061Date"])(startsOn, false),
                                expiresOn: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_6__["truncatedISO8061Date"])(expiresOn, false)
                            }, {
                                abortSignal: options.abortSignal,
                                spanOptions: spanOptions
                            })];
                    case 2:
                        response = _b.sent();
                        userDelegationKey = {
                            signedObjectId: response.signedObjectId,
                            signedTenantId: response.signedTenantId,
                            signedStartsOn: new Date(response.signedStartsOn),
                            signedExpiresOn: new Date(response.signedExpiresOn),
                            signedService: response.signedService,
                            signedVersion: response.signedVersion,
                            value: response.value
                        };
                        res = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ _response: response._response, requestId: response.requestId, clientRequestId: response.clientRequestId, version: response.version, date: response.date, errorCode: response.errorCode }, userDelegationKey);
                        return [2 /*return*/, res];
                    case 3:
                        e_11 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["CanonicalCode"].UNKNOWN,
                            message: e_11.message
                        });
                        throw e_11;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Creates a BlobBatchClient object to conduct batch operations.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch
     *
     * @returns {BlobBatchClient} A new BlobBatchClient object for this service.
     * @memberof BlobServiceClient
     */
    BlobServiceClient.prototype.getBlobBatchClient = function () {
        return new _BlobBatchClient__WEBPACK_IMPORTED_MODULE_11__["BlobBatchClient"](this.url, this.pipeline);
    };
    return BlobServiceClient;
}(_StorageClient__WEBPACK_IMPORTED_MODULE_12__["StorageClient"]));

//# sourceMappingURL=BlobServiceClient.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js ***!
  \*******************************************************************************/
/*! exports provided: BlobClient, AppendBlobClient, BlockBlobClient, PageBlobClient, BlobLeaseClient, ContainerClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobClient", function() { return BlobClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppendBlobClient", function() { return AppendBlobClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockBlobClient", function() { return BlockBlobClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobClient", function() { return PageBlobClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobLeaseClient", function() { return BlobLeaseClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerClient", function() { return ContainerClient; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ 1);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _BlobDownloadResponse__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BlobDownloadResponse */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js");
/* harmony import */ var _BlobQueryResponse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BlobQueryResponse */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js");
/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js");
/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js");
/* harmony import */ var _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./generated/src/operations */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js");
/* harmony import */ var _generated_src_storageClient__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./generated/src/storageClient */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./models */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js");
/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Pipeline */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js");
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/utils.common */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js");
/* harmony import */ var _utils_utils_node__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/utils.node */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js");
/* harmony import */ var _utils_Batch__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/Batch */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js");
/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/tracing */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js");
/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./StorageClient */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js");
/* harmony import */ var _Range__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Range */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js");
/* harmony import */ var _utils_BufferScheduler__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./utils/BufferScheduler */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BufferScheduler.js");
/* harmony import */ var _PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./PageBlobRangeResponse */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js");
/* harmony import */ var _pollers_BlobStartCopyFromUrlPoller__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./pollers/BlobStartCopyFromUrlPoller */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.






















/**
 * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,
 * append blob, or page blob.
 *
 * @export
 * @class BlobClient
 */
var BlobClient = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BlobClient, _super);
    function BlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
        var _a;
        var _this = this;
        options = options || {};
        var pipeline;
        var url;
        if (credentialOrPipelineOrContainerName instanceof _Pipeline__WEBPACK_IMPORTED_MODULE_11__["Pipeline"]) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        }
        else if ((_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"] && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"]) ||
            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"] ||
            Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isTokenCredential"])(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            options = blobNameOrOptions;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(credentialOrPipelineOrContainerName, options);
        }
        else if (!credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            // The second parameter is undefined. Use anonymous credential.
            url = urlOrConnectionString;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
        }
        else if (credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName === "string" &&
            blobNameOrOptions &&
            typeof blobNameOrOptions === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            var containerName = credentialOrPipelineOrContainerName;
            var blobName = blobNameOrOptions;
            var extractedCreds = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["extractConnectionStringParts"])(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"]) {
                    var sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"](extractedCreds.accountName, extractedCreds.accountKey);
                    url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
                    options.proxyOptions = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["getDefaultProxySettings"])(extractedCreds.proxyUri);
                    pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(sharedKeyCredential, options);
                }
                else {
                    throw new Error("Account connection string is only supported in Node.js environment");
                }
            }
            else if (extractedCreds.kind === "SASConnString") {
                url =
                    Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +
                        "?" +
                        extractedCreds.accountSas;
                pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
            }
            else {
                throw new Error("Connection string must be either an Account connection string or a SAS connection string");
            }
        }
        else {
            throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }
        _this = _super.call(this, url, pipeline) || this;
        (_a = _this.getBlobAndContainerNamesFromUrl(), _this._name = _a.blobName, _this._containerName = _a.containerName);
        _this.blobContext = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__["Blob"](_this.storageClientContext);
        return _this;
    }
    Object.defineProperty(BlobClient.prototype, "name", {
        /**
         * The name of the blob.
         */
        get: function () {
            return this._name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobClient.prototype, "containerName", {
        /**
         * The name of the storage container the blob is associated with.
         */
        get: function () {
            return this._containerName;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a Client to the base blob.
     *
     * @param {string} snapshot The snapshot timestamp.
     * @returns {BlobClient} A new BlobClient object identical to the source but with the specified snapshot timestamp
     * @memberof BlobClient
     */
    BlobClient.prototype.withSnapshot = function (snapshot) {
        return new BlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["setURLParameter"])(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_12__["URLConstants"].Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    };
    /**
     * Creates a new BlobClient object pointing to a version of this blob.
     * Provide "" will remove the versionId and return a Client to the base blob.
     *
     * @param {string} versionId The versionId.
     * @returns {BlobClient} A new BlobClient object pointing to the version of this blob.
     * @memberof BlobClient
     */
    BlobClient.prototype.withVersion = function (versionId) {
        return new BlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["setURLParameter"])(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_12__["URLConstants"].Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);
    };
    /**
     * Creates a AppendBlobClient object.
     *
     * @returns {AppendBlobClient}
     * @memberof BlobClient
     */
    BlobClient.prototype.getAppendBlobClient = function () {
        return new AppendBlobClient(this.url, this.pipeline);
    };
    /**
     * Creates a BlockBlobClient object.
     *
     * @returns {BlockBlobClient}
     * @memberof BlobClient
     */
    BlobClient.prototype.getBlockBlobClient = function () {
        return new BlockBlobClient(this.url, this.pipeline);
    };
    /**
     * Creates a PageBlobClient object.
     *
     * @returns {PageBlobClient}
     * @memberof BlobClient
     */
    BlobClient.prototype.getPageBlobClient = function () {
        return new PageBlobClient(this.url, this.pipeline);
    };
    /**
     * Reads or downloads a blob from the system, including its metadata and properties.
     * You can also call Get Blob to read a snapshot.
     *
     * * In Node.js, data returns in a Readable stream readableStreamBody
     * * In browsers, data returns in a promise blobBody
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob
     *
     * @param {number} [offset] From which position of the blob to download, >= 0
     * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined
     * @param {BlobDownloadOptions} [options] Optional options to Blob Download operation.
     * @returns {Promise<BlobDownloadResponseModel>}
     * @memberof BlobClient
     *
     * Example usage (Node.js):
     *
     * ```js
     * // Download and convert a blob to a string
     * const downloadBlockBlobResponse = await blobClient.download();
     * const downloaded = await streamToString(downloadBlockBlobResponse.readableStreamBody);
     * console.log("Downloaded blob content:", downloaded);
     *
     * async function streamToString(readableStream) {
     *   return new Promise((resolve, reject) => {
     *     const chunks = [];
     *     readableStream.on("data", (data) => {
     *       chunks.push(data.toString());
     *     });
     *     readableStream.on("end", () => {
     *       resolve(chunks.join(""));
     *     });
     *     readableStream.on("error", reject);
     *   });
     * }
     * ```
     *
     * Example usage (browser):
     *
     * ```js
     * // Download and convert a blob to a string
     * const downloadBlockBlobResponse = await blobClient.download();
     * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);
     * console.log(
     *   "Downloaded blob content",
     *   downloaded
     * );
     *
     * async function blobToString(blob: Blob): Promise<string> {
     *   const fileReader = new FileReader();
     *   return new Promise<string>((resolve, reject) => {
     *     fileReader.onloadend = (ev: any) => {
     *       resolve(ev.target!.result);
     *     };
     *     fileReader.onerror = reject;
     *     fileReader.readAsText(blob);
     *   });
     * }
     * ```
     */
    BlobClient.prototype.download = function (offset, count, options) {
        if (offset === void 0) { offset = 0; }
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, res_1, e_1;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        options.conditions = options.conditions || {};
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-download", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.download({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                onDownloadProgress: _azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"] ? undefined : options.onProgress,
                                range: offset === 0 && !count ? undefined : Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: offset, count: count }),
                                rangeGetContentMD5: options.rangeGetContentMD5,
                                rangeGetContentCRC64: options.rangeGetContentCrc64,
                                snapshot: options.snapshot,
                                cpkInfo: options.customerProvidedKey,
                                spanOptions: spanOptions
                            })];
                    case 2:
                        res_1 = _b.sent();
                        // Return browser response immediately
                        if (!_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"]) {
                            return [2 /*return*/, res_1];
                        }
                        // We support retrying when download stream unexpected ends in Node.js runtime
                        // Following code shouldn't be bundled into browser build, however some
                        // bundlers may try to bundle following code and "FileReadResponse.ts".
                        // In this case, "FileDownloadResponse.browser.ts" will be used as a shim of "FileDownloadResponse.ts"
                        // The config is in package.json "browser" field
                        if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {
                            // TODO: Default value or make it a required parameter?
                            options.maxRetryRequests = _utils_constants__WEBPACK_IMPORTED_MODULE_12__["DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS"];
                        }
                        if (res_1.contentLength === undefined) {
                            throw new RangeError("File download response doesn't contain valid content length header");
                        }
                        if (!res_1.etag) {
                            throw new RangeError("File download response doesn't contain valid etag header");
                        }
                        return [2 /*return*/, new _BlobDownloadResponse__WEBPACK_IMPORTED_MODULE_4__["BlobDownloadResponse"](res_1, function (start) { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                                var updatedOptions;
                                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            updatedOptions = {
                                                leaseAccessConditions: options.conditions,
                                                modifiedAccessConditions: {
                                                    ifMatch: options.conditions.ifMatch || res_1.etag,
                                                    ifModifiedSince: options.conditions.ifModifiedSince,
                                                    ifNoneMatch: options.conditions.ifNoneMatch,
                                                    ifUnmodifiedSince: options.conditions.ifUnmodifiedSince
                                                },
                                                range: Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({
                                                    count: offset + res_1.contentLength - start,
                                                    offset: start
                                                }),
                                                rangeGetContentMD5: options.rangeGetContentMD5,
                                                rangeGetContentCRC64: options.rangeGetContentCrc64,
                                                snapshot: options.snapshot,
                                                cpkInfo: options.customerProvidedKey
                                            };
                                            return [4 /*yield*/, this.blobContext.download(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ abortSignal: options.abortSignal }, updatedOptions))];
                                        case 1: 
                                        // Debug purpose only
                                        // console.log(
                                        //   `Read from internal stream, range: ${
                                        //     updatedOptions.range
                                        //   }, options: ${JSON.stringify(updatedOptions)}`
                                        // );
                                        return [2 /*return*/, (_a.sent()).readableStreamBody];
                                    }
                                });
                            }); }, offset, res_1.contentLength, {
                                abortSignal: options.abortSignal,
                                maxRetryRequests: options.maxRetryRequests,
                                onProgress: options.onProgress
                            })];
                    case 3:
                        e_1 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_1.message
                        });
                        throw e_1;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns true if the Azure blob resource represented by this client exists; false otherwise.
     *
     * NOTE: use this function with care since an existing blob might be deleted by other clients or
     * applications. Vice versa new blobs might be added by other clients or applications after this
     * function completes.
     *
     * @param {BlobExistsOptions} [options] options to Exists operation.
     * @returns {Promise<boolean>}
     * @memberof BlobClient
     */
    BlobClient.prototype.exists = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_2;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-exists", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.getProperties({
                                abortSignal: options.abortSignal,
                                customerProvidedKey: options.customerProvidedKey,
                                conditions: options.conditions,
                                tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions })
                            })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 3:
                        e_2 = _b.sent();
                        if (e_2.statusCode === 404) {
                            span.setStatus({
                                code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].NOT_FOUND,
                                message: "Expected exception when checking blob existence"
                            });
                            return [2 /*return*/, false];
                        }
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_2.message
                        });
                        throw e_2;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns all user-defined metadata, standard HTTP properties, and system properties
     * for the blob. It does not return the content of the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
     *
     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
     * they originally contained uppercase characters. This differs from the metadata keys returned by
     * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which
     * will retain their original casing.
     *
     * @param {BlobGetPropertiesOptions} [options] Optional options to Get Properties operation.
     * @returns {Promise<BlobGetPropertiesResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.getProperties = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_3;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-getProperties", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        options.conditions = options.conditions || {};
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.blobContext.getProperties({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                cpkInfo: options.customerProvidedKey,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_3 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_3.message
                        });
                        throw e_3;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Marks the specified blob or snapshot for deletion. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param {BlobDeleteOptions} [options] Optional options to Blob Delete operation.
     * @returns {Promise<BlobDeleteResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.delete = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_4;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-delete", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.deleteMethod({
                                abortSignal: options.abortSignal,
                                deleteSnapshots: options.deleteSnapshots,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_4 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_4.message
                        });
                        throw e_4;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param {BlobDeleteOptions} [options] Optional options to Blob Delete operation.
     * @returns {Promise<BlobDeleteIfExistsResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.deleteIfExists = function (options) {
        var _a, _b;
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _c, span, spanOptions, res, e_5;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _c = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-deleteIfExists", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.delete(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        res = _d.sent();
                        return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: true }, res)];
                    case 3:
                        e_5 = _d.sent();
                        if (((_a = e_5.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobNotFound") {
                            span.setStatus({
                                code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].NOT_FOUND,
                                message: "Expected exception when deleting a blob or snapshot only if it exists."
                            });
                            return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: false }, (_b = e_5.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e_5.response })];
                        }
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_5.message
                        });
                        throw e_5;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Restores the contents and metadata of soft deleted blob and any associated
     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29
     * or later.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob
     *
     * @param {BlobUndeleteOptions} [options] Optional options to Blob Undelete operation.
     * @returns {Promise<BlobUndeleteResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.undelete = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_6;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-undelete", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.undelete({
                                abortSignal: options.abortSignal,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_6 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_6.message
                        });
                        throw e_6;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets system properties on the blob.
     *
     * If no value provided, or no value provided for the specified blob HTTP headers,
     * these blob HTTP headers without a value will be cleared.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
     *
     * @param {BlobHTTPHeaders} [blobHTTPHeaders] If no value provided, or no value provided for
     *                                                   the specified blob HTTP headers, these blob HTTP
     *                                                   headers without a value will be cleared.
     * @param {BlobSetHTTPHeadersOptions} [options] Optional options to Blob Set HTTP Headers operation.
     * @returns {Promise<BlobSetHTTPHeadersResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.setHTTPHeaders = function (blobHTTPHeaders, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_7;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-setHTTPHeaders", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.blobContext.setHTTPHeaders({
                                abortSignal: options.abortSignal,
                                blobHTTPHeaders: blobHTTPHeaders,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                cpkInfo: options.customerProvidedKey,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_7 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_7.message
                        });
                        throw e_7;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets user-defined metadata for the specified blob as one or more name-value pairs.
     *
     * If no option provided, or no metadata defined in the parameter, the blob
     * metadata will be removed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata
     *
     * @param {Metadata} [metadata] Replace existing metadata with this value.
     *                               If no value provided the existing metadata will be removed.
     * @param {BlobSetMetadataOptions} [options] Optional options to Set Metadata operation.
     * @returns {Promise<BlobSetMetadataResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.setMetadata = function (metadata, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_8;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-setMetadata", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.blobContext.setMetadata({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                metadata: metadata,
                                modifiedAccessConditions: options.conditions,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_8 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_8.message
                        });
                        throw e_8;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets tags on the underlying blob.
     * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.
     * Valid tag key and value characters include lower and upper case letters, digits (0-9),
     * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').
     *
     * @param {Tags} tags
     * @param {BlobSetTagsOptions} [options={}]
     * @returns {Promise<BlobSetTagsResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.setTags = function (tags, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_9;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-setTags", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.setTags({
                                abortSignal: options.abortSignal,
                                spanOptions: spanOptions,
                                tags: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toBlobTags"])(tags)
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_9 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_9.message
                        });
                        throw e_9;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the tags associated with the underlying blob.
     *
     * @param {BlobGetTagsOptions} [options={}]
     * @returns {Promise<BlobGetTagsResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.getTags = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, response, wrappedResponse, e_10;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-getTags", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.getTags({
                                abortSignal: options.abortSignal,
                                spanOptions: spanOptions
                            })];
                    case 2:
                        response = _b.sent();
                        wrappedResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, response), { tags: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toTags"])({ blobTagSet: response.blobTagSet }) || {} });
                        return [2 /*return*/, wrappedResponse];
                    case 3:
                        e_10 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_10.message
                        });
                        throw e_10;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get a {@link BlobLeaseClient} that manages leases on the blob.
     *
     * @param {string} [proposeLeaseId] Initial proposed lease Id.
     * @returns {BlobLeaseClient} A new BlobLeaseClient object for managing leases on the blob.
     * @memberof BlobClient
     */
    BlobClient.prototype.getBlobLeaseClient = function (proposeLeaseId) {
        return new BlobLeaseClient(this, proposeLeaseId);
    };
    /**
     * Creates a read-only snapshot of a blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob
     *
     * @param {BlobCreateSnapshotOptions} [options] Optional options to the Blob Create Snapshot operation.
     * @returns {Promise<BlobCreateSnapshotResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.createSnapshot = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_11;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-createSnapshot", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.blobContext.createSnapshot({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                metadata: options.metadata,
                                modifiedAccessConditions: options.conditions,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_11 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_11.message
                        });
                        throw e_11;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Asynchronously copies a blob to a destination within the storage account.
     * This method returns a long running operation poller that allows you to wait
     * indefinitely until the copy is completed.
     * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.
     * Note that the onProgress callback will not be invoked if the operation completes in the first
     * request, and attempting to cancel a completed copy will result in an error being thrown.
     *
     * In version 2012-02-12 and later, the source for a Copy Blob operation can be
     * a committed blob in any Azure storage account.
     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
     * an Azure file in any Azure storage account.
     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
     * operation to copy from another storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
     *
     * Example using automatic polling:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using manual polling:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * while (!poller.isDone()) {
     *    await poller.poll();
     * }
     * const result = copyPoller.getResult();
     * ```
     *
     * Example using progress updates:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url', {
     *   onProgress(state) {
     *     console.log(`Progress: ${state.copyProgress}`);
     *   }
     * });
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using a changing polling interval (default 15 seconds):
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url', {
     *   intervalInMs: 1000 // poll blob every 1 second for copy progress
     * });
     * const result = await copyPoller.pollUntilDone();
     * ```
     *
     * Example using copy cancellation:
     *
     * ```js
     * const copyPoller = await blobClient.beginCopyFromURL('url');
     * // cancel operation after starting it.
     * try {
     *   await copyPoller.cancelOperation();
     *   // calls to get the result now throw PollerCancelledError
     *   await copyPoller.getResult();
     * } catch (err) {
     *   if (err.name === 'PollerCancelledError') {
     *     console.log('The copy was cancelled.');
     *   }
     * }
     * ```
     *
     * @param {string} copySource url to the source Azure Blob/File.
     * @param {BlobBeginCopyFromURLOptions} [options] Optional options to the Blob Start Copy From URL operation.
     */
    BlobClient.prototype.beginCopyFromURL = function (copySource, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var client, poller;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = {
                            abortCopyFromURL: function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                return _this.abortCopyFromURL.apply(_this, args);
                            },
                            getProperties: function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                return _this.getProperties.apply(_this, args);
                            },
                            startCopyFromURL: function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                return _this.startCopyFromURL.apply(_this, args);
                            }
                        };
                        poller = new _pollers_BlobStartCopyFromUrlPoller__WEBPACK_IMPORTED_MODULE_21__["BlobBeginCopyFromUrlPoller"]({
                            blobClient: client,
                            copySource: copySource,
                            intervalInMs: options.intervalInMs,
                            onProgress: options.onProgress,
                            resumeFrom: options.resumeFrom,
                            startCopyFromURLOptions: options
                        });
                        // Trigger the startCopyFromURL call by calling poll.
                        // Any errors from this method should be surfaced to the user.
                        return [4 /*yield*/, poller.poll()];
                    case 1:
                        // Trigger the startCopyFromURL call by calling poll.
                        // Any errors from this method should be surfaced to the user.
                        _a.sent();
                        return [2 /*return*/, poller];
                }
            });
        });
    };
    /**
     * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero
     * length and full metadata. Version 2012-02-12 and newer.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob
     *
     * @param {string} copyId Id of the Copy From URL operation.
     * @param {BlobAbortCopyFromURLOptions} [options] Optional options to the Blob Abort Copy From URL operation.
     * @returns {Promise<BlobAbortCopyFromURLResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.abortCopyFromURL = function (copyId, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_12;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-abortCopyFromURL", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.abortCopyFromURL(copyId, {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_12 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_12.message
                        });
                        throw e_12;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not
     * return a response until the copy is complete.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url
     *
     * @param {string} copySource The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication
     * @param {BlobSyncCopyFromURLOptions} [options={}]
     * @returns {Promise<BlobCopyFromURLResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.syncCopyFromURL = function (copySource, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_13;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-syncCopyFromURL", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        options.sourceConditions = options.sourceConditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.copyFromURL(copySource, {
                                abortSignal: options.abortSignal,
                                metadata: options.metadata,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                sourceModifiedAccessConditions: {
                                    sourceIfMatch: options.sourceConditions.ifMatch,
                                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                                },
                                sourceContentMD5: options.sourceContentMD5,
                                blobTagsString: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toBlobTagsString"])(options.tags),
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_13 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_13.message
                        });
                        throw e_13;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets the tier on a blob. The operation is allowed on a page blob in a premium
     * storage account and on a block blob in a blob storage account (locally redundant
     * storage only). A premium page blob's tier determines the allowed size, IOPS,
     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive
     * storage type. This operation does not update the blob's ETag.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier
     *
     * @param {BlockBlobTier | PremiumPageBlobTier | string} tier The tier to be set on the blob. Valid values are Hot, Cool, or Archive.
     * @param {BlobSetTierOptions} [options] Optional options to the Blob Set Tier operation.
     * @returns {Promise<BlobsSetTierResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.setAccessTier = function (tier, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_14;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-setAccessTier", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.setTier(Object(_models__WEBPACK_IMPORTED_MODULE_10__["toAccessTier"])(tier), {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                rehydratePriority: options.rehydratePriority,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_14 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_14.message
                        });
                        throw e_14;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    BlobClient.prototype.downloadToBuffer = function (param1, param2, param3, param4) {
        if (param4 === void 0) { param4 = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var buffer, offset, count, options, _a, span, spanOptions, response, transferProgress_1, batch, _loop_1, off, e_15;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        offset = 0;
                        count = 0;
                        options = param4;
                        if (param1 instanceof Buffer) {
                            buffer = param1;
                            offset = param2 || 0;
                            count = typeof param3 === "number" ? param3 : 0;
                        }
                        else {
                            offset = typeof param1 === "number" ? param1 : 0;
                            count = typeof param2 === "number" ? param2 : 0;
                            options = param3 || {};
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-downloadToBuffer", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 5, 6, 7]);
                        if (!options.blockSize) {
                            options.blockSize = 0;
                        }
                        if (options.blockSize < 0) {
                            throw new RangeError("blockSize option must be >= 0");
                        }
                        if (options.blockSize === 0) {
                            options.blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_12__["DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES"];
                        }
                        if (offset < 0) {
                            throw new RangeError("offset option must be >= 0");
                        }
                        if (count && count <= 0) {
                            throw new RangeError("count option must be > 0");
                        }
                        if (!options.conditions) {
                            options.conditions = {};
                        }
                        if (!!count) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getProperties(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        response = _b.sent();
                        count = response.contentLength - offset;
                        if (count < 0) {
                            throw new RangeError("offset " + offset + " shouldn't be larger than blob size " + response.contentLength);
                        }
                        _b.label = 3;
                    case 3:
                        // Allocate the buffer of size = count if the buffer is not provided
                        if (!buffer) {
                            try {
                                buffer = Buffer.alloc(count);
                            }
                            catch (error) {
                                throw new Error("Unable to allocate the buffer of size: " + count + "(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\t " + error.message);
                            }
                        }
                        if (buffer.length < count) {
                            throw new RangeError("The buffer's size should be equal to or larger than the request count of bytes: " + count);
                        }
                        transferProgress_1 = 0;
                        batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__["Batch"](options.concurrency);
                        _loop_1 = function (off) {
                            batch.addOperation(function () { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                                var chunkEnd, response, stream;
                                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            chunkEnd = offset + count;
                                            if (off + options.blockSize < chunkEnd) {
                                                chunkEnd = off + options.blockSize;
                                            }
                                            return [4 /*yield*/, this.download(off, chunkEnd - off, {
                                                    abortSignal: options.abortSignal,
                                                    conditions: options.conditions,
                                                    maxRetryRequests: options.maxRetryRequestsPerBlock,
                                                    customerProvidedKey: options.customerProvidedKey,
                                                    tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions })
                                                })];
                                        case 1:
                                            response = _a.sent();
                                            stream = response.readableStreamBody;
                                            return [4 /*yield*/, Object(_utils_utils_node__WEBPACK_IMPORTED_MODULE_14__["streamToBuffer"])(stream, buffer, off - offset, chunkEnd - offset)];
                                        case 2:
                                            _a.sent();
                                            // Update progress after block is downloaded, in case of block trying
                                            // Could provide finer grained progress updating inside HTTP requests,
                                            // only if convenience layer download try is enabled
                                            transferProgress_1 += chunkEnd - off;
                                            if (options.onProgress) {
                                                options.onProgress({ loadedBytes: transferProgress_1 });
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                        };
                        for (off = offset; off < offset + count; off = off + options.blockSize) {
                            _loop_1(off);
                        }
                        return [4 /*yield*/, batch.do()];
                    case 4:
                        _b.sent();
                        return [2 /*return*/, buffer];
                    case 5:
                        e_15 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_15.message
                        });
                        throw e_15;
                    case 6:
                        span.end();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Downloads an Azure Blob to a local file.
     * Fails if the the given file path already exits.
     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.
     *
     * @param {string} filePath
     * @param {number} [offset] From which position of the block blob to download.
     * @param {number} [count] How much data to be downloaded. Will download to the end when passing undefined.
     * @param {BlobDownloadOptions} [options] Options to Blob download options.
     * @returns {Promise<BlobDownloadResponseModel>} The response data for blob download operation,
     *                                                 but with readableStreamBody set to undefined since its
     *                                                 content is already read and written into a local file
     *                                                 at the specified path.
     * @memberof BlobClient
     */
    BlobClient.prototype.downloadToFile = function (filePath, offset, count, options) {
        if (offset === void 0) { offset = 0; }
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, response, e_16;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-downloadToFile", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 5, 6, 7]);
                        return [4 /*yield*/, this.download(offset, count, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        response = _b.sent();
                        if (!response.readableStreamBody) return [3 /*break*/, 4];
                        return [4 /*yield*/, Object(_utils_utils_node__WEBPACK_IMPORTED_MODULE_14__["readStreamToLocalFile"])(response.readableStreamBody, filePath)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        // The stream is no longer accessible so setting it to undefined.
                        response.blobDownloadStream = undefined;
                        return [2 /*return*/, response];
                    case 5:
                        e_16 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_16.message
                        });
                        throw e_16;
                    case 6:
                        span.end();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    BlobClient.prototype.getBlobAndContainerNamesFromUrl = function () {
        var containerName;
        var blobName;
        try {
            //  URL may look like the following
            // "https://myaccount.blob.core.windows.net/mycontainer/blob?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt";
            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`
            // http://localhost:10001/devstoreaccount1/containername/blob
            var parsedUrl = _azure_core_http__WEBPACK_IMPORTED_MODULE_2__["URLBuilder"].parse(this.url);
            if (parsedUrl.getHost().split(".")[1] === "blob") {
                // "https://myaccount.blob.core.windows.net/containername/blob".
                // .getPath() -> /containername/blob
                var pathComponents = parsedUrl.getPath().match("/([^/]*)(/(.*))?");
                containerName = pathComponents[1];
                blobName = pathComponents[3];
            }
            else {
                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob
                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob
                // .getPath() -> /devstoreaccount1/containername/blob
                var pathComponents = parsedUrl.getPath().match("/([^/]*)/([^/]*)(/(.*))?");
                containerName = pathComponents[2];
                blobName = pathComponents[4];
            }
            // decode the encoded blobName, containerName - to get all the special characters that might be present in them
            containerName = decodeURIComponent(containerName);
            blobName = decodeURIComponent(blobName);
            // Azure Storage Server will replace "\" with "/" in the blob names
            //   doing the same in the SDK side so that the user doesn't have to replace "\" instances in the blobName
            blobName = blobName.replace(/\\/g, "/");
            if (!blobName) {
                throw new Error("Provided blobName is invalid.");
            }
            else if (!containerName) {
                throw new Error("Provided containerName is invalid.");
            }
            return { blobName: blobName, containerName: containerName };
        }
        catch (error) {
            throw new Error("Unable to extract blobName and containerName with provided information.");
        }
    };
    /**
     * Asynchronously copies a blob to a destination within the storage account.
     * In version 2012-02-12 and later, the source for a Copy Blob operation can be
     * a committed blob in any Azure storage account.
     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be
     * an Azure file in any Azure storage account.
     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob
     * operation to copy from another storage account.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob
     *
     * @param {string} copySource url to the source Azure Blob/File.
     * @param {BlobStartCopyFromURLOptions} [options] Optional options to the Blob Start Copy From URL operation.
     * @returns {Promise<BlobStartCopyFromURLResponse>}
     * @memberof BlobClient
     */
    BlobClient.prototype.startCopyFromURL = function (copySource, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_17;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobClient-startCopyFromURL", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        options.sourceConditions = options.sourceConditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blobContext.startCopyFromURL(copySource, {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                metadata: options.metadata,
                                modifiedAccessConditions: options.conditions,
                                sourceModifiedAccessConditions: {
                                    sourceIfMatch: options.sourceConditions.ifMatch,
                                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                                },
                                rehydratePriority: options.rehydratePriority,
                                tier: Object(_models__WEBPACK_IMPORTED_MODULE_10__["toAccessTier"])(options.tier),
                                blobTagsString: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toBlobTagsString"])(options.tags),
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_17 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_17.message
                        });
                        throw e_17;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return BlobClient;
}(_StorageClient__WEBPACK_IMPORTED_MODULE_17__["StorageClient"]));

/**
 * AppendBlobClient defines a set of operations applicable to append blobs.
 *
 * @export
 * @class AppendBlobClient
 * @extends {BlobClient}
 */
var AppendBlobClient = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(AppendBlobClient, _super);
    function AppendBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
        var _this = this;
        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
        var pipeline;
        var url;
        options = options || {};
        if (credentialOrPipelineOrContainerName instanceof _Pipeline__WEBPACK_IMPORTED_MODULE_11__["Pipeline"]) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        }
        else if ((_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"] && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"]) ||
            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"] ||
            Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isTokenCredential"])(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;
            url = urlOrConnectionString;
            options = blobNameOrOptions;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(credentialOrPipelineOrContainerName, options);
        }
        else if (!credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            // The second parameter is undefined. Use anonymous credential.
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
        }
        else if (credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName === "string" &&
            blobNameOrOptions &&
            typeof blobNameOrOptions === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            var containerName = credentialOrPipelineOrContainerName;
            var blobName = blobNameOrOptions;
            var extractedCreds = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["extractConnectionStringParts"])(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"]) {
                    var sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"](extractedCreds.accountName, extractedCreds.accountKey);
                    url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
                    options.proxyOptions = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["getDefaultProxySettings"])(extractedCreds.proxyUri);
                    pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(sharedKeyCredential, options);
                }
                else {
                    throw new Error("Account connection string is only supported in Node.js environment");
                }
            }
            else if (extractedCreds.kind === "SASConnString") {
                url =
                    Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +
                        "?" +
                        extractedCreds.accountSas;
                pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
            }
            else {
                throw new Error("Connection string must be either an Account connection string or a SAS connection string");
            }
        }
        else {
            throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }
        _this = _super.call(this, url, pipeline) || this;
        _this.appendBlobContext = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__["AppendBlob"](_this.storageClientContext);
        return _this;
    }
    /**
     * Creates a new AppendBlobClient object identical to the source but with the
     * specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a Client to the base blob.
     *
     * @param {string} snapshot The snapshot timestamp.
     * @returns {AppendBlobClient} A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.
     * @memberof AppendBlobClient
     */
    AppendBlobClient.prototype.withSnapshot = function (snapshot) {
        return new AppendBlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["setURLParameter"])(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_12__["URLConstants"].Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    };
    /**
     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param {AppendBlobCreateOptions} [options] Options to the Append Block Create operation.
     * @returns {Promise<AppendBlobCreateResponse>}
     * @memberof AppendBlobClient
     *
     * Example usage:
     *
     * ```js
     * const appendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await appendBlobClient.create();
     * ```
     */
    AppendBlobClient.prototype.create = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_18;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("AppendBlobClient-create", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.appendBlobContext.create(0, {
                                abortSignal: options.abortSignal,
                                blobHTTPHeaders: options.blobHTTPHeaders,
                                leaseAccessConditions: options.conditions,
                                metadata: options.metadata,
                                modifiedAccessConditions: options.conditions,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                blobTagsString: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toBlobTagsString"])(options.tags),
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_18 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_18.message
                        });
                        throw e_18;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.
     * If the blob with the same name already exists, the content of the existing blob will remain unchanged.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param {AppendBlobCreateIfNotExistsOptions} [options]
     * @returns {Promise<AppendBlobCreateIfNotExistsResponse>}
     * @memberof AppendBlobClient
     */
    AppendBlobClient.prototype.createIfNotExists = function (options) {
        var _a, _b;
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _c, span, spanOptions, conditions, res, e_19;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _c = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("AppendBlobClient-createIfNotExists", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;
                        conditions = { ifNoneMatch: _utils_constants__WEBPACK_IMPORTED_MODULE_12__["ETagAny"] };
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.create(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { conditions: conditions, tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        res = _d.sent();
                        return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: true }, res)];
                    case 3:
                        e_19 = _d.sent();
                        if (((_a = e_19.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists") {
                            span.setStatus({
                                code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].ALREADY_EXISTS,
                                message: "Expected exception when creating a blob only if it does not already exist."
                            });
                            return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: false }, (_b = e_19.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e_19.response })];
                        }
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_19.message
                        });
                        throw e_19;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Commits a new block of data to the end of the existing append blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/append-block
     *
     * @param {HttpRequestBody} body Data to be appended.
     * @param {number} contentLength Length of the body in bytes.
     * @param {AppendBlobAppendBlockOptions} [options] Options to the Append Block operation.
     * @returns {Promise<AppendBlobAppendBlockResponse>}
     * @memberof AppendBlobClient
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello World!";
     *
     * // Create a new append blob and append data to the blob.
     * const newAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await newAppendBlobClient.create();
     * await newAppendBlobClient.appendBlock(content, content.length);
     *
     * // Append data to an existing append blob.
     * const existingAppendBlobClient = containerClient.getAppendBlobClient("<blob name>");
     * await existingAppendBlobClient.appendBlock(content, content.length);
     * ```
     */
    AppendBlobClient.prototype.appendBlock = function (body, contentLength, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_20;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("AppendBlobClient-appendBlock", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.appendBlobContext.appendBlock(body, contentLength, {
                                abortSignal: options.abortSignal,
                                appendPositionAccessConditions: options.conditions,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                onUploadProgress: options.onProgress,
                                transactionalContentMD5: options.transactionalContentMD5,
                                transactionalContentCrc64: options.transactionalContentCrc64,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_20 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_20.message
                        });
                        throw e_20;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The Append Block operation commits a new block of data to the end of an existing append blob
     * where the contents are read from a source url.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url
     *
     * @param {string} sourceURL
     *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can
     *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob
     *                 must either be public or must be authenticated via a shared access signature. If the source blob is
     *                 public, no authentication is required to perform the operation.
     * @param {number} sourceOffset Offset in source to be appended
     * @param {number} count Number of bytes to be appended as a block
     * @param {AppendBlobAppendBlockFromURLOptions} [options={}]
     * @returns {Promise<AppendBlobAppendBlockFromUrlResponse>}
     * @memberof AppendBlobClient
     */
    AppendBlobClient.prototype.appendBlockFromURL = function (sourceURL, sourceOffset, count, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_21;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("AppendBlobClient-appendBlockFromURL", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        options.conditions = options.conditions || {};
                        options.sourceConditions = options.sourceConditions || {};
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {
                                abortSignal: options.abortSignal,
                                sourceRange: Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: sourceOffset, count: count }),
                                sourceContentMD5: options.sourceContentMD5,
                                sourceContentCrc64: options.sourceContentCrc64,
                                leaseAccessConditions: options.conditions,
                                appendPositionAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                sourceModifiedAccessConditions: {
                                    sourceIfMatch: options.sourceConditions.ifMatch,
                                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                                },
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_21 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_21.message
                        });
                        throw e_21;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return AppendBlobClient;
}(BlobClient));

/**
 * BlockBlobClient defines a set of operations applicable to block blobs.
 *
 * @export
 * @class BlockBlobClient
 * @extends {BlobClient}
 */
var BlockBlobClient = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BlockBlobClient, _super);
    function BlockBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
        var _this = this;
        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
        var pipeline;
        var url;
        options = options || {};
        if (credentialOrPipelineOrContainerName instanceof _Pipeline__WEBPACK_IMPORTED_MODULE_11__["Pipeline"]) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        }
        else if ((_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"] && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"]) ||
            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"] ||
            Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isTokenCredential"])(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            options = blobNameOrOptions;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(credentialOrPipelineOrContainerName, options);
        }
        else if (!credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            // The second parameter is undefined. Use anonymous credential.
            url = urlOrConnectionString;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
        }
        else if (credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName === "string" &&
            blobNameOrOptions &&
            typeof blobNameOrOptions === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            var containerName = credentialOrPipelineOrContainerName;
            var blobName = blobNameOrOptions;
            var extractedCreds = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["extractConnectionStringParts"])(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"]) {
                    var sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"](extractedCreds.accountName, extractedCreds.accountKey);
                    url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
                    options.proxyOptions = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["getDefaultProxySettings"])(extractedCreds.proxyUri);
                    pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(sharedKeyCredential, options);
                }
                else {
                    throw new Error("Account connection string is only supported in Node.js environment");
                }
            }
            else if (extractedCreds.kind === "SASConnString") {
                url =
                    Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +
                        "?" +
                        extractedCreds.accountSas;
                pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
            }
            else {
                throw new Error("Connection string must be either an Account connection string or a SAS connection string");
            }
        }
        else {
            throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }
        _this = _super.call(this, url, pipeline) || this;
        _this.blockBlobContext = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__["BlockBlob"](_this.storageClientContext);
        _this._blobContext = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__["Blob"](_this.storageClientContext);
        return _this;
    }
    /**
     * Creates a new BlockBlobClient object identical to the source but with the
     * specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a URL to the base blob.
     *
     * @param {string} snapshot The snapshot timestamp.
     * @returns {BlockBlobClient} A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.withSnapshot = function (snapshot) {
        return new BlockBlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["setURLParameter"])(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_12__["URLConstants"].Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    };
    /**
     * Quick query for a JSON or CSV formatted blob.
     *
     * Example usage (Node.js):
     *
     * ```js
     * // Query and convert a blob to a string
     * const queryBlockBlobResponse = await blockBlobClient.query("select * from BlobStorage");
     * const downloaded = await streamToString(queryBlockBlobResponse.readableStreamBody);
     * console.log("Query blob content:", downloaded);
     *
     * async function streamToString(readableStream) {
     *   return new Promise((resolve, reject) => {
     *     const chunks = [];
     *     readableStream.on("data", (data) => {
     *       chunks.push(data.toString());
     *     });
     *     readableStream.on("end", () => {
     *       resolve(chunks.join(""));
     *     });
     *     readableStream.on("error", reject);
     *   });
     * }
     * ```
     *
     * @param {string} query
     * @param {BlockBlobQueryOptions} [options={}]
     * @returns {Promise<BlobDownloadResponseModel>}
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.query = function (query, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, response, e_22;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-query", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._blobContext.query({
                                abortSignal: options.abortSignal,
                                queryRequest: {
                                    expression: query,
                                    inputSerialization: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toQuerySerialization"])(options.inputTextConfiguration),
                                    outputSerialization: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toQuerySerialization"])(options.outputTextConfiguration)
                                },
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2:
                        response = _b.sent();
                        return [2 /*return*/, new _BlobQueryResponse__WEBPACK_IMPORTED_MODULE_5__["BlobQueryResponse"](response, {
                                abortSignal: options.abortSignal,
                                onProgress: options.onProgress,
                                onError: options.onError
                            })];
                    case 3:
                        e_22 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_22.message
                        });
                        throw e_22;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Creates a new block blob, or updates the content of an existing block blob.
     * Updating an existing block blob overwrites any existing metadata on the blob.
     * Partial updates are not supported; the content of the existing blob is
     * overwritten with the new content. To perform a partial update of a block blob's,
     * use {@link stageBlock} and {@link commitBlockList}.
     *
     * This is a non-parallel uploading method, please use {@link uploadFile},
     * {@link uploadStream} or {@link uploadBrowserData} for better performance
     * with concurrency uploading.
     *
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function
     *                               which returns a new Readable stream whose offset is from data source beginning.
     * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
     *                               string including non non-Base64/Hex-encoded characters.
     * @param {BlockBlobUploadOptions} [options] Options to the Block Blob Upload operation.
     * @returns {Promise<BlockBlobUploadResponse>} Response data for the Block Blob Upload operation.
     * @memberof BlockBlobClient
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello world!";
     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
     * ```
     */
    BlockBlobClient.prototype.upload = function (body, contentLength, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_23;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-upload", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.blockBlobContext.upload(body, contentLength, {
                                abortSignal: options.abortSignal,
                                blobHTTPHeaders: options.blobHTTPHeaders,
                                leaseAccessConditions: options.conditions,
                                metadata: options.metadata,
                                modifiedAccessConditions: options.conditions,
                                onUploadProgress: options.onProgress,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                tier: Object(_models__WEBPACK_IMPORTED_MODULE_10__["toAccessTier"])(options.tier),
                                blobTagsString: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toBlobTagsString"])(options.tags),
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_23 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_23.message
                        });
                        throw e_23;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Uploads the specified block to the block blob's "staging area" to be later
     * committed by a call to commitBlockList.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-block
     *
     * @param {string} blockId A 64-byte value that is base64-encoded
     * @param {HttpRequestBody} body Data to upload to the staging area.
     * @param {number} contentLength Number of bytes to upload.
     * @param {BlockBlobStageBlockOptions} [options] Options to the Block Blob Stage Block operation.
     * @returns {Promise<BlockBlobStageBlockResponse>} Response data for the Block Blob Stage Block operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.stageBlock = function (blockId, body, contentLength, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_24;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-stageBlock", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.blockBlobContext.stageBlock(blockId, contentLength, body, {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                onUploadProgress: options.onProgress,
                                transactionalContentMD5: options.transactionalContentMD5,
                                transactionalContentCrc64: options.transactionalContentCrc64,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_24 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_24.message
                        });
                        throw e_24;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The Stage Block From URL operation creates a new block to be committed as part
     * of a blob where the contents are read from a URL.
     * This API is available starting in version 2018-03-28.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url
     *
     * @param {string} blockId A 64-byte value that is base64-encoded
     * @param {string} sourceURL Specifies the URL of the blob. The value
     *                           may be a URL of up to 2 KB in length that specifies a blob.
     *                           The value should be URL-encoded as it would appear
     *                           in a request URI. The source blob must either be public
     *                           or must be authenticated via a shared access signature.
     *                           If the source blob is public, no authentication is required
     *                           to perform the operation. Here are some examples of source object URLs:
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob
     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param {number} [offset] From which position of the blob to download, >= 0
     * @param {number} [count] How much data to be downloaded, > 0. Will download to the end when undefined
     * @param {BlockBlobStageBlockFromURLOptions} [options={}] Options to the Block Blob Stage Block From URL operation.
     * @returns {Promise<BlockBlobStageBlockFromURLResponse>} Response data for the Block Blob Stage Block From URL operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.stageBlockFromURL = function (blockId, sourceURL, offset, count, options) {
        if (offset === void 0) { offset = 0; }
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_25;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-stageBlockFromURL", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                sourceContentMD5: options.sourceContentMD5,
                                sourceContentCrc64: options.sourceContentCrc64,
                                sourceRange: offset === 0 && !count ? undefined : Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: offset, count: count }),
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_25 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_25.message
                        });
                        throw e_25;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Writes a blob by specifying the list of block IDs that make up the blob.
     * In order to be written as part of a blob, a block must have been successfully written
     * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to
     * update a blob by uploading only those blocks that have changed, then committing the new and existing
     * blocks together. Any blocks not specified in the block list and permanently deleted.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list
     *
     * @param {string[]} blocks  Array of 64-byte value that is base64-encoded
     * @param {BlockBlobCommitBlockListOptions} [options] Options to the Block Blob Commit Block List operation.
     * @returns {Promise<BlockBlobCommitBlockListResponse>} Response data for the Block Blob Commit Block List operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.commitBlockList = function (blocks, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_26;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-commitBlockList", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.blockBlobContext.commitBlockList({ latest: blocks }, {
                                abortSignal: options.abortSignal,
                                blobHTTPHeaders: options.blobHTTPHeaders,
                                leaseAccessConditions: options.conditions,
                                metadata: options.metadata,
                                modifiedAccessConditions: options.conditions,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                tier: Object(_models__WEBPACK_IMPORTED_MODULE_10__["toAccessTier"])(options.tier),
                                blobTagsString: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toBlobTagsString"])(options.tags),
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_26 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_26.message
                        });
                        throw e_26;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns the list of blocks that have been uploaded as part of a block blob
     * using the specified block list filter.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list
     *
     * @param {BlockListType} listType Specifies whether to return the list of committed blocks,
     *                                        the list of uncommitted blocks, or both lists together.
     * @param {BlockBlobGetBlockListOptions} [options] Options to the Block Blob Get Block List operation.
     * @returns {Promise<BlockBlobGetBlockListResponse>} Response data for the Block Blob Get Block List operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.getBlockList = function (listType, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, res, e_27;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-getBlockList", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.blockBlobContext.getBlockList(listType, {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2:
                        res = _b.sent();
                        if (!res.committedBlocks) {
                            res.committedBlocks = [];
                        }
                        if (!res.uncommittedBlocks) {
                            res.uncommittedBlocks = [];
                        }
                        return [2 /*return*/, res];
                    case 3:
                        e_27 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_27.message
                        });
                        throw e_27;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    // High level functions
    /**
     * ONLY AVAILABLE IN BROWSERS.
     *
     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.
     *
     * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.
     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call
     * {@link commitBlockList} to commit the block list.
     *
     * @export
     * @param {Blob | ArrayBuffer | ArrayBufferView} browserData Blob, File, ArrayBuffer or ArrayBufferView
     * @param {BlockBlobParallelUploadOptions} [options] Options to upload browser data.
     * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.uploadBrowserData = function (browserData, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, browserBlob_1, e_28;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-uploadBrowserData", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        browserBlob_1 = new Blob([browserData]);
                        return [4 /*yield*/, this.uploadSeekableBlob(function (offset, size) {
                                return browserBlob_1.slice(offset, offset + size);
                            }, browserBlob_1.size, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_28 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_28.message
                        });
                        throw e_28;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * ONLY AVAILABLE IN BROWSERS.
     *
     * Uploads a browser {@link Blob} object to block blob. Requires a blobFactory as the data source,
     * which need to return a {@link Blob} object with the offset and size provided.
     *
     * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.
     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
     * to commit the block list.
     *
     * @param {(offset: number, size: number) => Blob} blobFactory
     * @param {number} size size of the data to upload.
     * @param {BlockBlobParallelUploadOptions} [options] Options to Upload to Block Blob operation.
     * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.uploadSeekableBlob = function (blobFactory, size, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, numBlocks_1, blockList_1, blockIDPrefix_1, transferProgress_2, batch, _loop_2, i, e_29;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options.blockSize) {
                            options.blockSize = 0;
                        }
                        if (options.blockSize < 0 || options.blockSize > _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES"]) {
                            throw new RangeError("blockSize option must be >= 0 and <= " + _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES"]);
                        }
                        if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {
                            options.maxSingleShotSize = _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES"];
                        }
                        if (options.maxSingleShotSize < 0 ||
                            options.maxSingleShotSize > _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES"]) {
                            throw new RangeError("maxSingleShotSize option must be >= 0 and <= " + _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES"]);
                        }
                        if (options.blockSize === 0) {
                            if (size > _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES"] * _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_BLOCKS"]) {
                                throw new RangeError(size + " is too larger to upload to a block blob.");
                            }
                            if (size > options.maxSingleShotSize) {
                                options.blockSize = Math.ceil(size / _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_BLOCKS"]);
                                if (options.blockSize < _utils_constants__WEBPACK_IMPORTED_MODULE_12__["DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES"]) {
                                    options.blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_12__["DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES"];
                                }
                            }
                        }
                        if (!options.blobHTTPHeaders) {
                            options.blobHTTPHeaders = {};
                        }
                        if (!options.conditions) {
                            options.conditions = {};
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-UploadSeekableBlob", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 5, 6, 7]);
                        if (!(size <= options.maxSingleShotSize)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.upload(blobFactory(0, size), size, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        numBlocks_1 = Math.floor((size - 1) / options.blockSize) + 1;
                        if (numBlocks_1 > _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_BLOCKS"]) {
                            throw new RangeError("The buffer's size is too big or the BlockSize is too small;" +
                                ("the number of blocks must be <= " + _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_BLOCKS"]));
                        }
                        blockList_1 = [];
                        blockIDPrefix_1 = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["generateUuid"])();
                        transferProgress_2 = 0;
                        batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__["Batch"](options.concurrency);
                        _loop_2 = function (i) {
                            batch.addOperation(function () { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                                var blockID, start, end, contentLength;
                                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            blockID = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["generateBlockID"])(blockIDPrefix_1, i);
                                            start = options.blockSize * i;
                                            end = i === numBlocks_1 - 1 ? size : start + options.blockSize;
                                            contentLength = end - start;
                                            blockList_1.push(blockID);
                                            return [4 /*yield*/, this.stageBlock(blockID, blobFactory(start, contentLength), contentLength, {
                                                    abortSignal: options.abortSignal,
                                                    conditions: options.conditions,
                                                    encryptionScope: options.encryptionScope,
                                                    tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions })
                                                })];
                                        case 1:
                                            _a.sent();
                                            // Update progress after block is successfully uploaded to server, in case of block trying
                                            // TODO: Hook with convenience layer progress event in finer level
                                            transferProgress_2 += contentLength;
                                            if (options.onProgress) {
                                                options.onProgress({
                                                    loadedBytes: transferProgress_2
                                                });
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                        };
                        for (i = 0; i < numBlocks_1; i++) {
                            _loop_2(i);
                        }
                        return [4 /*yield*/, batch.do()];
                    case 4:
                        _b.sent();
                        return [2 /*return*/, this.commitBlockList(blockList_1, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 5:
                        e_29 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_29.message
                        });
                        throw e_29;
                    case 6:
                        span.end();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Uploads a local file in blocks to a block blob.
     *
     * When file size <= 256MB, this method will use 1 upload call to finish the upload.
     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList
     * to commit the block list.
     *
     * @param {string} filePath Full path of local file
     * @param {BlockBlobParallelUploadOptions} [options] Options to Upload to Block Blob operation.
     * @returns {(Promise<BlobUploadCommonResponse>)}  Response data for the Blob Upload operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.uploadFile = function (filePath, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, size, e_30;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-uploadFile", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, 5, 6]);
                        return [4 /*yield*/, Object(_utils_utils_node__WEBPACK_IMPORTED_MODULE_14__["fsStat"])(filePath)];
                    case 2:
                        size = (_b.sent()).size;
                        return [4 /*yield*/, this.uploadResetableStream(function (offset, count) {
                                return fs__WEBPACK_IMPORTED_MODULE_1__["createReadStream"](filePath, {
                                    autoClose: true,
                                    end: count ? offset + count - 1 : Infinity,
                                    start: offset
                                });
                            }, size, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 3: return [2 /*return*/, _b.sent()];
                    case 4:
                        e_30 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_30.message
                        });
                        throw e_30;
                    case 5:
                        span.end();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Uploads a Node.js Readable stream into block blob.
     *
     * PERFORMANCE IMPROVEMENT TIPS:
     * * Input stream highWaterMark is better to set a same value with bufferSize
     *    parameter, which will avoid Buffer.concat() operations.
     *
     * @param {Readable} stream Node.js Readable stream
     * @param {number} bufferSize Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB
     * @param {number} maxConcurrency  Max concurrency indicates the max number of buffers that can be allocated,
     *                                 positive correlation with max uploading concurrency. Default value is 5
     * @param {BlockBlobUploadStreamOptions} [options] Options to Upload Stream to Block Blob operation.
     * @returns {Promise<BlobUploadCommonResponse>} Response data for the Blob Upload operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.uploadStream = function (stream, bufferSize, maxConcurrency, options) {
        if (bufferSize === void 0) { bufferSize = _utils_constants__WEBPACK_IMPORTED_MODULE_12__["DEFAULT_BLOCK_BUFFER_SIZE_BYTES"]; }
        if (maxConcurrency === void 0) { maxConcurrency = 5; }
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, blockNum_1, blockIDPrefix_2, transferProgress_3, blockList_2, scheduler, e_31;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options.blobHTTPHeaders) {
                            options.blobHTTPHeaders = {};
                        }
                        if (!options.conditions) {
                            options.conditions = {};
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-uploadStream", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, 5, 6]);
                        blockNum_1 = 0;
                        blockIDPrefix_2 = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["generateUuid"])();
                        transferProgress_3 = 0;
                        blockList_2 = [];
                        scheduler = new _utils_BufferScheduler__WEBPACK_IMPORTED_MODULE_19__["BufferScheduler"](stream, bufferSize, maxConcurrency, function (buffer) { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                            var blockID;
                            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        blockID = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["generateBlockID"])(blockIDPrefix_2, blockNum_1);
                                        blockList_2.push(blockID);
                                        blockNum_1++;
                                        return [4 /*yield*/, this.stageBlock(blockID, buffer, buffer.length, {
                                                conditions: options.conditions,
                                                encryptionScope: options.encryptionScope,
                                                tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions })
                                            })];
                                    case 1:
                                        _a.sent();
                                        // Update progress after block is successfully uploaded to server, in case of block trying
                                        transferProgress_3 += buffer.length;
                                        if (options.onProgress) {
                                            options.onProgress({ loadedBytes: transferProgress_3 });
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); }, 
                        // concurrency should set a smaller value than maxConcurrency, which is helpful to
                        // reduce the possibility when a outgoing handler waits for stream data, in
                        // this situation, outgoing handlers are blocked.
                        // Outgoing queue shouldn't be empty.
                        Math.ceil((maxConcurrency / 4) * 3));
                        return [4 /*yield*/, scheduler.do()];
                    case 2:
                        _b.sent();
                        return [4 /*yield*/, this.commitBlockList(blockList_2, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 3: return [2 /*return*/, _b.sent()];
                    case 4:
                        e_31 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_31.message
                        });
                        throw e_31;
                    case 5:
                        span.end();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * ONLY AVAILABLE IN NODE.JS RUNTIME.
     *
     * Accepts a Node.js Readable stream factory, and uploads in blocks to a block blob.
     * The Readable stream factory must returns a Node.js Readable stream starting from the offset defined. The offset
     * is the offset in the block blob to be uploaded.
     *
     * When buffer length <= 256MB, this method will use 1 upload call to finish the upload.
     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}
     * to commit the block list.
     *
     * @export
     * @param {(offset: number) => NodeJS.ReadableStream} streamFactory Returns a Node.js Readable stream starting
     *                                                                  from the offset defined
     * @param {number} size Size of the block blob
     * @param {BlockBlobParallelUploadOptions} [options] Options to Upload to Block Blob operation.
     * @returns {(Promise<BlobUploadCommonResponse>)}  Response data for the Blob Upload operation.
     * @memberof BlockBlobClient
     */
    BlockBlobClient.prototype.uploadResetableStream = function (streamFactory, size, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, numBlocks_2, blockList_3, blockIDPrefix_3, transferProgress_4, batch, _loop_3, i, e_32;
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options.blockSize) {
                            options.blockSize = 0;
                        }
                        if (options.blockSize < 0 || options.blockSize > _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES"]) {
                            throw new RangeError("blockSize option must be >= 0 and <= " + _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES"]);
                        }
                        if (options.maxSingleShotSize !== 0 && !options.maxSingleShotSize) {
                            options.maxSingleShotSize = _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES"];
                        }
                        if (options.maxSingleShotSize < 0 ||
                            options.maxSingleShotSize > _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES"]) {
                            throw new RangeError("maxSingleShotSize option must be >= 0 and <= " + _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES"]);
                        }
                        if (options.blockSize === 0) {
                            if (size > _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_BLOCKS"] * _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES"]) {
                                throw new RangeError(size + " is too larger to upload to a block blob.");
                            }
                            if (size > options.maxSingleShotSize) {
                                options.blockSize = Math.ceil(size / _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_BLOCKS"]);
                                if (options.blockSize < _utils_constants__WEBPACK_IMPORTED_MODULE_12__["DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES"]) {
                                    options.blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_12__["DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES"];
                                }
                            }
                        }
                        if (!options.blobHTTPHeaders) {
                            options.blobHTTPHeaders = {};
                        }
                        if (!options.conditions) {
                            options.conditions = {};
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlockBlobClient-uploadResetableStream", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        if (!(size <= options.maxSingleShotSize)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.upload(function () { return streamFactory(0); }, size, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        numBlocks_2 = Math.floor((size - 1) / options.blockSize) + 1;
                        if (numBlocks_2 > _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_BLOCKS"]) {
                            throw new RangeError("The buffer's size is too big or the BlockSize is too small;" +
                                ("the number of blocks must be <= " + _utils_constants__WEBPACK_IMPORTED_MODULE_12__["BLOCK_BLOB_MAX_BLOCKS"]));
                        }
                        blockList_3 = [];
                        blockIDPrefix_3 = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["generateUuid"])();
                        transferProgress_4 = 0;
                        batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__["Batch"](options.concurrency);
                        _loop_3 = function (i) {
                            batch.addOperation(function () { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
                                var blockID, start, end, contentLength;
                                return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            blockID = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["generateBlockID"])(blockIDPrefix_3, i);
                                            start = options.blockSize * i;
                                            end = i === numBlocks_2 - 1 ? size : start + options.blockSize;
                                            contentLength = end - start;
                                            blockList_3.push(blockID);
                                            return [4 /*yield*/, this.stageBlock(blockID, function () { return streamFactory(start, contentLength); }, contentLength, {
                                                    abortSignal: options.abortSignal,
                                                    conditions: options.conditions,
                                                    encryptionScope: options.encryptionScope,
                                                    tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions })
                                                })];
                                        case 1:
                                            _a.sent();
                                            // Update progress after block is successfully uploaded to server, in case of block trying
                                            transferProgress_4 += contentLength;
                                            if (options.onProgress) {
                                                options.onProgress({ loadedBytes: transferProgress_4 });
                                            }
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                        };
                        for (i = 0; i < numBlocks_2; i++) {
                            _loop_3(i);
                        }
                        return [4 /*yield*/, batch.do()];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, this.commitBlockList(blockList_3, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 5: return [2 /*return*/, _b.sent()];
                    case 6:
                        e_32 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_32.message
                        });
                        throw e_32;
                    case 7:
                        span.end();
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return BlockBlobClient;
}(BlobClient));

/**
 * PageBlobClient defines a set of operations applicable to page blobs.
 *
 * @export
 * @class PageBlobClient
 * @extends {BlobClient}
 */
var PageBlobClient = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PageBlobClient, _super);
    function PageBlobClient(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, options) {
        var _this = this;
        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.
        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);
        var pipeline;
        var url;
        options = options || {};
        if (credentialOrPipelineOrContainerName instanceof _Pipeline__WEBPACK_IMPORTED_MODULE_11__["Pipeline"]) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        }
        else if ((_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"] && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"]) ||
            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"] ||
            Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isTokenCredential"])(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            options = blobNameOrOptions;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(credentialOrPipelineOrContainerName, options);
        }
        else if (!credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            // The second parameter is undefined. Use anonymous credential.
            url = urlOrConnectionString;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
        }
        else if (credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName === "string" &&
            blobNameOrOptions &&
            typeof blobNameOrOptions === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            var containerName = credentialOrPipelineOrContainerName;
            var blobName = blobNameOrOptions;
            var extractedCreds = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["extractConnectionStringParts"])(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"]) {
                    var sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"](extractedCreds.accountName, extractedCreds.accountKey);
                    url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));
                    options.proxyOptions = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["getDefaultProxySettings"])(extractedCreds.proxyUri);
                    pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(sharedKeyCredential, options);
                }
                else {
                    throw new Error("Account connection string is only supported in Node.js environment");
                }
            }
            else if (extractedCreds.kind === "SASConnString") {
                url =
                    Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +
                        "?" +
                        extractedCreds.accountSas;
                pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
            }
            else {
                throw new Error("Connection string must be either an Account connection string or a SAS connection string");
            }
        }
        else {
            throw new Error("Expecting non-empty strings for containerName and blobName parameters");
        }
        _this = _super.call(this, url, pipeline) || this;
        _this.pageBlobContext = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__["PageBlob"](_this.storageClientContext);
        return _this;
    }
    /**
     * Creates a new PageBlobClient object identical to the source but with the
     * specified snapshot timestamp.
     * Provide "" will remove the snapshot and return a Client to the base blob.
     *
     * @param {string} snapshot The snapshot timestamp.
     * @returns {PageBlobClient} A new PageBlobClient object identical to the source but with the specified snapshot timestamp.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.withSnapshot = function (snapshot) {
        return new PageBlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["setURLParameter"])(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_12__["URLConstants"].Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);
    };
    /**
     * Creates a page blob of the specified length. Call uploadPages to upload data
     * data to a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param {number} size size of the page blob.
     * @param {PageBlobCreateOptions} [options] Options to the Page Blob Create operation.
     * @returns {Promise<PageBlobCreateResponse>} Response data for the Page Blob Create operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.create = function (size, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_33;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-create", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.pageBlobContext.create(0, size, {
                                abortSignal: options.abortSignal,
                                blobHTTPHeaders: options.blobHTTPHeaders,
                                blobSequenceNumber: options.blobSequenceNumber,
                                leaseAccessConditions: options.conditions,
                                metadata: options.metadata,
                                modifiedAccessConditions: options.conditions,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                tier: Object(_models__WEBPACK_IMPORTED_MODULE_10__["toAccessTier"])(options.tier),
                                blobTagsString: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toBlobTagsString"])(options.tags),
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_33 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_33.message
                        });
                        throw e_33;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Creates a page blob of the specified length. Call uploadPages to upload data
     * data to a page blob. If the blob with the same name already exists, the content
     * of the existing blob will remain unchanged.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param {number} size size of the page blob.
     * @param {PageBlobCreateIfNotExistsOptions} [options]
     * @returns {Promise<PageBlobCreateIfNotExistsResponse>}
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.createIfNotExists = function (size, options) {
        var _a, _b;
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _c, span, spanOptions, conditions, res, e_34;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _c = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-createIfNotExists", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, 4, 5]);
                        conditions = { ifNoneMatch: _utils_constants__WEBPACK_IMPORTED_MODULE_12__["ETagAny"] };
                        return [4 /*yield*/, this.create(size, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { conditions: conditions, tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        res = _d.sent();
                        return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: true }, res)];
                    case 3:
                        e_34 = _d.sent();
                        if (((_a = e_34.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "BlobAlreadyExists") {
                            span.setStatus({
                                code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].ALREADY_EXISTS,
                                message: "Expected exception when creating a blob only if it does not already exist."
                            });
                            return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: false }, (_b = e_34.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e_34.response })];
                        }
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_34.message
                        });
                        throw e_34;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-page
     *
     * @param {HttpRequestBody} body Data to upload
     * @param {number} offset Offset of destination page blob
     * @param {number} count Content length of the body, also number of bytes to be uploaded
     * @param {PageBlobUploadPagesOptions} [options] Options to the Page Blob Upload Pages operation.
     * @returns {Promise<PageBlobsUploadPagesResponse>} Response data for the Page Blob Upload Pages operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.uploadPages = function (body, offset, count, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_35;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-uploadPages", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.pageBlobContext.uploadPages(body, count, {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                onUploadProgress: options.onProgress,
                                range: Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: offset, count: count }),
                                sequenceNumberAccessConditions: options.conditions,
                                transactionalContentMD5: options.transactionalContentMD5,
                                transactionalContentCrc64: options.transactionalContentCrc64,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_35 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_35.message
                        });
                        throw e_35;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * The Upload Pages operation writes a range of pages to a page blob where the
     * contents are read from a URL.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url
     *
     * @param {string} sourceURL Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication
     * @param {number} sourceOffset The source offset to copy from. Pass 0 to copy from the beginning of source page blob
     * @param {number} destOffset Offset of destination page blob
     * @param {number} count Number of bytes to be uploaded from source page blob
     * @param {PageBlobUploadPagesFromURLOptions} [options={}]
     * @returns {Promise<PageBlobUploadPagesFromURLResponse>}
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.uploadPagesFromURL = function (sourceURL, sourceOffset, destOffset, count, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_36;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        options.sourceConditions = options.sourceConditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-uploadPagesFromURL", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        Object(_models__WEBPACK_IMPORTED_MODULE_10__["ensureCpkIfSpecified"])(options.customerProvidedKey, this.isHttps);
                        return [4 /*yield*/, this.pageBlobContext.uploadPagesFromURL(sourceURL, Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: sourceOffset, count: count }), 0, Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: destOffset, count: count }), {
                                abortSignal: options.abortSignal,
                                sourceContentMD5: options.sourceContentMD5,
                                sourceContentCrc64: options.sourceContentCrc64,
                                leaseAccessConditions: options.conditions,
                                sequenceNumberAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                sourceModifiedAccessConditions: {
                                    sourceIfMatch: options.sourceConditions.ifMatch,
                                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,
                                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,
                                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince
                                },
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_36 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_36.message
                        });
                        throw e_36;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Frees the specified pages from the page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/put-page
     *
     * @param {number} [offset] Starting byte position of the pages to clear.
     * @param {number} [count] Number of bytes to clear.
     * @param {PageBlobClearPagesOptions} [options] Options to the Page Blob Clear Pages operation.
     * @returns {Promise<PageBlobClearPagesResponse>} Response data for the Page Blob Clear Pages operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.clearPages = function (offset, count, options) {
        if (offset === void 0) { offset = 0; }
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_37;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-clearPages", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pageBlobContext.clearPages(0, {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                range: Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: offset, count: count }),
                                sequenceNumberAccessConditions: options.conditions,
                                cpkInfo: options.customerProvidedKey,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_37 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_37.message
                        });
                        throw e_37;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param {number} [offset] Starting byte position of the page ranges.
     * @param {number} [count] Number of bytes to get.
     * @param {PageBlobGetPageRangesOptions} [options] Options to the Page Blob Get Ranges operation.
     * @returns {Promise<PageBlobGetPageRangesResponse>} Response data for the Page Blob Get Ranges operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.getPageRanges = function (offset, count, options) {
        if (offset === void 0) { offset = 0; }
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_38;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-getPageRanges", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pageBlobContext
                                .getPageRanges({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                range: Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: offset, count: count }),
                                spanOptions: spanOptions
                            })
                                .then(_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__["rangeResponseFromModel"])];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_38 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_38.message
                        });
                        throw e_38;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param {number} offset Starting byte position of the page blob
     * @param {number} count Number of bytes to get ranges diff.
     * @param {string} prevSnapshot Timestamp of snapshot to retrieve the difference.
     * @param {PageBlobGetPageRangesDiffOptions} [options] Options to the Page Blob Get Page Ranges Diff operation.
     * @returns {Promise<PageBlobGetPageRangesDiffResponse>} Response data for the Page Blob Get Page Range Diff operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.getPageRangesDiff = function (offset, count, prevSnapshot, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_39;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-getPageRangesDiff", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pageBlobContext
                                .getPageRangesDiff({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                prevsnapshot: prevSnapshot,
                                range: Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: offset, count: count }),
                                spanOptions: spanOptions
                            })
                                .then(_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__["rangeResponseFromModel"])];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_39 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_39.message
                        });
                        throw e_39;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.
     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges
     *
     * @param {number} offset Starting byte position of the page blob
     * @param {number} count Number of bytes to get ranges diff.
     * @param {string} prevSnapshotUrl URL of snapshot to retrieve the difference.
     * @param {PageBlobGetPageRangesDiffOptions} [options] Options to the Page Blob Get Page Ranges Diff operation.
     * @returns {Promise<PageBlobGetPageRangesDiffResponse>} Response data for the Page Blob Get Page Range Diff operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.getPageRangesDiffForManagedDisks = function (offset, count, prevSnapshotUrl, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_40;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-GetPageRangesDiffForManagedDisks", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pageBlobContext
                                .getPageRangesDiff({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                prevSnapshotUrl: prevSnapshotUrl,
                                range: Object(_Range__WEBPACK_IMPORTED_MODULE_18__["rangeToString"])({ offset: offset, count: count }),
                                spanOptions: spanOptions
                            })
                                .then(_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__["rangeResponseFromModel"])];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_40 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_40.message
                        });
                        throw e_40;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Resizes the page blob to the specified size (which must be a multiple of 512).
     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties
     *
     * @param {number} size Target size
     * @param {PageBlobResizeOptions} [options] Options to the Page Blob Resize operation.
     * @returns {Promise<PageBlobResizeResponse>} Response data for the Page Blob Resize operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.resize = function (size, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_41;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-resize", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pageBlobContext.resize(size, {
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                encryptionScope: options.encryptionScope,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_41 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_41.message
                        });
                        throw e_41;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets a page blob's sequence number.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties
     *
     * @param {SequenceNumberActionType} sequenceNumberAction Indicates how the service should modify the blob's sequence number.
     * @param {number} [sequenceNumber] Required if sequenceNumberAction is max or update
     * @param {PageBlobUpdateSequenceNumberOptions} [options] Options to the Page Blob Update Sequence Number operation.
     * @returns {Promise<PageBlobUpdateSequenceNumberResponse>} Response data for the Page Blob Update Sequence Number operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.updateSequenceNumber = function (sequenceNumberAction, sequenceNumber, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_42;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-updateSequenceNumber", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {
                                abortSignal: options.abortSignal,
                                blobSequenceNumber: sequenceNumber,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_42 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_42.message
                        });
                        throw e_42;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.
     * The snapshot is copied such that only the differential changes between the previously
     * copied snapshot are transferred to the destination.
     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.
     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob
     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots
     *
     * @param {string} copySource Specifies the name of the source page blob snapshot. For example,
     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>
     * @param {PageBlobStartCopyIncrementalOptions} [options] Options to the Page Blob Copy Incremental operation.
     * @returns {Promise<PageBlobCopyIncrementalResponse>} Response data for the Page Blob Copy Incremental operation.
     * @memberof PageBlobClient
     */
    PageBlobClient.prototype.startCopyIncremental = function (copySource, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_43;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("PageBlobClient-startCopyIncremental", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.pageBlobContext.copyIncremental(copySource, {
                                abortSignal: options.abortSignal,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_43 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_43.message
                        });
                        throw e_43;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return PageBlobClient;
}(BlobClient));

/**
 * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.
 *
 * @export
 * @class BlobLeaseClient
 */
var BlobLeaseClient = /** @class */ (function () {
    /**
     * Creates an instance of BlobLeaseClient.
     * @param {(ContainerClient | BlobClient)} client The client to make the lease operation requests.
     * @param {string} leaseId Initial proposed lease id.
     * @memberof BlobLeaseClient
     */
    function BlobLeaseClient(client, leaseId) {
        var clientContext = new _generated_src_storageClient__WEBPACK_IMPORTED_MODULE_9__["StorageClientContext"](client.url, client.pipeline.toServiceClientOptions());
        this._url = client.url;
        if (client instanceof ContainerClient) {
            this._containerOrBlobOperation = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__["Container"](clientContext);
        }
        else {
            this._containerOrBlobOperation = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__["Blob"](clientContext);
        }
        if (!leaseId) {
            leaseId = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["generateUuid"])();
        }
        this._leaseId = leaseId;
    }
    Object.defineProperty(BlobLeaseClient.prototype, "leaseId", {
        /**
         * Gets the lease Id.
         *
         * @readonly
         * @memberof BlobLeaseClient
         * @type {string}
         */
        get: function () {
            return this._leaseId;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BlobLeaseClient.prototype, "url", {
        /**
         * Gets the url.
         *
         * @readonly
         * @memberof BlobLeaseClient
         * @type {string}
         */
        get: function () {
            return this._url;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Establishes and manages a lock on a container for delete operations, or on a blob
     * for write and delete operations.
     * The lock duration can be 15 to 60 seconds, or can be infinite.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param {number} duration Must be between 15 to 60 seconds, or infinite (-1)
     * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for acquire lease operation.
     * @memberof BlobLeaseClient
     */
    BlobLeaseClient.prototype.acquireLease = function (duration, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_44;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobLeaseClient-acquireLease", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._containerOrBlobOperation.acquireLease({
                                abortSignal: options.abortSignal,
                                duration: duration,
                                modifiedAccessConditions: options.conditions,
                                proposedLeaseId: this._leaseId,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_44 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_44.message
                        });
                        throw e_44;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To change the ID of the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param {string} proposedLeaseId the proposed new lease Id.
     * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for change lease operation.
     * @memberof BlobLeaseClient
     */
    BlobLeaseClient.prototype.changeLease = function (proposedLeaseId, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, response, e_45;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobLeaseClient-changeLease", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {
                                abortSignal: options.abortSignal,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2:
                        response = _b.sent();
                        this._leaseId = proposedLeaseId;
                        return [2 /*return*/, response];
                    case 3:
                        e_45 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_45.message
                        });
                        throw e_45;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To free the lease if it is no longer needed so that another client may
     * immediately acquire a lease against the container or the blob.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param {LeaseOperationOptions} [options={}] option to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for release lease operation.
     * @memberof BlobLeaseClient
     */
    BlobLeaseClient.prototype.releaseLease = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_46;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobLeaseClient-releaseLease", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._containerOrBlobOperation.releaseLease(this._leaseId, {
                                abortSignal: options.abortSignal,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_46 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_46.message
                        });
                        throw e_46;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To renew the lease.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @param {LeaseOperationOptions} [options={}] Optional option to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for renew lease operation.
     * @memberof BlobLeaseClient
     */
    BlobLeaseClient.prototype.renewLease = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_47;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobLeaseClient-renewLease", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this._containerOrBlobOperation.renewLease(this._leaseId, {
                                abortSignal: options.abortSignal,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_47 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_47.message
                        });
                        throw e_47;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * To end the lease but ensure that another client cannot acquire a new lease
     * until the current lease period has expired.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container
     * and
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob
     *
     * @static
     * @param {number} breakPeriod Break period
     * @param {LeaseOperationOptions} [options={}] Optional options to configure lease management operations.
     * @returns {Promise<LeaseOperationResponse>} Response data for break lease operation.
     * @memberof BlobLeaseClient
     */
    BlobLeaseClient.prototype.breakLease = function (breakPeriod, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, operationOptions, e_48;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("BlobLeaseClient-breakLease", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        operationOptions = {
                            abortSignal: options.abortSignal,
                            breakPeriod: breakPeriod,
                            modifiedAccessConditions: options.conditions,
                            spanOptions: spanOptions
                        };
                        return [4 /*yield*/, this._containerOrBlobOperation.breakLease(operationOptions)];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_48 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_48.message
                        });
                        throw e_48;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    return BlobLeaseClient;
}());

/**
 * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.
 *
 * @export
 * @class ContainerClient
 */
var ContainerClient = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ContainerClient, _super);
    function ContainerClient(urlOrConnectionString, credentialOrPipelineOrContainerName, options) {
        var _this = this;
        var pipeline;
        var url;
        options = options || {};
        if (credentialOrPipelineOrContainerName instanceof _Pipeline__WEBPACK_IMPORTED_MODULE_11__["Pipeline"]) {
            // (url: string, pipeline: Pipeline)
            url = urlOrConnectionString;
            pipeline = credentialOrPipelineOrContainerName;
        }
        else if ((_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"] && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"]) ||
            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"] ||
            Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isTokenCredential"])(credentialOrPipelineOrContainerName)) {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            url = urlOrConnectionString;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(credentialOrPipelineOrContainerName, options);
        }
        else if (!credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName !== "string") {
            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)
            // The second parameter is undefined. Use anonymous credential.
            url = urlOrConnectionString;
            pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
        }
        else if (credentialOrPipelineOrContainerName &&
            typeof credentialOrPipelineOrContainerName === "string") {
            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)
            var containerName = credentialOrPipelineOrContainerName;
            var extractedCreds = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["extractConnectionStringParts"])(urlOrConnectionString);
            if (extractedCreds.kind === "AccountConnString") {
                if (_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["isNode"]) {
                    var sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_7__["StorageSharedKeyCredential"](extractedCreds.accountName, extractedCreds.accountKey);
                    url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName));
                    options.proxyOptions = Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["getDefaultProxySettings"])(extractedCreds.proxyUri);
                    pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(sharedKeyCredential, options);
                }
                else {
                    throw new Error("Account connection string is only supported in Node.js environment");
                }
            }
            else if (extractedCreds.kind === "SASConnString") {
                url =
                    Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(extractedCreds.url, encodeURIComponent(containerName)) +
                        "?" +
                        extractedCreds.accountSas;
                pipeline = Object(_Pipeline__WEBPACK_IMPORTED_MODULE_11__["newPipeline"])(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__["AnonymousCredential"](), options);
            }
            else {
                throw new Error("Connection string must be either an Account connection string or a SAS connection string");
            }
        }
        else {
            throw new Error("Expecting non-empty strings for containerName parameter");
        }
        _this = _super.call(this, url, pipeline) || this;
        _this._containerName = _this.getContainerNameFromUrl();
        _this.containerContext = new _generated_src_operations__WEBPACK_IMPORTED_MODULE_8__["Container"](_this.storageClientContext);
        return _this;
    }
    Object.defineProperty(ContainerClient.prototype, "containerName", {
        /**
         * The name of the container.
         */
        get: function () {
            return this._containerName;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Creates a new container under the specified account. If the container with
     * the same name already exists, the operation fails.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
     *
     * @param {ContainerCreateOptions} [options] Options to Container Create operation.
     * @returns {Promise<ContainerCreateResponse>}
     * @memberof ContainerClient
     *
     * Example usage:
     *
     * ```js
     * const containerClient = blobServiceClient.getContainerClient("<container name>");
     * const createContainerResponse = await containerClient.create();
     * console.log("Container was created successfully", createContainerResponse.requestId);
     * ```
     */
    ContainerClient.prototype.create = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_49;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-create", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.containerContext.create(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { spanOptions: spanOptions }))];
                    case 2: 
                    // Spread operator in destructuring assignments,
                    // this will filter out unwanted properties from the response object into result object
                    return [2 /*return*/, _b.sent()];
                    case 3:
                        e_49 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_49.message
                        });
                        throw e_49;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Creates a new container under the specified account. If the container with
     * the same name already exists, it is not changed.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container
     *
     * @param {ContainerCreateOptions} [options]
     * @returns {Promise<ContainerCreateIfNotExistsResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.createIfNotExists = function (options) {
        var _a, _b;
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _c, span, spanOptions, res, e_50;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _c = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-createIfNotExists", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.create(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        res = _d.sent();
                        return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: true }, res)];
                    case 3:
                        e_50 = _d.sent();
                        if (((_a = e_50.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerAlreadyExists") {
                            span.setStatus({
                                code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].ALREADY_EXISTS,
                                message: "Expected exception when creating a container only if it does not already exist."
                            });
                            return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: false }, (_b = e_50.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e_50.response })];
                        }
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_50.message
                        });
                        throw e_50;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns true if the Azure container resource represented by this client exists; false otherwise.
     *
     * NOTE: use this function with care since an existing container might be deleted by other clients or
     * applications. Vice versa new containers with the same name might be added by other clients or
     * applications after this function completes.
     *
     * @param {ContainerExistsOptions} [options={}]
     * @returns {Promise<boolean>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.exists = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_51;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-exists", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.getProperties({
                                abortSignal: options.abortSignal,
                                tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions })
                            })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 3:
                        e_51 = _b.sent();
                        if (e_51.statusCode === 404) {
                            span.setStatus({
                                code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].NOT_FOUND,
                                message: "Expected exception when checking container existence"
                            });
                            return [2 /*return*/, false];
                        }
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_51.message
                        });
                        throw e_51;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Creates a {@link BlobClient}
     *
     * @param {string} blobName A blob name
     * @returns {BlobClient} A new BlobClient object for the given blob name.
     * @memberof ContainerClient
     */
    ContainerClient.prototype.getBlobClient = function (blobName) {
        return new BlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(this.url, encodeURIComponent(blobName)), this.pipeline);
    };
    /**
     * Creates an {@link AppendBlobClient}
     *
     * @param {string} blobName An append blob name
     * @returns {AppendBlobClient}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.getAppendBlobClient = function (blobName) {
        return new AppendBlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(this.url, encodeURIComponent(blobName)), this.pipeline);
    };
    /**
     * Creates a {@link BlockBlobClient}
     *
     * @param {string} blobName A block blob name
     * @returns {BlockBlobClient}
     * @memberof ContainerClient
     *
     * Example usage:
     *
     * ```js
     * const content = "Hello world!";
     *
     * const blockBlobClient = containerClient.getBlockBlobClient("<blob name>");
     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);
     * ```
     */
    ContainerClient.prototype.getBlockBlobClient = function (blobName) {
        return new BlockBlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(this.url, encodeURIComponent(blobName)), this.pipeline);
    };
    /**
     * Creates a {@link PageBlobClient}
     *
     * @param {string} blobName A page blob name
     * @returns {PageBlobClient}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.getPageBlobClient = function (blobName) {
        return new PageBlobClient(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["appendToURLPath"])(this.url, encodeURIComponent(blobName)), this.pipeline);
    };
    /**
     * Returns all user-defined metadata and system properties for the specified
     * container. The data returned does not include the container's list of blobs.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties
     *
     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if
     * they originally contained uppercase characters. This differs from the metadata keys returned by
     * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which
     * will retain their original casing.
     *
     * @param {ContainerGetPropertiesOptions} [options] Options to Container Get Properties operation.
     * @returns {Promise<ContainerGetPropertiesResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.getProperties = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_52;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options.conditions) {
                            options.conditions = {};
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-getProperties", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.containerContext.getProperties(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ abortSignal: options.abortSignal }, options.conditions), { spanOptions: spanOptions }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_52 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_52.message
                        });
                        throw e_52;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Marks the specified container for deletion. The container and any blobs
     * contained within it are later deleted during garbage collection.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
     *
     * @param {ContainerDeleteMethodOptions} [options] Options to Container Delete operation.
     * @returns {Promise<ContainerDeleteResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.delete = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_53;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options.conditions) {
                            options.conditions = {};
                        }
                        if ((options.conditions.ifMatch && options.conditions.ifMatch !== _utils_constants__WEBPACK_IMPORTED_MODULE_12__["ETagNone"]) ||
                            (options.conditions.ifNoneMatch && options.conditions.ifNoneMatch !== _utils_constants__WEBPACK_IMPORTED_MODULE_12__["ETagNone"])) {
                            throw new RangeError("the IfMatch and IfNoneMatch access conditions must have their default\
        values because they are ignored by the service");
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-delete", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.containerContext.deleteMethod({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_53 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_53.message
                        });
                        throw e_53;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Marks the specified container for deletion if it exists. The container and any blobs
     * contained within it are later deleted during garbage collection.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
     *
     * @param {ContainerDeleteMethodOptions} [options] Options to Container Delete operation.
     * @returns {Promise<ContainerDeleteIfExistsResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.deleteIfExists = function (options) {
        var _a, _b;
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _c, span, spanOptions, res, e_54;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _c = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-deleteIfExists", options.tracingOptions), span = _c.span, spanOptions = _c.spanOptions;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.delete(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        res = _d.sent();
                        return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: true }, res)];
                    case 3:
                        e_54 = _d.sent();
                        if (((_a = e_54.details) === null || _a === void 0 ? void 0 : _a.errorCode) === "ContainerNotFound") {
                            span.setStatus({
                                code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].NOT_FOUND,
                                message: "Expected exception when deleting a container only if it exists."
                            });
                            return [2 /*return*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ succeeded: false }, (_b = e_54.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e_54.response })];
                        }
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_54.message
                        });
                        throw e_54;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets one or more user-defined name-value pairs for the specified container.
     *
     * If no option provided, or no metadata defined in the parameter, the container
     * metadata will be removed.
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata
     *
     * @param {Metadata} [metadata] Replace existing metadata with this value.
     *                            If no value provided the existing metadata will be removed.
     * @param {ContainerSetMetadataOptions} [options] Options to Container Set Metadata operation.
     * @returns {Promise<ContainerSetMetadataResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.setMetadata = function (metadata, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, e_55;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options.conditions) {
                            options.conditions = {};
                        }
                        if (options.conditions.ifUnmodifiedSince ||
                            (options.conditions.ifMatch && options.conditions.ifMatch !== _utils_constants__WEBPACK_IMPORTED_MODULE_12__["ETagNone"]) ||
                            (options.conditions.ifNoneMatch && options.conditions.ifNoneMatch !== _utils_constants__WEBPACK_IMPORTED_MODULE_12__["ETagNone"])) {
                            throw new RangeError("the IfUnmodifiedSince, IfMatch, and IfNoneMatch must have their default values\
        because they are ignored by the blob service");
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-setMetadata", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.containerContext.setMetadata({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                metadata: metadata,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_55 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_55.message
                        });
                        throw e_55;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Gets the permissions for the specified container. The permissions indicate
     * whether container data may be accessed publicly.
     *
     * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.
     * For example, new Date("2018-12-31T03:44:23.8827891Z").toISOString() will get "2018-12-31T03:44:23.882Z".
     *
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl
     *
     * @param {ContainerGetAccessPolicyOptions} [options] Options to Container Get Access Policy operation.
     * @returns {Promise<ContainerGetAccessPolicyResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.getAccessPolicy = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, response, res, _i, response_1, identifier, accessPolicy, e_56;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!options.conditions) {
                            options.conditions = {};
                        }
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-getAccessPolicy", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.containerContext.getAccessPolicy({
                                abortSignal: options.abortSignal,
                                leaseAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2:
                        response = _b.sent();
                        res = {
                            _response: response._response,
                            blobPublicAccess: response.blobPublicAccess,
                            date: response.date,
                            etag: response.etag,
                            errorCode: response.errorCode,
                            lastModified: response.lastModified,
                            requestId: response.requestId,
                            clientRequestId: response.clientRequestId,
                            signedIdentifiers: [],
                            version: response.version
                        };
                        for (_i = 0, response_1 = response; _i < response_1.length; _i++) {
                            identifier = response_1[_i];
                            accessPolicy = undefined;
                            if (identifier.accessPolicy) {
                                accessPolicy = {
                                    permissions: identifier.accessPolicy.permissions
                                };
                                if (identifier.accessPolicy.expiresOn) {
                                    accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);
                                }
                                if (identifier.accessPolicy.startsOn) {
                                    accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);
                                }
                            }
                            res.signedIdentifiers.push({
                                accessPolicy: accessPolicy,
                                id: identifier.id
                            });
                        }
                        return [2 /*return*/, res];
                    case 3:
                        e_56 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_56.message
                        });
                        throw e_56;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sets the permissions for the specified container. The permissions indicate
     * whether blobs in a container may be accessed publicly.
     *
     * When you set permissions for a container, the existing permissions are replaced.
     * If no access or containerAcl provided, the existing container ACL will be
     * removed.
     *
     * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.
     * During this interval, a shared access signature that is associated with the stored access policy will
     * fail with status code 403 (Forbidden), until the access policy becomes active.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl
     *
     * @param {PublicAccessType} [access] The level of public access to data in the container.
     * @param {SignedIdentifier[]} [containerAcl] Array of elements each having a unique Id and details of the access policy.
     * @param {ContainerSetAccessPolicyOptions} [options] Options to Container Set Access Policy operation.
     * @returns {Promise<ContainerSetAccessPolicyResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.setAccessPolicy = function (access, containerAcl, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, acl, _i, _b, identifier, e_57;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        options.conditions = options.conditions || {};
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-setAccessPolicy", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 3, 4, 5]);
                        acl = [];
                        for (_i = 0, _b = containerAcl || []; _i < _b.length; _i++) {
                            identifier = _b[_i];
                            acl.push({
                                accessPolicy: {
                                    expiresOn: identifier.accessPolicy.expiresOn
                                        ? Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["truncatedISO8061Date"])(identifier.accessPolicy.expiresOn)
                                        : "",
                                    permissions: identifier.accessPolicy.permissions,
                                    startsOn: identifier.accessPolicy.startsOn
                                        ? Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["truncatedISO8061Date"])(identifier.accessPolicy.startsOn)
                                        : ""
                                },
                                id: identifier.id
                            });
                        }
                        return [4 /*yield*/, this.containerContext.setAccessPolicy({
                                abortSignal: options.abortSignal,
                                access: access,
                                containerAcl: acl,
                                leaseAccessConditions: options.conditions,
                                modifiedAccessConditions: options.conditions,
                                spanOptions: spanOptions
                            })];
                    case 2: return [2 /*return*/, _c.sent()];
                    case 3:
                        e_57 = _c.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_57.message
                        });
                        throw e_57;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get a {@link BlobLeaseClient} that manages leases on the container.
     *
     * @param {string} [proposeLeaseId] Initial proposed lease Id.
     * @returns {BlobLeaseClient} A new BlobLeaseClient object for managing leases on the container.
     * @memberof ContainerClient
     */
    ContainerClient.prototype.getBlobLeaseClient = function (proposeLeaseId) {
        return new BlobLeaseClient(this, proposeLeaseId);
    };
    /**
     * Creates a new block blob, or updates the content of an existing block blob.
     *
     * Updating an existing block blob overwrites any existing metadata on the blob.
     * Partial updates are not supported; the content of the existing blob is
     * overwritten with the new content. To perform a partial update of a block blob's,
     * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.
     *
     * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},
     * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better
     * performance with concurrency uploading.
     *
     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob
     *
     * @param {string} blobName Name of the block blob to create or update.
     * @param {HttpRequestBody} body Blob, string, ArrayBuffer, ArrayBufferView or a function
     *                               which returns a new Readable stream whose offset is from data source beginning.
     * @param {number} contentLength Length of body in bytes. Use Buffer.byteLength() to calculate body length for a
     *                               string including non non-Base64/Hex-encoded characters.
     * @param {BlockBlobUploadOptions} [options] Options to configure the Block Blob Upload operation.
     * @returns {Promise<{ blockBlobClient: BlockBlobClient; response: BlockBlobUploadResponse }>} Block Blob upload response data and the corresponding BlockBlobClient instance.
     * @memberof ContainerClient
     */
    ContainerClient.prototype.uploadBlockBlob = function (blobName, body, contentLength, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, blockBlobClient, response, e_58;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-uploadBlockBlob", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        blockBlobClient = this.getBlockBlobClient(blobName);
                        return [4 /*yield*/, blockBlobClient.upload(body, contentLength, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2:
                        response = _b.sent();
                        return [2 /*return*/, {
                                blockBlobClient: blockBlobClient,
                                response: response
                            }];
                    case 3:
                        e_58 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_58.message
                        });
                        throw e_58;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Marks the specified blob or snapshot for deletion. The blob is later deleted
     * during garbage collection. Note that in order to delete a blob, you must delete
     * all of its snapshots. You can delete both at the same time with the Delete
     * Blob operation.
     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob
     *
     * @param {string} blobName
     * @param {ContainerDeleteBlobOptions} [options] Options to Blob Delete operation.
     * @returns {Promise<BlobDeleteResponse>} Block blob deletion response data.
     * @memberof ContainerClient
     */
    ContainerClient.prototype.deleteBlob = function (blobName, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, blobClient, e_59;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-deleteBlob", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        blobClient = this.getBlobClient(blobName);
                        if (options.versionId) {
                            blobClient = blobClient.withVersion(options.versionId);
                        }
                        return [4 /*yield*/, blobClient.delete(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { tracingOptions: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options.tracingOptions), { spanOptions: spanOptions }) }))];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3:
                        e_59 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_59.message
                        });
                        throw e_59;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * listBlobFlatSegment returns a single segment of blobs starting from the
     * specified Marker. Use an empty Marker to start enumeration from the beginning.
     * After getting a segment, process it, and then call listBlobsFlatSegment again
     * (passing the the previously-returned Marker) to get the next segment.
     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
     *
     * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.
     * @param {ContainerListBlobsSegmentOptions} [options] Options to Container List Blob Flat Segment operation.
     * @returns {Promise<ContainerListBlobFlatSegmentResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.listBlobFlatSegment = function (marker, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, resposne, wrappedResponse, e_60;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-listBlobFlatSegment", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.containerContext.listBlobFlatSegment(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ marker: marker }, options), { spanOptions: spanOptions }))];
                    case 2:
                        resposne = _b.sent();
                        wrappedResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, resposne), { segment: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, resposne.segment), { blobItems: resposne.segment.blobItems.map(function (blobItemInteral) {
                                    var blobItem = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, blobItemInteral), { tags: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toTags"])(blobItemInteral.blobTags) });
                                    return blobItem;
                                }) }) });
                        return [2 /*return*/, wrappedResponse];
                    case 3:
                        e_60 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_60.message
                        });
                        throw e_60;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * listBlobHierarchySegment returns a single segment of blobs starting from
     * the specified Marker. Use an empty Marker to start enumeration from the
     * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment
     * again (passing the the previously-returned Marker) to get the next segment.
     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs
     *
     * @param {string} delimiter The character or string used to define the virtual hierarchy
     * @param {string} [marker] A string value that identifies the portion of the list to be returned with the next list operation.
     * @param {ContainerListBlobsSegmentOptions} [options] Options to Container List Blob Hierarchy Segment operation.
     * @returns {Promise<ContainerListBlobHierarchySegmentResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.listBlobHierarchySegment = function (delimiter, marker, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _a, span, spanOptions, resposne, wrappedResponse, e_61;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = Object(_utils_tracing__WEBPACK_IMPORTED_MODULE_16__["createSpan"])("ContainerClient-listBlobHierarchySegment", options.tracingOptions), span = _a.span, spanOptions = _a.spanOptions;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, this.containerContext.listBlobHierarchySegment(delimiter, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ marker: marker }, options), { spanOptions: spanOptions }))];
                    case 2:
                        resposne = _b.sent();
                        wrappedResponse = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, resposne), { segment: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, resposne.segment), { blobItems: resposne.segment.blobItems.map(function (blobItemInteral) {
                                    var blobItem = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, blobItemInteral), { tags: Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__["toTags"])(blobItemInteral.blobTags) });
                                    return blobItem;
                                }) }) });
                        return [2 /*return*/, wrappedResponse];
                    case 3:
                        e_61 = _b.sent();
                        span.setStatus({
                            code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__["CanonicalCode"].UNKNOWN,
                            message: e_61.message
                        });
                        throw e_61;
                    case 4:
                        span.end();
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse
     *
     * @private
     * @param {string} [marker] A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.
     * @returns {AsyncIterableIterator<ContainerListBlobFlatSegmentResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.listSegments = function (marker, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncGenerator"])(this, arguments, function listSegments_1() {
            var listBlobsFlatSegmentResponse;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!!marker || marker === undefined)) return [3 /*break*/, 7];
                        _a.label = 1;
                    case 1: return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(this.listBlobFlatSegment(marker, options))];
                    case 2:
                        listBlobsFlatSegmentResponse = _a.sent();
                        marker = listBlobsFlatSegmentResponse.continuationToken;
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(listBlobsFlatSegmentResponse)];
                    case 3: return [4 /*yield*/, tslib__WEBPACK_IMPORTED_MODULE_0__["__await"].apply(void 0, [_a.sent()])];
                    case 4: return [4 /*yield*/, _a.sent()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        if (marker) return [3 /*break*/, 1];
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an AsyncIterableIterator of {@link BlobItem} objects
     *
     * @private
     * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.
     * @returns {AsyncIterableIterator<BlobItem>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.listItems = function (options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncGenerator"])(this, arguments, function listItems_1() {
            var marker, _a, _b, listBlobsFlatSegmentResponse, e_62_1;
            var e_62, _c;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 7, 8, 13]);
                        _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncValues"])(this.listSegments(marker, options));
                        _d.label = 1;
                    case 1: return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(_a.next())];
                    case 2:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                        listBlobsFlatSegmentResponse = _b.value;
                        return [5 /*yield**/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncDelegator"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncValues"])(listBlobsFlatSegmentResponse.segment.blobItems)))];
                    case 3: return [4 /*yield*/, tslib__WEBPACK_IMPORTED_MODULE_0__["__await"].apply(void 0, [_d.sent()])];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5: return [3 /*break*/, 1];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_62_1 = _d.sent();
                        e_62 = { error: e_62_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _d.trys.push([8, , 11, 12]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(_c.call(_a))];
                    case 9:
                        _d.sent();
                        _d.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_62) throw e_62.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an async iterable iterator to list all the blobs
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * // Get the containerClient before you run these snippets,
     * // Can be obtained from `blobServiceClient.getContainerClient("<your-container-name>");`
     * let i = 1;
     * for await (const blob of containerClient.listBlobsFlat()) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let i = 1;
     * let iter = containerClient.listBlobsFlat();
     * let blobItem = await iter.next();
     * while (!blobItem.done) {
     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);
     *   blobItem = await iter.next();
     * }
     * ```
     *
     * Example using `byPage()`:
     *
     * ```js
     * // passing optional maxPageSize in the page settings
     * let i = 1;
     * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`Blob ${i++}: ${blob.name}`);
     *   }
     * }
     * ```
     *
     * Example using paging with a marker:
     *
     * ```js
     * let i = 1;
     * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });
     * let response = (await iterator.next()).value;
     *
     * // Prints 2 blob names
     * for (const blob of response.segment.blobItems) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     *
     * // Gets next marker
     * let marker = response.continuationToken;
     *
     * // Passing next marker as continuationToken
     *
     * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });
     * response = (await iterator.next()).value;
     *
     * // Prints 10 blob names
     * for (const blob of response.segment.blobItems) {
     *   console.log(`Blob ${i++}: ${blob.name}`);
     * }
     * ```
     *
     * @param {ContainerListBlobsOptions} [options={}] Options to list blobs.
     * @returns {PagedAsyncIterableIterator<BlobItem, ContainerListBlobFlatSegmentResponse>} An asyncIterableIterator that supports paging.
     * @memberof ContainerClient
     */
    ContainerClient.prototype.listBlobsFlat = function (options) {
        var _a;
        var _this = this;
        if (options === void 0) { options = {}; }
        var include = [];
        if (options.includeCopy) {
            include.push("copy");
        }
        if (options.includeDeleted) {
            include.push("deleted");
        }
        if (options.includeMetadata) {
            include.push("metadata");
        }
        if (options.includeSnapshots) {
            include.push("snapshots");
        }
        if (options.includeVersions) {
            include.push("versions");
        }
        if (options.includeUncommitedBlobs) {
            include.push("uncommittedblobs");
        }
        if (options.includeTags) {
            include.push("tags");
        }
        if (options.prefix === "") {
            options.prefix = undefined;
        }
        var updatedOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), (include.length > 0 ? { include: include } : {}));
        // AsyncIterableIterator to iterate over blobs
        var iter = this.listItems(updatedOptions);
        return _a = {
                /**
                 * @member {Promise} [next] The next method, part of the iteration protocol
                 */
                next: function () {
                    return iter.next();
                }
            },
            /**
             * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol
             */
            _a[Symbol.asyncIterator] = function () {
                return this;
            },
            /**
             * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time
             */
            _a.byPage = function (settings) {
                if (settings === void 0) { settings = {}; }
                return _this.listSegments(settings.continuationToken, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ maxPageSize: settings.maxPageSize }, updatedOptions));
            },
            _a;
    };
    /**
     * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse
     *
     * @private
     * @param {string} delimiter The character or string used to define the virtual hierarchy
     * @param {string} [marker] A string value that identifies the portion of
     *                          the list of blobs to be returned with the next listing operation. The
     *                          operation returns the ContinuationToken value within the response body if the
     *                          listing operation did not return all blobs remaining to be listed
     *                          with the current page. The ContinuationToken value can be used as the value for
     *                          the marker parameter in a subsequent call to request the next page of list
     *                          items. The marker value is opaque to the client.
     * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.
     * @returns {AsyncIterableIterator<ContainerListBlobHierarchySegmentResponse>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.listHierarchySegments = function (delimiter, marker, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncGenerator"])(this, arguments, function listHierarchySegments_1() {
            var listBlobsHierarchySegmentResponse;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(!!marker || marker === undefined)) return [3 /*break*/, 7];
                        _a.label = 1;
                    case 1: return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(this.listBlobHierarchySegment(delimiter, marker, options))];
                    case 2:
                        listBlobsHierarchySegmentResponse = _a.sent();
                        marker = listBlobsHierarchySegmentResponse.continuationToken;
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(listBlobsHierarchySegmentResponse)];
                    case 3: return [4 /*yield*/, tslib__WEBPACK_IMPORTED_MODULE_0__["__await"].apply(void 0, [_a.sent()])];
                    case 4: return [4 /*yield*/, _a.sent()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        if (marker) return [3 /*break*/, 1];
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.
     *
     * @private
     * @param {string} delimiter The character or string used to define the virtual hierarchy
     * @param {ContainerListBlobsSegmentOptions} [options] Options to list blobs operation.
     * @returns {AsyncIterableIterator<{ kind: "prefix" } & BlobPrefix | { kind: "blob" } & BlobItem>}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.listItemsByHierarchy = function (delimiter, options) {
        if (options === void 0) { options = {}; }
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncGenerator"])(this, arguments, function listItemsByHierarchy_1() {
            var marker, _a, _b, listBlobsHierarchySegmentResponse, segment, _i, _c, prefix, _d, _e, blob, e_63_1;
            var e_63, _f;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _g.trys.push([0, 14, 15, 20]);
                        _a = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__asyncValues"])(this.listHierarchySegments(delimiter, marker, options));
                        _g.label = 1;
                    case 1: return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(_a.next())];
                    case 2:
                        if (!(_b = _g.sent(), !_b.done)) return [3 /*break*/, 13];
                        listBlobsHierarchySegmentResponse = _b.value;
                        segment = listBlobsHierarchySegmentResponse.segment;
                        if (!segment.blobPrefixes) return [3 /*break*/, 7];
                        _i = 0, _c = segment.blobPrefixes;
                        _g.label = 3;
                    case 3:
                        if (!(_i < _c.length)) return [3 /*break*/, 7];
                        prefix = _c[_i];
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ kind: "prefix" }, prefix))];
                    case 4: return [4 /*yield*/, _g.sent()];
                    case 5:
                        _g.sent();
                        _g.label = 6;
                    case 6:
                        _i++;
                        return [3 /*break*/, 3];
                    case 7:
                        _d = 0, _e = segment.blobItems;
                        _g.label = 8;
                    case 8:
                        if (!(_d < _e.length)) return [3 /*break*/, 12];
                        blob = _e[_d];
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ kind: "blob" }, blob))];
                    case 9: return [4 /*yield*/, _g.sent()];
                    case 10:
                        _g.sent();
                        _g.label = 11;
                    case 11:
                        _d++;
                        return [3 /*break*/, 8];
                    case 12: return [3 /*break*/, 1];
                    case 13: return [3 /*break*/, 20];
                    case 14:
                        e_63_1 = _g.sent();
                        e_63 = { error: e_63_1 };
                        return [3 /*break*/, 20];
                    case 15:
                        _g.trys.push([15, , 18, 19]);
                        if (!(_b && !_b.done && (_f = _a.return))) return [3 /*break*/, 17];
                        return [4 /*yield*/, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__await"])(_f.call(_a))];
                    case 16:
                        _g.sent();
                        _g.label = 17;
                    case 17: return [3 /*break*/, 19];
                    case 18:
                        if (e_63) throw e_63.error;
                        return [7 /*endfinally*/];
                    case 19: return [7 /*endfinally*/];
                    case 20: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns an async iterable iterator to list all the blobs by hierarchy.
     * under the specified account.
     *
     * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.
     *
     * Example using `for await` syntax:
     *
     * ```js
     * for await (const item of containerClient.listBlobsByHierarchy("/")) {
     *   if (item.kind === "prefix") {
     *     console.log(`\tBlobPrefix: ${item.name}`);
     *   } else {
     *     console.log(`\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);
     *   }
     * }
     * ```
     *
     * Example using `iter.next()`:
     *
     * ```js
     * let iter = containerClient.listBlobsByHierarchy("/", { prefix: "prefix1/" });
     * let entity = await iter.next();
     * while (!entity.done) {
     *   let item = entity.value;
     *   if (item.kind === "prefix") {
     *     console.log(`\tBlobPrefix: ${item.name}`);
     *   } else {
     *     console.log(`\tBlobItem: name - ${item.name}, last modified - ${item.properties.lastModified}`);
     *   }
     *   entity = await iter.next();
     * }
     * ```js
     *
     * Example using `byPage()`:
     *
     * ```js
     * console.log("Listing blobs by hierarchy by page");
     * for await (const response of containerClient.listBlobsByHierarchy("/").byPage()) {
     *   const segment = response.segment;
     *   if (segment.blobPrefixes) {
     *     for (const prefix of segment.blobPrefixes) {
     *       console.log(`\tBlobPrefix: ${prefix.name}`);
     *     }
     *   }
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);
     *   }
     * }
     * ```
     *
     * Example using paging with a max page size:
     *
     * ```js
     * console.log("Listing blobs by hierarchy by page, specifying a prefix and a max page size");
     *
     * let i = 1;
     * for await (const response of containerClient.listBlobsByHierarchy("/", { prefix: "prefix2/sub1/"}).byPage({ maxPageSize: 2 })) {
     *   console.log(`Page ${i++}`);
     *   const segment = response.segment;
     *
     *   if (segment.blobPrefixes) {
     *     for (const prefix of segment.blobPrefixes) {
     *       console.log(`\tBlobPrefix: ${prefix.name}`);
     *     }
     *   }
     *
     *   for (const blob of response.segment.blobItems) {
     *     console.log(`\tBlobItem: name - ${blob.name}, last modified - ${blob.properties.lastModified}`);
     *   }
     * }
     * ```
     *
     * @param {string} delimiter The character or string used to define the virtual hierarchy
     * @param {ContainerListBlobsOptions} [options={}] Options to list blobs operation.
     * @returns {(PagedAsyncIterableIterator<
     *   { kind: "prefix" } & BlobPrefix | { kind: "blob" } & BlobItem,
     *     ContainerListBlobHierarchySegmentResponse
     *   >)}
     * @memberof ContainerClient
     */
    ContainerClient.prototype.listBlobsByHierarchy = function (delimiter, options) {
        var _a;
        var _this = this;
        if (options === void 0) { options = {}; }
        var include = [];
        if (options.includeCopy) {
            include.push("copy");
        }
        if (options.includeDeleted) {
            include.push("deleted");
        }
        if (options.includeMetadata) {
            include.push("metadata");
        }
        if (options.includeSnapshots) {
            include.push("snapshots");
        }
        if (options.includeVersions) {
            include.push("versions");
        }
        if (options.includeUncommitedBlobs) {
            include.push("uncommittedblobs");
        }
        if (options.includeTags) {
            include.push("tags");
        }
        if (options.prefix === "") {
            options.prefix = undefined;
        }
        var updatedOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), (include.length > 0 ? { include: include } : {}));
        // AsyncIterableIterator to iterate over blob prefixes and blobs
        var iter = this.listItemsByHierarchy(delimiter, updatedOptions);
        return _a = {
                /**
                 * @member {Promise} [next] The next method, part of the iteration protocol
                 */
                next: function () {
                    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
                        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                            return [2 /*return*/, iter.next()];
                        });
                    });
                }
            },
            /**
             * @member {Symbol} [asyncIterator] The connection to the async iterator, part of the iteration protocol
             */
            _a[Symbol.asyncIterator] = function () {
                return this;
            },
            /**
             * @member {Function} [byPage] Return an AsyncIterableIterator that works a page at a time
             */
            _a.byPage = function (settings) {
                if (settings === void 0) { settings = {}; }
                return _this.listHierarchySegments(delimiter, settings.continuationToken, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({ maxPageSize: settings.maxPageSize }, updatedOptions));
            },
            _a;
    };
    ContainerClient.prototype.getContainerNameFromUrl = function () {
        var containerName;
        try {
            //  URL may look like the following
            // "https://myaccount.blob.core.windows.net/mycontainer?sasString";
            // "https://myaccount.blob.core.windows.net/mycontainer";
            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`
            // http://localhost:10001/devstoreaccount1/containername
            var parsedUrl = _azure_core_http__WEBPACK_IMPORTED_MODULE_2__["URLBuilder"].parse(this.url);
            if (parsedUrl.getHost().split(".")[1] === "blob") {
                // "https://myaccount.blob.core.windows.net/containername".
                // .getPath() -> /containername
                containerName = parsedUrl.getPath().split("/")[1];
            }
            else {
                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername
                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername
                // .getPath() -> /devstoreaccount1/containername
                containerName = parsedUrl.getPath().split("/")[2];
            }
            // decode the encoded containerName - to get all the special characters that might be present in it
            containerName = decodeURIComponent(containerName);
            if (!containerName) {
                throw new Error("Provided containerName is invalid.");
            }
            return containerName;
        }
        catch (error) {
            throw new Error("Unable to extract containerName with provided information.");
        }
    };
    return ContainerClient;
}(_StorageClient__WEBPACK_IMPORTED_MODULE_17__["StorageClient"]));

//# sourceMappingURL=Clients.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/buffer/index.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js ***!
  \*********************************************************************************************/
/*! exports provided: rangeResponseFromModel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeResponseFromModel", function() { return rangeResponseFromModel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

/**
 * Function that converts PageRange and ClearRange to a common Range object.
 * PageRange and ClearRange have start and end while Range offset and count
 * this function normalizes to Range.
 * @param response Model PageBlob Range response
 */
function rangeResponseFromModel(response) {
    var pageRange = (response._response.parsedBody.pageRange || []).map(function (x) { return ({
        offset: x.start,
        count: x.end - x.start
    }); });
    var clearRange = (response._response.parsedBody.clearRange || []).map(function (x) { return ({
        offset: x.start,
        count: x.end - x.start
    }); });
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, response), { pageRange: pageRange,
        clearRange: clearRange, _response: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, response._response), { parsedBody: {
                pageRange: pageRange,
                clearRange: clearRange
            } }) });
}
//# sourceMappingURL=PageBlobRangeResponse.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js ***!
  \********************************************************************************/
/*! exports provided: BaseRequestPolicy, StorageOAuthScopes, deserializationPolicy, HttpHeaders, WebResource, RequestPolicyOptions, Pipeline, newPipeline */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pipeline", function() { return Pipeline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newPipeline", function() { return newPipeline; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseRequestPolicy", function() { return _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deserializationPolicy", function() { return _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["deserializationPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpHeaders", function() { return _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebResource", function() { return _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["WebResource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequestPolicyOptions", function() { return _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["RequestPolicyOptions"]; });

/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./log */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js");
/* harmony import */ var _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageBrowserPolicyFactory */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js");
/* harmony import */ var _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StorageRetryPolicyFactory */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js");
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageOAuthScopes", function() { return _utils_constants__WEBPACK_IMPORTED_MODULE_5__["StorageOAuthScopes"]; });

/* harmony import */ var _TelemetryPolicyFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TelemetryPolicyFactory */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js");
/* harmony import */ var _utils_cache__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/cache */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.








// Export following interfaces and types for customers who want to implement their
// own RequestPolicy or HTTPClient

/**
 * A Pipeline class containing HTTP request policies.
 * You can create a default Pipeline by calling {@link newPipeline}.
 * Or you can create a Pipeline with your own policies by the constructor of Pipeline.
 *
 * Refer to {@link newPipeline} and provided policies before implementing your
 * customized Pipeline.
 *
 * @export
 * @class Pipeline
 */
var Pipeline = /** @class */ (function () {
    /**
     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.
     *
     * @param {RequestPolicyFactory[]} factories
     * @param {PipelineOptions} [options={}]
     * @memberof Pipeline
     */
    function Pipeline(factories, options) {
        if (options === void 0) { options = {}; }
        this.factories = factories;
        // when options.httpClient is not specified, passing in a DefaultHttpClient instance to
        // avoid each client creating its own http client.
        this.options = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), { httpClient: options.httpClient || Object(_utils_cache__WEBPACK_IMPORTED_MODULE_7__["getCachedDefaultHttpClient"])() });
    }
    /**
     * Transfer Pipeline object to ServiceClientOptions object which is required by
     * ServiceClient constructor.
     *
     * @returns {ServiceClientOptions} The ServiceClientOptions object from this Pipeline.
     * @memberof Pipeline
     */
    Pipeline.prototype.toServiceClientOptions = function () {
        return {
            httpClient: this.options.httpClient,
            requestPolicyFactories: this.factories
        };
    };
    return Pipeline;
}());

/**
 * Creates a new Pipeline object with Credential provided.
 *
 * @export
 * @param {StorageSharedKeyCredential | AnonymousCredential | TokenCredential} credential  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the @azure/identity package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.
 * @param {StoragePipelineOptions} [pipelineOptions] Optional. Options.
 * @returns {Pipeline} A new Pipeline object.
 */
function newPipeline(credential, pipelineOptions) {
    // Order is important. Closer to the API at the top & closer to the network at the bottom.
    // The credential's policy factory must appear close to the wire so it can sign any
    // changes made by other factories (like UniqueRequestIDPolicyFactory)
    if (pipelineOptions === void 0) { pipelineOptions = {}; }
    var telemetryPolicy = new _TelemetryPolicyFactory__WEBPACK_IMPORTED_MODULE_6__["TelemetryPolicyFactory"](pipelineOptions.userAgentOptions);
    var factories = [
        Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["tracingPolicy"])({ userAgent: telemetryPolicy.telemetryString }),
        Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["keepAlivePolicy"])(pipelineOptions.keepAliveOptions),
        telemetryPolicy,
        Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["generateClientRequestIdPolicy"])(),
        new _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_3__["StorageBrowserPolicyFactory"](),
        Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["deserializationPolicy"])(),
        new _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_4__["StorageRetryPolicyFactory"](pipelineOptions.retryOptions),
        Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["logPolicy"])({
            logger: _log__WEBPACK_IMPORTED_MODULE_2__["logger"].info,
            allowedHeaderNames: _utils_constants__WEBPACK_IMPORTED_MODULE_5__["StorageBlobLoggingAllowedHeaderNames"],
            allowedQueryParameters: _utils_constants__WEBPACK_IMPORTED_MODULE_5__["StorageBlobLoggingAllowedQueryParameters"]
        })
    ];
    if (_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"]) {
        // policies only available in Node.js runtime, not in browsers
        factories.push(Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["proxyPolicy"])(pipelineOptions.proxyOptions));
        factories.push(Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["disableResponseDecompressionPolicy"])());
    }
    factories.push(Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isTokenCredential"])(credential)
        ? Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["bearerTokenAuthenticationPolicy"])(credential, _utils_constants__WEBPACK_IMPORTED_MODULE_5__["StorageOAuthScopes"])
        : credential);
    return new Pipeline(factories, pipelineOptions);
}
//# sourceMappingURL=Pipeline.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js ***!
  \*****************************************************************************/
/*! exports provided: rangeToString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeToString", function() { return rangeToString; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
/**
 * Generate a range string. For example:
 *
 * "bytes=255-" or "bytes=0-511"
 *
 * @export
 * @param {Range} iRange
 * @returns {string}
 */
function rangeToString(iRange) {
    if (iRange.offset < 0) {
        throw new RangeError("Range.offset cannot be smaller than 0.");
    }
    if (iRange.count && iRange.count <= 0) {
        throw new RangeError("Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.");
    }
    return iRange.count
        ? "bytes=" + iRange.offset + "-" + (iRange.offset + iRange.count - 1)
        : "bytes=" + iRange.offset + "-";
}
//# sourceMappingURL=Range.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js ***!
  \***************************************************************************************************/
/*! exports provided: StorageBrowserPolicy, StorageBrowserPolicyFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageBrowserPolicyFactory", function() { return StorageBrowserPolicyFactory; });
/* harmony import */ var _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/StorageBrowserPolicy */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageBrowserPolicy", function() { return _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__["StorageBrowserPolicy"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


/**
 * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.
 *
 * @export
 * @class StorageBrowserPolicyFactory
 * @implements {RequestPolicyFactory}
 */
var StorageBrowserPolicyFactory = /** @class */ (function () {
    function StorageBrowserPolicyFactory() {
    }
    /**
     * Creates a StorageBrowserPolicyFactory object.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @returns {StorageBrowserPolicy}
     * @memberof StorageBrowserPolicyFactory
     */
    StorageBrowserPolicyFactory.prototype.create = function (nextPolicy, options) {
        return new _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__["StorageBrowserPolicy"](nextPolicy, options);
    };
    return StorageBrowserPolicyFactory;
}());

//# sourceMappingURL=StorageBrowserPolicyFactory.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js ***!
  \*************************************************************************************/
/*! exports provided: StorageClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageClient", function() { return StorageClient; });
/* harmony import */ var _generated_src_storageClientContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/src/storageClientContext */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js");
/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils.common */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js");
/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js");
/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.





/**
 * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}
 * and etc.
 *
 * @export
 * @class StorageClient
 */
var StorageClient = /** @class */ (function () {
    /**
     * Creates an instance of StorageClient.
     * @param {string} url url to resource
     * @param {Pipeline} pipeline request policy pipeline.
     * @memberof StorageClient
     */
    function StorageClient(url, pipeline) {
        // URL should be encoded and only once, protocol layer shouldn't encode URL again
        this.url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_1__["escapeURLPath"])(url);
        this.accountName = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_1__["getAccountNameFromUrl"])(url);
        this.pipeline = pipeline;
        this.storageClientContext = new _generated_src_storageClientContext__WEBPACK_IMPORTED_MODULE_0__["StorageClientContext"](this.url, pipeline.toServiceClientOptions());
        this.isHttps = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_1__["iEqual"])(Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_1__["getURLScheme"])(this.url) || "", "https");
        this.credential = new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_2__["AnonymousCredential"]();
        for (var _i = 0, _a = this.pipeline.factories; _i < _a.length; _i++) {
            var factory = _a[_i];
            if ((_azure_core_http__WEBPACK_IMPORTED_MODULE_4__["isNode"] && factory instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_3__["StorageSharedKeyCredential"]) ||
                factory instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_2__["AnonymousCredential"] ||
                Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_4__["isTokenCredential"])(factory)) {
                this.credential = factory;
            }
        }
        // Override protocol layer's default content-type
        var storageClientContext = this.storageClientContext;
        storageClientContext.requestContentType = undefined;
    }
    return StorageClient;
}());

//# sourceMappingURL=StorageClient.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js ***!
  \*************************************************************************************************/
/*! exports provided: StorageRetryPolicyType, StorageRetryPolicy, StorageRetryPolicyFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageRetryPolicyFactory", function() { return StorageRetryPolicyFactory; });
/* harmony import */ var _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/StorageRetryPolicy */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageRetryPolicyType", function() { return _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__["StorageRetryPolicyType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageRetryPolicy", function() { return _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__["StorageRetryPolicy"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


/**
 * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.
 *
 * @export
 * @class StorageRetryPolicyFactory
 * @implements {RequestPolicyFactory}
 */
var StorageRetryPolicyFactory = /** @class */ (function () {
    /**
     * Creates an instance of StorageRetryPolicyFactory.
     * @param {StorageRetryOptions} [retryOptions]
     * @memberof StorageRetryPolicyFactory
     */
    function StorageRetryPolicyFactory(retryOptions) {
        this.retryOptions = retryOptions;
    }
    /**
     * Creates a StorageRetryPolicy object.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @returns {StorageRetryPolicy}
     * @memberof StorageRetryPolicyFactory
     */
    StorageRetryPolicyFactory.prototype.create = function (nextPolicy, options) {
        return new _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__["StorageRetryPolicy"](nextPolicy, options, this.retryOptions);
    };
    return StorageRetryPolicyFactory;
}());

//# sourceMappingURL=StorageRetryPolicyFactory.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/TelemetryPolicyFactory.js ***!
  \**********************************************************************************************/
/*! exports provided: TelemetryPolicyFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TelemetryPolicyFactory", function() { return TelemetryPolicyFactory; });
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! os */ 0);
/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _policies_TelemetryPolicy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./policies/TelemetryPolicy */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/TelemetryPolicy.js");
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.




/**
 * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.
 *
 * @export
 * @class TelemetryPolicyFactory
 * @implements {RequestPolicyFactory}
 */
var TelemetryPolicyFactory = /** @class */ (function () {
    /**
     * Creates an instance of TelemetryPolicyFactory.
     * @param {UserAgentOptions} [telemetry]
     * @memberof TelemetryPolicyFactory
     */
    function TelemetryPolicyFactory(telemetry) {
        var userAgentInfo = [];
        if (_azure_core_http__WEBPACK_IMPORTED_MODULE_0__["isNode"]) {
            if (telemetry) {
                var telemetryString = (telemetry.userAgentPrefix || "").replace(" ", "");
                if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {
                    userAgentInfo.push(telemetryString);
                }
            }
            // e.g. azsdk-js-storageblob/10.0.0
            var libInfo = "azsdk-js-storageblob/" + _utils_constants__WEBPACK_IMPORTED_MODULE_3__["SDK_VERSION"];
            if (userAgentInfo.indexOf(libInfo) === -1) {
                userAgentInfo.push(libInfo);
            }
            // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)
            var runtimeInfo = "(NODE-VERSION " + process.version + "; " + os__WEBPACK_IMPORTED_MODULE_1__["type"]() + " " + os__WEBPACK_IMPORTED_MODULE_1__["release"]() + ")";
            if (userAgentInfo.indexOf(runtimeInfo) === -1) {
                userAgentInfo.push(runtimeInfo);
            }
        }
        this.telemetryString = userAgentInfo.join(" ");
    }
    /**
     * Creates a TelemetryPolicy object.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @returns {TelemetryPolicy}
     * @memberof TelemetryPolicyFactory
     */
    TelemetryPolicyFactory.prototype.create = function (nextPolicy, options) {
        return new _policies_TelemetryPolicy__WEBPACK_IMPORTED_MODULE_2__["TelemetryPolicy"](nextPolicy, options, this.telemetryString);
    };
    return TelemetryPolicyFactory;
}());

//# sourceMappingURL=TelemetryPolicyFactory.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js ***!
  \*******************************************************************************************************/
/*! exports provided: AnonymousCredential */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnonymousCredential", function() { return AnonymousCredential; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../policies/AnonymousCredentialPolicy */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js");
/* harmony import */ var _Credential__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Credential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.



/**
 * AnonymousCredential provides a credentialPolicyCreator member used to create
 * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with
 * HTTP(S) requests that read public resources or for use with Shared Access
 * Signatures (SAS).
 *
 * @export
 * @class AnonymousCredential
 * @extends {Credential}
 */
var AnonymousCredential = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(AnonymousCredential, _super);
    function AnonymousCredential() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates an {@link AnonymousCredentialPolicy} object.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @returns {AnonymousCredentialPolicy}
     * @memberof AnonymousCredential
     */
    AnonymousCredential.prototype.create = function (nextPolicy, options) {
        return new _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_1__["AnonymousCredentialPolicy"](nextPolicy, options);
    };
    return AnonymousCredential;
}(_Credential__WEBPACK_IMPORTED_MODULE_2__["Credential"]));

//# sourceMappingURL=AnonymousCredential.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js ***!
  \**********************************************************************************************/
/*! exports provided: Credential */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Credential", function() { return Credential; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
/**
 * Credential is an abstract class for Azure Storage HTTP requests signing. This
 * class will host an credentialPolicyCreator factory which generates CredentialPolicy.
 *
 * @export
 * @abstract
 * @class Credential
 */
var Credential = /** @class */ (function () {
    function Credential() {
    }
    /**
     * Creates a RequestPolicy object.
     *
     * @param {RequestPolicy} _nextPolicy
     * @param {RequestPolicyOptions} _options
     * @returns {RequestPolicy}
     * @memberof Credential
     */
    Credential.prototype.create = function (
    // tslint:disable-next-line:variable-name
    _nextPolicy, 
    // tslint:disable-next-line:variable-name
    _options) {
        throw new Error("Method should be implemented in children classes.");
    };
    return Credential;
}());

//# sourceMappingURL=Credential.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js ***!
  \**********************************************************************************************************************/
/*! exports provided: StorageSharedKeyCredential */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageSharedKeyCredential", function() { return StorageSharedKeyCredential; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var StorageSharedKeyCredential = /** @class */ (function () {
    function StorageSharedKeyCredential() {
    }
    return StorageSharedKeyCredential;
}());

//# sourceMappingURL=StorageSharedKeyCredential.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/appendBlobMappers.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/appendBlobMappers.js ***!
  \**************************************************************************************************************/
/*! exports provided: AppendBlobAppendBlockFromUrlHeaders, AppendBlobAppendBlockHeaders, AppendBlobCreateHeaders, AppendBlobSealHeaders, StorageError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppendBlobAppendBlockFromUrlHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["AppendBlobAppendBlockFromUrlHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppendBlobAppendBlockHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["AppendBlobAppendBlockHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppendBlobCreateHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["AppendBlobCreateHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppendBlobSealHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["AppendBlobSealHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["StorageError"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

//# sourceMappingURL=appendBlobMappers.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blobMappers.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blobMappers.js ***!
  \********************************************************************************************************/
/*! exports provided: BlobAbortCopyFromURLHeaders, BlobAcquireLeaseHeaders, BlobBreakLeaseHeaders, BlobChangeLeaseHeaders, BlobCopyFromURLHeaders, BlobCreateSnapshotHeaders, BlobDeleteHeaders, BlobDownloadHeaders, BlobGetAccessControlHeaders, BlobGetAccountInfoHeaders, BlobGetPropertiesHeaders, BlobGetTagsHeaders, BlobQueryHeaders, BlobReleaseLeaseHeaders, BlobRenameHeaders, BlobRenewLeaseHeaders, BlobSetAccessControlHeaders, BlobSetExpiryHeaders, BlobSetHTTPHeadersHeaders, BlobSetMetadataHeaders, BlobSetTagsHeaders, BlobSetTierHeaders, BlobStartCopyFromURLHeaders, BlobTag, BlobTags, BlobUndeleteHeaders, DataLakeStorageError, DataLakeStorageErrorError, DelimitedTextConfiguration, JsonTextConfiguration, QueryFormat, QueryRequest, QuerySerialization, StorageError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobAbortCopyFromURLHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobAbortCopyFromURLHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobAcquireLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobAcquireLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobBreakLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobBreakLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobChangeLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobChangeLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobCopyFromURLHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobCopyFromURLHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobCreateSnapshotHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobCreateSnapshotHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobDeleteHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobDeleteHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobDownloadHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobDownloadHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobGetAccessControlHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobGetAccessControlHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobGetAccountInfoHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobGetAccountInfoHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobGetPropertiesHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobGetPropertiesHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobGetTagsHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobGetTagsHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobQueryHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobQueryHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobReleaseLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobReleaseLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobRenameHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobRenameHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobRenewLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobRenewLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobSetAccessControlHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobSetAccessControlHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobSetExpiryHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobSetExpiryHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobSetHTTPHeadersHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobSetHTTPHeadersHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobSetMetadataHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobSetMetadataHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobSetTagsHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobSetTagsHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobSetTierHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobSetTierHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobStartCopyFromURLHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobStartCopyFromURLHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobTag", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobTags", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobTags"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobUndeleteHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobUndeleteHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataLakeStorageError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DataLakeStorageError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataLakeStorageErrorError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DataLakeStorageErrorError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DelimitedTextConfiguration", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DelimitedTextConfiguration"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JsonTextConfiguration", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["JsonTextConfiguration"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryFormat", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["QueryFormat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QueryRequest", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["QueryRequest"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "QuerySerialization", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["QuerySerialization"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["StorageError"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

//# sourceMappingURL=blobMappers.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blockBlobMappers.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blockBlobMappers.js ***!
  \*************************************************************************************************************/
/*! exports provided: Block, BlockBlobCommitBlockListHeaders, BlockBlobGetBlockListHeaders, BlockBlobStageBlockFromURLHeaders, BlockBlobStageBlockHeaders, BlockBlobUploadHeaders, BlockList, BlockLookupList, StorageError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Block", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["Block"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlobCommitBlockListHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlockBlobCommitBlockListHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlobGetBlockListHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlockBlobGetBlockListHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlobStageBlockFromURLHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlockBlobStageBlockFromURLHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlobStageBlockHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlockBlobStageBlockHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlobUploadHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlockBlobUploadHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockList", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlockList"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockLookupList", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlockLookupList"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["StorageError"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

//# sourceMappingURL=blockBlobMappers.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/containerMappers.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/containerMappers.js ***!
  \*************************************************************************************************************/
/*! exports provided: AccessPolicy, BlobFlatListSegment, BlobHierarchyListSegment, BlobItemInternal, BlobPrefix, BlobPropertiesInternal, BlobTag, BlobTags, ContainerAcquireLeaseHeaders, ContainerBreakLeaseHeaders, ContainerChangeLeaseHeaders, ContainerCreateHeaders, ContainerDeleteHeaders, ContainerGetAccessPolicyHeaders, ContainerGetAccountInfoHeaders, ContainerGetPropertiesHeaders, ContainerListBlobFlatSegmentHeaders, ContainerListBlobHierarchySegmentHeaders, ContainerReleaseLeaseHeaders, ContainerRenewLeaseHeaders, ContainerRestoreHeaders, ContainerSetAccessPolicyHeaders, ContainerSetMetadataHeaders, ListBlobsFlatSegmentResponse, ListBlobsHierarchySegmentResponse, SignedIdentifier, StorageError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccessPolicy", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["AccessPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobFlatListSegment", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobFlatListSegment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobHierarchyListSegment", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobHierarchyListSegment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobItemInternal", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobItemInternal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobPrefix", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobPrefix"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobPropertiesInternal", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobPropertiesInternal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobTag", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobTag"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobTags", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobTags"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerAcquireLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerAcquireLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerBreakLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerBreakLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerChangeLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerChangeLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerCreateHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerCreateHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerDeleteHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerDeleteHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerGetAccessPolicyHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerGetAccessPolicyHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerGetAccountInfoHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerGetAccountInfoHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerGetPropertiesHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerGetPropertiesHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerListBlobFlatSegmentHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerListBlobFlatSegmentHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerListBlobHierarchySegmentHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerListBlobHierarchySegmentHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerReleaseLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerReleaseLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerRenewLeaseHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerRenewLeaseHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerRestoreHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerRestoreHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerSetAccessPolicyHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerSetAccessPolicyHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerSetMetadataHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerSetMetadataHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListBlobsFlatSegmentResponse", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ListBlobsFlatSegmentResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListBlobsHierarchySegmentResponse", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ListBlobsHierarchySegmentResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SignedIdentifier", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["SignedIdentifier"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["StorageError"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

//# sourceMappingURL=containerMappers.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/directoryMappers.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/directoryMappers.js ***!
  \*************************************************************************************************************/
/*! exports provided: DataLakeStorageError, DataLakeStorageErrorError, DirectoryCreateHeaders, DirectoryDeleteHeaders, DirectoryGetAccessControlHeaders, DirectoryRenameHeaders, DirectorySetAccessControlHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataLakeStorageError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DataLakeStorageError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataLakeStorageErrorError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DataLakeStorageErrorError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DirectoryCreateHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DirectoryCreateHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DirectoryDeleteHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DirectoryDeleteHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DirectoryGetAccessControlHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DirectoryGetAccessControlHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DirectoryRenameHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DirectoryRenameHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DirectorySetAccessControlHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["DirectorySetAccessControlHeaders"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

//# sourceMappingURL=directoryMappers.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js ***!
  \****************************************************************************************************/
/*! exports provided: KeyInfo, UserDelegationKey, StorageError, DataLakeStorageErrorError, DataLakeStorageError, AccessPolicy, BlobPropertiesInternal, BlobTag, BlobTags, BlobItemInternal, BlobFlatListSegment, ListBlobsFlatSegmentResponse, BlobPrefix, BlobHierarchyListSegment, ListBlobsHierarchySegmentResponse, Block, BlockList, BlockLookupList, ContainerProperties, ContainerItem, DelimitedTextConfiguration, JsonTextConfiguration, ListContainersSegmentResponse, CorsRule, FilterBlobItem, FilterBlobSegment, GeoReplication, RetentionPolicy, Logging, Metrics, PageRange, ClearRange, PageList, QueryFormat, QuerySerialization, QueryRequest, SignedIdentifier, StaticWebsite, BlobServiceProperties, BlobServiceStatistics, ContainerEncryptionScope, LeaseAccessConditions, ModifiedAccessConditions, DirectoryHttpHeaders, SourceModifiedAccessConditions, CpkInfo, BlobHTTPHeaders, SequenceNumberAccessConditions, AppendPositionAccessConditions, ServiceSetPropertiesHeaders, ServiceGetPropertiesHeaders, ServiceGetStatisticsHeaders, ServiceListContainersSegmentHeaders, ServiceGetUserDelegationKeyHeaders, ServiceGetAccountInfoHeaders, ServiceSubmitBatchHeaders, ServiceFilterBlobsHeaders, ContainerCreateHeaders, ContainerGetPropertiesHeaders, ContainerDeleteHeaders, ContainerSetMetadataHeaders, ContainerGetAccessPolicyHeaders, ContainerSetAccessPolicyHeaders, ContainerRestoreHeaders, ContainerAcquireLeaseHeaders, ContainerReleaseLeaseHeaders, ContainerRenewLeaseHeaders, ContainerBreakLeaseHeaders, ContainerChangeLeaseHeaders, ContainerListBlobFlatSegmentHeaders, ContainerListBlobHierarchySegmentHeaders, ContainerGetAccountInfoHeaders, DirectoryCreateHeaders, DirectoryRenameHeaders, DirectoryDeleteHeaders, DirectorySetAccessControlHeaders, DirectoryGetAccessControlHeaders, BlobDownloadHeaders, BlobGetPropertiesHeaders, BlobDeleteHeaders, BlobSetAccessControlHeaders, BlobGetAccessControlHeaders, BlobRenameHeaders, PageBlobCreateHeaders, AppendBlobCreateHeaders, BlockBlobUploadHeaders, BlobUndeleteHeaders, BlobSetExpiryHeaders, BlobSetHTTPHeadersHeaders, BlobSetMetadataHeaders, BlobAcquireLeaseHeaders, BlobReleaseLeaseHeaders, BlobRenewLeaseHeaders, BlobChangeLeaseHeaders, BlobBreakLeaseHeaders, BlobCreateSnapshotHeaders, BlobStartCopyFromURLHeaders, BlobCopyFromURLHeaders, BlobAbortCopyFromURLHeaders, BlobSetTierHeaders, BlobGetAccountInfoHeaders, BlockBlobStageBlockHeaders, BlockBlobStageBlockFromURLHeaders, BlockBlobCommitBlockListHeaders, BlockBlobGetBlockListHeaders, PageBlobUploadPagesHeaders, PageBlobClearPagesHeaders, PageBlobUploadPagesFromURLHeaders, PageBlobGetPageRangesHeaders, PageBlobGetPageRangesDiffHeaders, PageBlobResizeHeaders, PageBlobUpdateSequenceNumberHeaders, PageBlobCopyIncrementalHeaders, AppendBlobAppendBlockHeaders, AppendBlobAppendBlockFromUrlHeaders, AppendBlobSealHeaders, BlobQueryHeaders, BlobGetTagsHeaders, BlobSetTagsHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyInfo", function() { return KeyInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserDelegationKey", function() { return UserDelegationKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageError", function() { return StorageError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataLakeStorageErrorError", function() { return DataLakeStorageErrorError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataLakeStorageError", function() { return DataLakeStorageError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccessPolicy", function() { return AccessPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobPropertiesInternal", function() { return BlobPropertiesInternal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobTag", function() { return BlobTag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobTags", function() { return BlobTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobItemInternal", function() { return BlobItemInternal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobFlatListSegment", function() { return BlobFlatListSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBlobsFlatSegmentResponse", function() { return ListBlobsFlatSegmentResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobPrefix", function() { return BlobPrefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobHierarchyListSegment", function() { return BlobHierarchyListSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListBlobsHierarchySegmentResponse", function() { return ListBlobsHierarchySegmentResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Block", function() { return Block; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockList", function() { return BlockList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockLookupList", function() { return BlockLookupList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerProperties", function() { return ContainerProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerItem", function() { return ContainerItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DelimitedTextConfiguration", function() { return DelimitedTextConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonTextConfiguration", function() { return JsonTextConfiguration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListContainersSegmentResponse", function() { return ListContainersSegmentResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CorsRule", function() { return CorsRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterBlobItem", function() { return FilterBlobItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterBlobSegment", function() { return FilterBlobSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeoReplication", function() { return GeoReplication; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RetentionPolicy", function() { return RetentionPolicy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logging", function() { return Logging; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Metrics", function() { return Metrics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageRange", function() { return PageRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClearRange", function() { return ClearRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageList", function() { return PageList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryFormat", function() { return QueryFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QuerySerialization", function() { return QuerySerialization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryRequest", function() { return QueryRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignedIdentifier", function() { return SignedIdentifier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticWebsite", function() { return StaticWebsite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobServiceProperties", function() { return BlobServiceProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobServiceStatistics", function() { return BlobServiceStatistics; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerEncryptionScope", function() { return ContainerEncryptionScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LeaseAccessConditions", function() { return LeaseAccessConditions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModifiedAccessConditions", function() { return ModifiedAccessConditions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectoryHttpHeaders", function() { return DirectoryHttpHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SourceModifiedAccessConditions", function() { return SourceModifiedAccessConditions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CpkInfo", function() { return CpkInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobHTTPHeaders", function() { return BlobHTTPHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SequenceNumberAccessConditions", function() { return SequenceNumberAccessConditions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppendPositionAccessConditions", function() { return AppendPositionAccessConditions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceSetPropertiesHeaders", function() { return ServiceSetPropertiesHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceGetPropertiesHeaders", function() { return ServiceGetPropertiesHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceGetStatisticsHeaders", function() { return ServiceGetStatisticsHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceListContainersSegmentHeaders", function() { return ServiceListContainersSegmentHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceGetUserDelegationKeyHeaders", function() { return ServiceGetUserDelegationKeyHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceGetAccountInfoHeaders", function() { return ServiceGetAccountInfoHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceSubmitBatchHeaders", function() { return ServiceSubmitBatchHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceFilterBlobsHeaders", function() { return ServiceFilterBlobsHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerCreateHeaders", function() { return ContainerCreateHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerGetPropertiesHeaders", function() { return ContainerGetPropertiesHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerDeleteHeaders", function() { return ContainerDeleteHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerSetMetadataHeaders", function() { return ContainerSetMetadataHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerGetAccessPolicyHeaders", function() { return ContainerGetAccessPolicyHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerSetAccessPolicyHeaders", function() { return ContainerSetAccessPolicyHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerRestoreHeaders", function() { return ContainerRestoreHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerAcquireLeaseHeaders", function() { return ContainerAcquireLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerReleaseLeaseHeaders", function() { return ContainerReleaseLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerRenewLeaseHeaders", function() { return ContainerRenewLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerBreakLeaseHeaders", function() { return ContainerBreakLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerChangeLeaseHeaders", function() { return ContainerChangeLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerListBlobFlatSegmentHeaders", function() { return ContainerListBlobFlatSegmentHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerListBlobHierarchySegmentHeaders", function() { return ContainerListBlobHierarchySegmentHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContainerGetAccountInfoHeaders", function() { return ContainerGetAccountInfoHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectoryCreateHeaders", function() { return DirectoryCreateHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectoryRenameHeaders", function() { return DirectoryRenameHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectoryDeleteHeaders", function() { return DirectoryDeleteHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectorySetAccessControlHeaders", function() { return DirectorySetAccessControlHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DirectoryGetAccessControlHeaders", function() { return DirectoryGetAccessControlHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobDownloadHeaders", function() { return BlobDownloadHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobGetPropertiesHeaders", function() { return BlobGetPropertiesHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobDeleteHeaders", function() { return BlobDeleteHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobSetAccessControlHeaders", function() { return BlobSetAccessControlHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobGetAccessControlHeaders", function() { return BlobGetAccessControlHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobRenameHeaders", function() { return BlobRenameHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobCreateHeaders", function() { return PageBlobCreateHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppendBlobCreateHeaders", function() { return AppendBlobCreateHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockBlobUploadHeaders", function() { return BlockBlobUploadHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobUndeleteHeaders", function() { return BlobUndeleteHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobSetExpiryHeaders", function() { return BlobSetExpiryHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobSetHTTPHeadersHeaders", function() { return BlobSetHTTPHeadersHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobSetMetadataHeaders", function() { return BlobSetMetadataHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobAcquireLeaseHeaders", function() { return BlobAcquireLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobReleaseLeaseHeaders", function() { return BlobReleaseLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobRenewLeaseHeaders", function() { return BlobRenewLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobChangeLeaseHeaders", function() { return BlobChangeLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobBreakLeaseHeaders", function() { return BlobBreakLeaseHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobCreateSnapshotHeaders", function() { return BlobCreateSnapshotHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobStartCopyFromURLHeaders", function() { return BlobStartCopyFromURLHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobCopyFromURLHeaders", function() { return BlobCopyFromURLHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobAbortCopyFromURLHeaders", function() { return BlobAbortCopyFromURLHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobSetTierHeaders", function() { return BlobSetTierHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobGetAccountInfoHeaders", function() { return BlobGetAccountInfoHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockBlobStageBlockHeaders", function() { return BlockBlobStageBlockHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockBlobStageBlockFromURLHeaders", function() { return BlockBlobStageBlockFromURLHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockBlobCommitBlockListHeaders", function() { return BlockBlobCommitBlockListHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockBlobGetBlockListHeaders", function() { return BlockBlobGetBlockListHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobUploadPagesHeaders", function() { return PageBlobUploadPagesHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobClearPagesHeaders", function() { return PageBlobClearPagesHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobUploadPagesFromURLHeaders", function() { return PageBlobUploadPagesFromURLHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobGetPageRangesHeaders", function() { return PageBlobGetPageRangesHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobGetPageRangesDiffHeaders", function() { return PageBlobGetPageRangesDiffHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobResizeHeaders", function() { return PageBlobResizeHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobUpdateSequenceNumberHeaders", function() { return PageBlobUpdateSequenceNumberHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlobCopyIncrementalHeaders", function() { return PageBlobCopyIncrementalHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppendBlobAppendBlockHeaders", function() { return AppendBlobAppendBlockHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppendBlobAppendBlockFromUrlHeaders", function() { return AppendBlobAppendBlockFromUrlHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppendBlobSealHeaders", function() { return AppendBlobSealHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobQueryHeaders", function() { return BlobQueryHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobGetTagsHeaders", function() { return BlobGetTagsHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobSetTagsHeaders", function() { return BlobSetTagsHeaders; });
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
var KeyInfo = {
    serializedName: "KeyInfo",
    type: {
        name: "Composite",
        className: "KeyInfo",
        modelProperties: {
            startsOn: {
                xmlName: "Start",
                required: true,
                serializedName: "Start",
                type: {
                    name: "String"
                }
            },
            expiresOn: {
                xmlName: "Expiry",
                required: true,
                serializedName: "Expiry",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var UserDelegationKey = {
    serializedName: "UserDelegationKey",
    type: {
        name: "Composite",
        className: "UserDelegationKey",
        modelProperties: {
            signedObjectId: {
                xmlName: "SignedOid",
                required: true,
                serializedName: "SignedOid",
                type: {
                    name: "String"
                }
            },
            signedTenantId: {
                xmlName: "SignedTid",
                required: true,
                serializedName: "SignedTid",
                type: {
                    name: "String"
                }
            },
            signedStartsOn: {
                xmlName: "SignedStart",
                required: true,
                serializedName: "SignedStart",
                type: {
                    name: "String"
                }
            },
            signedExpiresOn: {
                xmlName: "SignedExpiry",
                required: true,
                serializedName: "SignedExpiry",
                type: {
                    name: "String"
                }
            },
            signedService: {
                xmlName: "SignedService",
                required: true,
                serializedName: "SignedService",
                type: {
                    name: "String"
                }
            },
            signedVersion: {
                xmlName: "SignedVersion",
                required: true,
                serializedName: "SignedVersion",
                type: {
                    name: "String"
                }
            },
            value: {
                xmlName: "Value",
                required: true,
                serializedName: "Value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var StorageError = {
    serializedName: "StorageError",
    type: {
        name: "Composite",
        className: "StorageError",
        modelProperties: {
            message: {
                xmlName: "Message",
                serializedName: "Message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var DataLakeStorageErrorError = {
    serializedName: "DataLakeStorageError_error",
    type: {
        name: "Composite",
        className: "DataLakeStorageErrorError",
        modelProperties: {
            code: {
                xmlName: "Code",
                serializedName: "Code",
                type: {
                    name: "String"
                }
            },
            message: {
                xmlName: "Message",
                serializedName: "Message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var DataLakeStorageError = {
    serializedName: "DataLakeStorageError",
    type: {
        name: "Composite",
        className: "DataLakeStorageError",
        modelProperties: {
            dataLakeStorageErrorDetails: {
                xmlName: "error",
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "DataLakeStorageErrorError"
                }
            }
        }
    }
};
var AccessPolicy = {
    serializedName: "AccessPolicy",
    type: {
        name: "Composite",
        className: "AccessPolicy",
        modelProperties: {
            startsOn: {
                xmlName: "Start",
                serializedName: "Start",
                type: {
                    name: "String"
                }
            },
            expiresOn: {
                xmlName: "Expiry",
                serializedName: "Expiry",
                type: {
                    name: "String"
                }
            },
            permissions: {
                xmlName: "Permission",
                serializedName: "Permission",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobPropertiesInternal = {
    xmlName: "Properties",
    serializedName: "BlobPropertiesInternal",
    type: {
        name: "Composite",
        className: "BlobPropertiesInternal",
        modelProperties: {
            createdOn: {
                xmlName: "Creation-Time",
                serializedName: "Creation-Time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            lastModified: {
                xmlName: "Last-Modified",
                required: true,
                serializedName: "Last-Modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                xmlName: "Etag",
                required: true,
                serializedName: "Etag",
                type: {
                    name: "String"
                }
            },
            contentLength: {
                xmlName: "Content-Length",
                serializedName: "Content-Length",
                type: {
                    name: "Number"
                }
            },
            contentType: {
                xmlName: "Content-Type",
                serializedName: "Content-Type",
                type: {
                    name: "String"
                }
            },
            contentEncoding: {
                xmlName: "Content-Encoding",
                serializedName: "Content-Encoding",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                xmlName: "Content-Language",
                serializedName: "Content-Language",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                xmlName: "Content-MD5",
                serializedName: "Content-MD5",
                type: {
                    name: "ByteArray"
                }
            },
            contentDisposition: {
                xmlName: "Content-Disposition",
                serializedName: "Content-Disposition",
                type: {
                    name: "String"
                }
            },
            cacheControl: {
                xmlName: "Cache-Control",
                serializedName: "Cache-Control",
                type: {
                    name: "String"
                }
            },
            blobSequenceNumber: {
                xmlName: "x-ms-blob-sequence-number",
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            blobType: {
                xmlName: "BlobType",
                serializedName: "BlobType",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "BlockBlob",
                        "PageBlob",
                        "AppendBlob"
                    ]
                }
            },
            leaseStatus: {
                xmlName: "LeaseStatus",
                serializedName: "LeaseStatus",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            leaseState: {
                xmlName: "LeaseState",
                serializedName: "LeaseState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseDuration: {
                xmlName: "LeaseDuration",
                serializedName: "LeaseDuration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            copyId: {
                xmlName: "CopyId",
                serializedName: "CopyId",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                xmlName: "CopyStatus",
                serializedName: "CopyStatus",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            copySource: {
                xmlName: "CopySource",
                serializedName: "CopySource",
                type: {
                    name: "String"
                }
            },
            copyProgress: {
                xmlName: "CopyProgress",
                serializedName: "CopyProgress",
                type: {
                    name: "String"
                }
            },
            copyCompletedOn: {
                xmlName: "CopyCompletionTime",
                serializedName: "CopyCompletionTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyStatusDescription: {
                xmlName: "CopyStatusDescription",
                serializedName: "CopyStatusDescription",
                type: {
                    name: "String"
                }
            },
            serverEncrypted: {
                xmlName: "ServerEncrypted",
                serializedName: "ServerEncrypted",
                type: {
                    name: "Boolean"
                }
            },
            incrementalCopy: {
                xmlName: "IncrementalCopy",
                serializedName: "IncrementalCopy",
                type: {
                    name: "Boolean"
                }
            },
            destinationSnapshot: {
                xmlName: "DestinationSnapshot",
                serializedName: "DestinationSnapshot",
                type: {
                    name: "String"
                }
            },
            deletedOn: {
                xmlName: "DeletedTime",
                serializedName: "DeletedTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            remainingRetentionDays: {
                xmlName: "RemainingRetentionDays",
                serializedName: "RemainingRetentionDays",
                type: {
                    name: "Number"
                }
            },
            accessTier: {
                xmlName: "AccessTier",
                serializedName: "AccessTier",
                type: {
                    name: "String"
                }
            },
            accessTierInferred: {
                xmlName: "AccessTierInferred",
                serializedName: "AccessTierInferred",
                type: {
                    name: "Boolean"
                }
            },
            archiveStatus: {
                xmlName: "ArchiveStatus",
                serializedName: "ArchiveStatus",
                type: {
                    name: "String"
                }
            },
            customerProvidedKeySha256: {
                xmlName: "CustomerProvidedKeySha256",
                serializedName: "CustomerProvidedKeySha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                xmlName: "EncryptionScope",
                serializedName: "EncryptionScope",
                type: {
                    name: "String"
                }
            },
            accessTierChangedOn: {
                xmlName: "AccessTierChangeTime",
                serializedName: "AccessTierChangeTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            tagCount: {
                xmlName: "TagCount",
                serializedName: "TagCount",
                type: {
                    name: "Number"
                }
            },
            expiresOn: {
                xmlName: "Expiry-Time",
                serializedName: "Expiry-Time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isSealed: {
                xmlName: "IsSealed",
                serializedName: "IsSealed",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
var BlobTag = {
    xmlName: "Tag",
    serializedName: "BlobTag",
    type: {
        name: "Composite",
        className: "BlobTag",
        modelProperties: {
            key: {
                xmlName: "Key",
                required: true,
                serializedName: "Key",
                type: {
                    name: "String"
                }
            },
            value: {
                xmlName: "Value",
                required: true,
                serializedName: "Value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobTags = {
    xmlName: "Tags",
    serializedName: "BlobTags",
    type: {
        name: "Composite",
        className: "BlobTags",
        modelProperties: {
            blobTagSet: {
                xmlIsWrapped: true,
                xmlName: "TagSet",
                xmlElementName: "Tag",
                required: true,
                serializedName: "BlobTagSet",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BlobTag"
                        }
                    }
                }
            }
        }
    }
};
var BlobItemInternal = {
    xmlName: "Blob",
    serializedName: "BlobItemInternal",
    type: {
        name: "Composite",
        className: "BlobItemInternal",
        modelProperties: {
            name: {
                xmlName: "Name",
                required: true,
                serializedName: "Name",
                type: {
                    name: "String"
                }
            },
            deleted: {
                xmlName: "Deleted",
                required: true,
                serializedName: "Deleted",
                type: {
                    name: "Boolean"
                }
            },
            snapshot: {
                xmlName: "Snapshot",
                required: true,
                serializedName: "Snapshot",
                type: {
                    name: "String"
                }
            },
            versionId: {
                xmlName: "VersionId",
                serializedName: "VersionId",
                type: {
                    name: "String"
                }
            },
            isCurrentVersion: {
                xmlName: "IsCurrentVersion",
                serializedName: "IsCurrentVersion",
                type: {
                    name: "Boolean"
                }
            },
            properties: {
                xmlName: "Properties",
                required: true,
                serializedName: "Properties",
                type: {
                    name: "Composite",
                    className: "BlobPropertiesInternal"
                }
            },
            metadata: {
                xmlName: "Metadata",
                serializedName: "Metadata",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            blobTags: {
                xmlName: "Tags",
                serializedName: "BlobTags",
                type: {
                    name: "Composite",
                    className: "BlobTags"
                }
            },
            objectReplicationMetadata: {
                xmlName: "OrMetadata",
                serializedName: "ObjectReplicationMetadata",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
var BlobFlatListSegment = {
    xmlName: "Blobs",
    serializedName: "BlobFlatListSegment",
    type: {
        name: "Composite",
        className: "BlobFlatListSegment",
        modelProperties: {
            blobItems: {
                xmlName: "BlobItems",
                xmlElementName: "Blob",
                required: true,
                serializedName: "BlobItems",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BlobItemInternal"
                        }
                    }
                }
            }
        }
    }
};
var ListBlobsFlatSegmentResponse = {
    xmlName: "EnumerationResults",
    serializedName: "ListBlobsFlatSegmentResponse",
    type: {
        name: "Composite",
        className: "ListBlobsFlatSegmentResponse",
        modelProperties: {
            serviceEndpoint: {
                xmlIsAttribute: true,
                xmlName: "ServiceEndpoint",
                required: true,
                serializedName: "ServiceEndpoint",
                type: {
                    name: "String"
                }
            },
            containerName: {
                xmlIsAttribute: true,
                xmlName: "ContainerName",
                required: true,
                serializedName: "ContainerName",
                type: {
                    name: "String"
                }
            },
            prefix: {
                xmlName: "Prefix",
                serializedName: "Prefix",
                type: {
                    name: "String"
                }
            },
            marker: {
                xmlName: "Marker",
                serializedName: "Marker",
                type: {
                    name: "String"
                }
            },
            maxPageSize: {
                xmlName: "MaxResults",
                serializedName: "MaxResults",
                type: {
                    name: "Number"
                }
            },
            segment: {
                xmlName: "Blobs",
                required: true,
                serializedName: "Segment",
                type: {
                    name: "Composite",
                    className: "BlobFlatListSegment"
                }
            },
            continuationToken: {
                xmlName: "NextMarker",
                serializedName: "NextMarker",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobPrefix = {
    serializedName: "BlobPrefix",
    type: {
        name: "Composite",
        className: "BlobPrefix",
        modelProperties: {
            name: {
                xmlName: "Name",
                required: true,
                serializedName: "Name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobHierarchyListSegment = {
    xmlName: "Blobs",
    serializedName: "BlobHierarchyListSegment",
    type: {
        name: "Composite",
        className: "BlobHierarchyListSegment",
        modelProperties: {
            blobPrefixes: {
                xmlName: "BlobPrefixes",
                xmlElementName: "BlobPrefix",
                serializedName: "BlobPrefixes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BlobPrefix"
                        }
                    }
                }
            },
            blobItems: {
                xmlName: "BlobItems",
                xmlElementName: "Blob",
                required: true,
                serializedName: "BlobItems",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BlobItemInternal"
                        }
                    }
                }
            }
        }
    }
};
var ListBlobsHierarchySegmentResponse = {
    xmlName: "EnumerationResults",
    serializedName: "ListBlobsHierarchySegmentResponse",
    type: {
        name: "Composite",
        className: "ListBlobsHierarchySegmentResponse",
        modelProperties: {
            serviceEndpoint: {
                xmlIsAttribute: true,
                xmlName: "ServiceEndpoint",
                required: true,
                serializedName: "ServiceEndpoint",
                type: {
                    name: "String"
                }
            },
            containerName: {
                xmlIsAttribute: true,
                xmlName: "ContainerName",
                required: true,
                serializedName: "ContainerName",
                type: {
                    name: "String"
                }
            },
            prefix: {
                xmlName: "Prefix",
                serializedName: "Prefix",
                type: {
                    name: "String"
                }
            },
            marker: {
                xmlName: "Marker",
                serializedName: "Marker",
                type: {
                    name: "String"
                }
            },
            maxPageSize: {
                xmlName: "MaxResults",
                serializedName: "MaxResults",
                type: {
                    name: "Number"
                }
            },
            delimiter: {
                xmlName: "Delimiter",
                serializedName: "Delimiter",
                type: {
                    name: "String"
                }
            },
            segment: {
                xmlName: "Blobs",
                required: true,
                serializedName: "Segment",
                type: {
                    name: "Composite",
                    className: "BlobHierarchyListSegment"
                }
            },
            continuationToken: {
                xmlName: "NextMarker",
                serializedName: "NextMarker",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var Block = {
    serializedName: "Block",
    type: {
        name: "Composite",
        className: "Block",
        modelProperties: {
            name: {
                xmlName: "Name",
                required: true,
                serializedName: "Name",
                type: {
                    name: "String"
                }
            },
            size: {
                xmlName: "Size",
                required: true,
                serializedName: "Size",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
var BlockList = {
    serializedName: "BlockList",
    type: {
        name: "Composite",
        className: "BlockList",
        modelProperties: {
            committedBlocks: {
                xmlIsWrapped: true,
                xmlName: "CommittedBlocks",
                xmlElementName: "Block",
                serializedName: "CommittedBlocks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Block"
                        }
                    }
                }
            },
            uncommittedBlocks: {
                xmlIsWrapped: true,
                xmlName: "UncommittedBlocks",
                xmlElementName: "Block",
                serializedName: "UncommittedBlocks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Block"
                        }
                    }
                }
            }
        }
    }
};
var BlockLookupList = {
    xmlName: "BlockList",
    serializedName: "BlockLookupList",
    type: {
        name: "Composite",
        className: "BlockLookupList",
        modelProperties: {
            committed: {
                xmlName: "Committed",
                xmlElementName: "Committed",
                serializedName: "Committed",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            uncommitted: {
                xmlName: "Uncommitted",
                xmlElementName: "Uncommitted",
                serializedName: "Uncommitted",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            latest: {
                xmlName: "Latest",
                xmlElementName: "Latest",
                serializedName: "Latest",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
var ContainerProperties = {
    serializedName: "ContainerProperties",
    type: {
        name: "Composite",
        className: "ContainerProperties",
        modelProperties: {
            lastModified: {
                xmlName: "Last-Modified",
                required: true,
                serializedName: "Last-Modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                xmlName: "Etag",
                required: true,
                serializedName: "Etag",
                type: {
                    name: "String"
                }
            },
            leaseStatus: {
                xmlName: "LeaseStatus",
                serializedName: "LeaseStatus",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            leaseState: {
                xmlName: "LeaseState",
                serializedName: "LeaseState",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseDuration: {
                xmlName: "LeaseDuration",
                serializedName: "LeaseDuration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            publicAccess: {
                xmlName: "PublicAccess",
                serializedName: "PublicAccess",
                type: {
                    name: "String"
                }
            },
            hasImmutabilityPolicy: {
                xmlName: "HasImmutabilityPolicy",
                serializedName: "HasImmutabilityPolicy",
                type: {
                    name: "Boolean"
                }
            },
            hasLegalHold: {
                xmlName: "HasLegalHold",
                serializedName: "HasLegalHold",
                type: {
                    name: "Boolean"
                }
            },
            defaultEncryptionScope: {
                xmlName: "DefaultEncryptionScope",
                serializedName: "DefaultEncryptionScope",
                type: {
                    name: "String"
                }
            },
            preventEncryptionScopeOverride: {
                xmlName: "DenyEncryptionScopeOverride",
                serializedName: "DenyEncryptionScopeOverride",
                type: {
                    name: "Boolean"
                }
            },
            deletedOn: {
                xmlName: "DeletedTime",
                serializedName: "DeletedTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            remainingRetentionDays: {
                xmlName: "RemainingRetentionDays",
                serializedName: "RemainingRetentionDays",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
var ContainerItem = {
    xmlName: "Container",
    serializedName: "ContainerItem",
    type: {
        name: "Composite",
        className: "ContainerItem",
        modelProperties: {
            name: {
                xmlName: "Name",
                required: true,
                serializedName: "Name",
                type: {
                    name: "String"
                }
            },
            deleted: {
                xmlName: "Deleted",
                serializedName: "Deleted",
                type: {
                    name: "Boolean"
                }
            },
            version: {
                xmlName: "Version",
                serializedName: "Version",
                type: {
                    name: "String"
                }
            },
            properties: {
                xmlName: "Properties",
                required: true,
                serializedName: "Properties",
                type: {
                    name: "Composite",
                    className: "ContainerProperties"
                }
            },
            metadata: {
                xmlName: "Metadata",
                serializedName: "Metadata",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
var DelimitedTextConfiguration = {
    serializedName: "DelimitedTextConfiguration",
    type: {
        name: "Composite",
        className: "DelimitedTextConfiguration",
        modelProperties: {
            columnSeparator: {
                xmlName: "ColumnSeparator",
                required: true,
                serializedName: "ColumnSeparator",
                type: {
                    name: "String"
                }
            },
            fieldQuote: {
                xmlName: "FieldQuote",
                required: true,
                serializedName: "FieldQuote",
                type: {
                    name: "String"
                }
            },
            recordSeparator: {
                xmlName: "RecordSeparator",
                required: true,
                serializedName: "RecordSeparator",
                type: {
                    name: "String"
                }
            },
            escapeChar: {
                xmlName: "EscapeChar",
                required: true,
                serializedName: "EscapeChar",
                type: {
                    name: "String"
                }
            },
            headersPresent: {
                xmlName: "HasHeaders",
                required: true,
                serializedName: "HeadersPresent",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
var JsonTextConfiguration = {
    serializedName: "JsonTextConfiguration",
    type: {
        name: "Composite",
        className: "JsonTextConfiguration",
        modelProperties: {
            recordSeparator: {
                xmlName: "RecordSeparator",
                required: true,
                serializedName: "RecordSeparator",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ListContainersSegmentResponse = {
    xmlName: "EnumerationResults",
    serializedName: "ListContainersSegmentResponse",
    type: {
        name: "Composite",
        className: "ListContainersSegmentResponse",
        modelProperties: {
            serviceEndpoint: {
                xmlIsAttribute: true,
                xmlName: "ServiceEndpoint",
                required: true,
                serializedName: "ServiceEndpoint",
                type: {
                    name: "String"
                }
            },
            prefix: {
                xmlName: "Prefix",
                serializedName: "Prefix",
                type: {
                    name: "String"
                }
            },
            marker: {
                xmlName: "Marker",
                serializedName: "Marker",
                type: {
                    name: "String"
                }
            },
            maxPageSize: {
                xmlName: "MaxResults",
                serializedName: "MaxResults",
                type: {
                    name: "Number"
                }
            },
            containerItems: {
                xmlIsWrapped: true,
                xmlName: "Containers",
                xmlElementName: "Container",
                required: true,
                serializedName: "ContainerItems",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContainerItem"
                        }
                    }
                }
            },
            continuationToken: {
                xmlName: "NextMarker",
                serializedName: "NextMarker",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var CorsRule = {
    serializedName: "CorsRule",
    type: {
        name: "Composite",
        className: "CorsRule",
        modelProperties: {
            allowedOrigins: {
                xmlName: "AllowedOrigins",
                required: true,
                serializedName: "AllowedOrigins",
                type: {
                    name: "String"
                }
            },
            allowedMethods: {
                xmlName: "AllowedMethods",
                required: true,
                serializedName: "AllowedMethods",
                type: {
                    name: "String"
                }
            },
            allowedHeaders: {
                xmlName: "AllowedHeaders",
                required: true,
                serializedName: "AllowedHeaders",
                type: {
                    name: "String"
                }
            },
            exposedHeaders: {
                xmlName: "ExposedHeaders",
                required: true,
                serializedName: "ExposedHeaders",
                type: {
                    name: "String"
                }
            },
            maxAgeInSeconds: {
                xmlName: "MaxAgeInSeconds",
                required: true,
                serializedName: "MaxAgeInSeconds",
                constraints: {
                    InclusiveMinimum: 0
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
var FilterBlobItem = {
    xmlName: "Blob",
    serializedName: "FilterBlobItem",
    type: {
        name: "Composite",
        className: "FilterBlobItem",
        modelProperties: {
            name: {
                xmlName: "Name",
                required: true,
                serializedName: "Name",
                type: {
                    name: "String"
                }
            },
            containerName: {
                xmlName: "ContainerName",
                required: true,
                serializedName: "ContainerName",
                type: {
                    name: "String"
                }
            },
            tagValue: {
                xmlName: "TagValue",
                required: true,
                serializedName: "TagValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var FilterBlobSegment = {
    xmlName: "EnumerationResults",
    serializedName: "FilterBlobSegment",
    type: {
        name: "Composite",
        className: "FilterBlobSegment",
        modelProperties: {
            serviceEndpoint: {
                xmlIsAttribute: true,
                xmlName: "ServiceEndpoint",
                required: true,
                serializedName: "ServiceEndpoint",
                type: {
                    name: "String"
                }
            },
            where: {
                xmlName: "Where",
                required: true,
                serializedName: "Where",
                type: {
                    name: "String"
                }
            },
            blobs: {
                xmlIsWrapped: true,
                xmlName: "Blobs",
                xmlElementName: "Blob",
                required: true,
                serializedName: "Blobs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FilterBlobItem"
                        }
                    }
                }
            },
            continuationToken: {
                xmlName: "NextMarker",
                serializedName: "NextMarker",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var GeoReplication = {
    serializedName: "GeoReplication",
    type: {
        name: "Composite",
        className: "GeoReplication",
        modelProperties: {
            status: {
                xmlName: "Status",
                required: true,
                serializedName: "Status",
                type: {
                    name: "String"
                }
            },
            lastSyncOn: {
                xmlName: "LastSyncTime",
                required: true,
                serializedName: "LastSyncTime",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
var RetentionPolicy = {
    serializedName: "RetentionPolicy",
    type: {
        name: "Composite",
        className: "RetentionPolicy",
        modelProperties: {
            enabled: {
                xmlName: "Enabled",
                required: true,
                serializedName: "Enabled",
                type: {
                    name: "Boolean"
                }
            },
            days: {
                xmlName: "Days",
                serializedName: "Days",
                constraints: {
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
var Logging = {
    serializedName: "Logging",
    type: {
        name: "Composite",
        className: "Logging",
        modelProperties: {
            version: {
                xmlName: "Version",
                required: true,
                serializedName: "Version",
                type: {
                    name: "String"
                }
            },
            deleteProperty: {
                xmlName: "Delete",
                required: true,
                serializedName: "Delete",
                type: {
                    name: "Boolean"
                }
            },
            read: {
                xmlName: "Read",
                required: true,
                serializedName: "Read",
                type: {
                    name: "Boolean"
                }
            },
            write: {
                xmlName: "Write",
                required: true,
                serializedName: "Write",
                type: {
                    name: "Boolean"
                }
            },
            retentionPolicy: {
                xmlName: "RetentionPolicy",
                required: true,
                serializedName: "RetentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            }
        }
    }
};
var Metrics = {
    serializedName: "Metrics",
    type: {
        name: "Composite",
        className: "Metrics",
        modelProperties: {
            version: {
                xmlName: "Version",
                serializedName: "Version",
                type: {
                    name: "String"
                }
            },
            enabled: {
                xmlName: "Enabled",
                required: true,
                serializedName: "Enabled",
                type: {
                    name: "Boolean"
                }
            },
            includeAPIs: {
                xmlName: "IncludeAPIs",
                serializedName: "IncludeAPIs",
                type: {
                    name: "Boolean"
                }
            },
            retentionPolicy: {
                xmlName: "RetentionPolicy",
                serializedName: "RetentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            }
        }
    }
};
var PageRange = {
    serializedName: "PageRange",
    type: {
        name: "Composite",
        className: "PageRange",
        modelProperties: {
            start: {
                xmlName: "Start",
                required: true,
                serializedName: "Start",
                type: {
                    name: "Number"
                }
            },
            end: {
                xmlName: "End",
                required: true,
                serializedName: "End",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
var ClearRange = {
    serializedName: "ClearRange",
    type: {
        name: "Composite",
        className: "ClearRange",
        modelProperties: {
            start: {
                xmlName: "Start",
                required: true,
                serializedName: "Start",
                type: {
                    name: "Number"
                }
            },
            end: {
                xmlName: "End",
                required: true,
                serializedName: "End",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
var PageList = {
    serializedName: "PageList",
    type: {
        name: "Composite",
        className: "PageList",
        modelProperties: {
            pageRange: {
                xmlName: "PageRange",
                xmlElementName: "PageRange",
                serializedName: "PageRange",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PageRange"
                        }
                    }
                }
            },
            clearRange: {
                xmlName: "ClearRange",
                xmlElementName: "ClearRange",
                serializedName: "ClearRange",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClearRange"
                        }
                    }
                }
            }
        }
    }
};
var QueryFormat = {
    serializedName: "QueryFormat",
    type: {
        name: "Composite",
        className: "QueryFormat",
        modelProperties: {
            type: {
                xmlName: "Type",
                serializedName: "Type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "delimited",
                        "json"
                    ]
                }
            },
            delimitedTextConfiguration: {
                xmlName: "DelimitedTextConfiguration",
                serializedName: "DelimitedTextConfiguration",
                type: {
                    name: "Composite",
                    className: "DelimitedTextConfiguration"
                }
            },
            jsonTextConfiguration: {
                xmlName: "JsonTextConfiguration",
                serializedName: "JsonTextConfiguration",
                type: {
                    name: "Composite",
                    className: "JsonTextConfiguration"
                }
            }
        }
    }
};
var QuerySerialization = {
    serializedName: "QuerySerialization",
    type: {
        name: "Composite",
        className: "QuerySerialization",
        modelProperties: {
            format: {
                xmlName: "Format",
                required: true,
                serializedName: "Format",
                type: {
                    name: "Composite",
                    className: "QueryFormat"
                }
            }
        }
    }
};
var QueryRequest = {
    serializedName: "QueryRequest",
    type: {
        name: "Composite",
        className: "QueryRequest",
        modelProperties: {
            queryType: {
                xmlName: "QueryType",
                required: true,
                isConstant: true,
                serializedName: "QueryType",
                defaultValue: 'SQL',
                type: {
                    name: "String"
                }
            },
            expression: {
                xmlName: "Expression",
                required: true,
                serializedName: "Expression",
                type: {
                    name: "String"
                }
            },
            inputSerialization: {
                xmlName: "InputSerialization",
                serializedName: "InputSerialization",
                type: {
                    name: "Composite",
                    className: "QuerySerialization"
                }
            },
            outputSerialization: {
                xmlName: "OutputSerialization",
                serializedName: "OutputSerialization",
                type: {
                    name: "Composite",
                    className: "QuerySerialization"
                }
            }
        }
    }
};
var SignedIdentifier = {
    serializedName: "SignedIdentifier",
    type: {
        name: "Composite",
        className: "SignedIdentifier",
        modelProperties: {
            id: {
                xmlName: "Id",
                required: true,
                serializedName: "Id",
                type: {
                    name: "String"
                }
            },
            accessPolicy: {
                xmlName: "AccessPolicy",
                required: true,
                serializedName: "AccessPolicy",
                type: {
                    name: "Composite",
                    className: "AccessPolicy"
                }
            }
        }
    }
};
var StaticWebsite = {
    serializedName: "StaticWebsite",
    type: {
        name: "Composite",
        className: "StaticWebsite",
        modelProperties: {
            enabled: {
                xmlName: "Enabled",
                required: true,
                serializedName: "Enabled",
                type: {
                    name: "Boolean"
                }
            },
            indexDocument: {
                xmlName: "IndexDocument",
                serializedName: "IndexDocument",
                type: {
                    name: "String"
                }
            },
            errorDocument404Path: {
                xmlName: "ErrorDocument404Path",
                serializedName: "ErrorDocument404Path",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobServiceProperties = {
    xmlName: "StorageServiceProperties",
    serializedName: "BlobServiceProperties",
    type: {
        name: "Composite",
        className: "BlobServiceProperties",
        modelProperties: {
            blobAnalyticsLogging: {
                xmlName: "Logging",
                serializedName: "Logging",
                type: {
                    name: "Composite",
                    className: "Logging"
                }
            },
            hourMetrics: {
                xmlName: "HourMetrics",
                serializedName: "HourMetrics",
                type: {
                    name: "Composite",
                    className: "Metrics"
                }
            },
            minuteMetrics: {
                xmlName: "MinuteMetrics",
                serializedName: "MinuteMetrics",
                type: {
                    name: "Composite",
                    className: "Metrics"
                }
            },
            cors: {
                xmlIsWrapped: true,
                xmlName: "Cors",
                xmlElementName: "CorsRule",
                serializedName: "Cors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CorsRule"
                        }
                    }
                }
            },
            defaultServiceVersion: {
                xmlName: "DefaultServiceVersion",
                serializedName: "DefaultServiceVersion",
                type: {
                    name: "String"
                }
            },
            deleteRetentionPolicy: {
                xmlName: "DeleteRetentionPolicy",
                serializedName: "DeleteRetentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            },
            staticWebsite: {
                xmlName: "StaticWebsite",
                serializedName: "StaticWebsite",
                type: {
                    name: "Composite",
                    className: "StaticWebsite"
                }
            }
        }
    }
};
var BlobServiceStatistics = {
    xmlName: "StorageServiceStats",
    serializedName: "BlobServiceStatistics",
    type: {
        name: "Composite",
        className: "BlobServiceStatistics",
        modelProperties: {
            geoReplication: {
                xmlName: "GeoReplication",
                serializedName: "GeoReplication",
                type: {
                    name: "Composite",
                    className: "GeoReplication"
                }
            }
        }
    }
};
var ContainerEncryptionScope = {
    xmlName: "container-encryption-scope",
    type: {
        name: "Composite",
        className: "ContainerEncryptionScope",
        modelProperties: {
            defaultEncryptionScope: {
                xmlName: "defaultEncryptionScope",
                type: {
                    name: "String"
                }
            },
            preventEncryptionScopeOverride: {
                xmlName: "preventEncryptionScopeOverride",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
var LeaseAccessConditions = {
    xmlName: "lease-access-conditions",
    type: {
        name: "Composite",
        className: "LeaseAccessConditions",
        modelProperties: {
            leaseId: {
                xmlName: "leaseId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ModifiedAccessConditions = {
    xmlName: "modified-access-conditions",
    type: {
        name: "Composite",
        className: "ModifiedAccessConditions",
        modelProperties: {
            ifModifiedSince: {
                xmlName: "ifModifiedSince",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            ifUnmodifiedSince: {
                xmlName: "ifUnmodifiedSince",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            ifMatch: {
                xmlName: "ifMatch",
                type: {
                    name: "String"
                }
            },
            ifNoneMatch: {
                xmlName: "ifNoneMatch",
                type: {
                    name: "String"
                }
            },
            ifTags: {
                xmlName: "ifTags",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var DirectoryHttpHeaders = {
    xmlName: "directory-http-headers",
    type: {
        name: "Composite",
        className: "DirectoryHttpHeaders",
        modelProperties: {
            cacheControl: {
                xmlName: "cacheControl",
                type: {
                    name: "String"
                }
            },
            contentType: {
                xmlName: "contentType",
                type: {
                    name: "String"
                }
            },
            contentEncoding: {
                xmlName: "contentEncoding",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                xmlName: "contentLanguage",
                type: {
                    name: "String"
                }
            },
            contentDisposition: {
                xmlName: "contentDisposition",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var SourceModifiedAccessConditions = {
    xmlName: "source-modified-access-conditions",
    type: {
        name: "Composite",
        className: "SourceModifiedAccessConditions",
        modelProperties: {
            sourceIfModifiedSince: {
                xmlName: "sourceIfModifiedSince",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            sourceIfUnmodifiedSince: {
                xmlName: "sourceIfUnmodifiedSince",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            sourceIfMatch: {
                xmlName: "sourceIfMatch",
                type: {
                    name: "String"
                }
            },
            sourceIfNoneMatch: {
                xmlName: "sourceIfNoneMatch",
                type: {
                    name: "String"
                }
            },
            sourceIfTags: {
                xmlName: "sourceIfTags",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var CpkInfo = {
    xmlName: "cpk-info",
    type: {
        name: "Composite",
        className: "CpkInfo",
        modelProperties: {
            encryptionKey: {
                xmlName: "encryptionKey",
                type: {
                    name: "String"
                }
            },
            encryptionKeySha256: {
                xmlName: "encryptionKeySha256",
                type: {
                    name: "String"
                }
            },
            encryptionAlgorithm: {
                xmlName: "encryptionAlgorithm",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "AES256"
                    ]
                }
            }
        }
    }
};
var BlobHTTPHeaders = {
    xmlName: "blob-HTTP-headers",
    type: {
        name: "Composite",
        className: "BlobHTTPHeaders",
        modelProperties: {
            blobCacheControl: {
                xmlName: "blobCacheControl",
                type: {
                    name: "String"
                }
            },
            blobContentType: {
                xmlName: "blobContentType",
                type: {
                    name: "String"
                }
            },
            blobContentMD5: {
                xmlName: "blobContentMD5",
                type: {
                    name: "ByteArray"
                }
            },
            blobContentEncoding: {
                xmlName: "blobContentEncoding",
                type: {
                    name: "String"
                }
            },
            blobContentLanguage: {
                xmlName: "blobContentLanguage",
                type: {
                    name: "String"
                }
            },
            blobContentDisposition: {
                xmlName: "blobContentDisposition",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var SequenceNumberAccessConditions = {
    xmlName: "sequence-number-access-conditions",
    type: {
        name: "Composite",
        className: "SequenceNumberAccessConditions",
        modelProperties: {
            ifSequenceNumberLessThanOrEqualTo: {
                xmlName: "ifSequenceNumberLessThanOrEqualTo",
                type: {
                    name: "Number"
                }
            },
            ifSequenceNumberLessThan: {
                xmlName: "ifSequenceNumberLessThan",
                type: {
                    name: "Number"
                }
            },
            ifSequenceNumberEqualTo: {
                xmlName: "ifSequenceNumberEqualTo",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
var AppendPositionAccessConditions = {
    xmlName: "append-position-access-conditions",
    type: {
        name: "Composite",
        className: "AppendPositionAccessConditions",
        modelProperties: {
            maxSize: {
                xmlName: "maxSize",
                type: {
                    name: "Number"
                }
            },
            appendPosition: {
                xmlName: "appendPosition",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
var ServiceSetPropertiesHeaders = {
    serializedName: "service-setproperties-headers",
    type: {
        name: "Composite",
        className: "ServiceSetPropertiesHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ServiceGetPropertiesHeaders = {
    serializedName: "service-getproperties-headers",
    type: {
        name: "Composite",
        className: "ServiceGetPropertiesHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ServiceGetStatisticsHeaders = {
    serializedName: "service-getstatistics-headers",
    type: {
        name: "Composite",
        className: "ServiceGetStatisticsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ServiceListContainersSegmentHeaders = {
    serializedName: "service-listcontainerssegment-headers",
    type: {
        name: "Composite",
        className: "ServiceListContainersSegmentHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ServiceGetUserDelegationKeyHeaders = {
    serializedName: "service-getuserdelegationkey-headers",
    type: {
        name: "Composite",
        className: "ServiceGetUserDelegationKeyHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ServiceGetAccountInfoHeaders = {
    serializedName: "service-getaccountinfo-headers",
    type: {
        name: "Composite",
        className: "ServiceGetAccountInfoHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            skuName: {
                serializedName: "x-ms-sku-name",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                    ]
                }
            },
            accountKind: {
                serializedName: "x-ms-account-kind",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Storage",
                        "BlobStorage",
                        "StorageV2"
                    ]
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ServiceSubmitBatchHeaders = {
    serializedName: "service-submitbatch-headers",
    type: {
        name: "Composite",
        className: "ServiceSubmitBatchHeaders",
        modelProperties: {
            contentType: {
                serializedName: "content-type",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ServiceFilterBlobsHeaders = {
    serializedName: "service-filterblobs-headers",
    type: {
        name: "Composite",
        className: "ServiceFilterBlobsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerCreateHeaders = {
    serializedName: "container-create-headers",
    type: {
        name: "Composite",
        className: "ContainerCreateHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerGetPropertiesHeaders = {
    serializedName: "container-getproperties-headers",
    type: {
        name: "Composite",
        className: "ContainerGetPropertiesHeaders",
        modelProperties: {
            metadata: {
                serializedName: "x-ms-meta",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-meta-"
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseDuration: {
                serializedName: "x-ms-lease-duration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            leaseState: {
                serializedName: "x-ms-lease-state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "x-ms-lease-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobPublicAccess: {
                serializedName: "x-ms-blob-public-access",
                type: {
                    name: "String"
                }
            },
            hasImmutabilityPolicy: {
                serializedName: "x-ms-has-immutability-policy",
                type: {
                    name: "Boolean"
                }
            },
            hasLegalHold: {
                serializedName: "x-ms-has-legal-hold",
                type: {
                    name: "Boolean"
                }
            },
            defaultEncryptionScope: {
                serializedName: "x-ms-default-encryption-scope",
                type: {
                    name: "String"
                }
            },
            denyEncryptionScopeOverride: {
                serializedName: "x-ms-deny-encryption-scope-override",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerDeleteHeaders = {
    serializedName: "container-delete-headers",
    type: {
        name: "Composite",
        className: "ContainerDeleteHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerSetMetadataHeaders = {
    serializedName: "container-setmetadata-headers",
    type: {
        name: "Composite",
        className: "ContainerSetMetadataHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerGetAccessPolicyHeaders = {
    serializedName: "container-getaccesspolicy-headers",
    type: {
        name: "Composite",
        className: "ContainerGetAccessPolicyHeaders",
        modelProperties: {
            blobPublicAccess: {
                serializedName: "x-ms-blob-public-access",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerSetAccessPolicyHeaders = {
    serializedName: "container-setaccesspolicy-headers",
    type: {
        name: "Composite",
        className: "ContainerSetAccessPolicyHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerRestoreHeaders = {
    serializedName: "container-restore-headers",
    type: {
        name: "Composite",
        className: "ContainerRestoreHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerAcquireLeaseHeaders = {
    serializedName: "container-acquirelease-headers",
    type: {
        name: "Composite",
        className: "ContainerAcquireLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerReleaseLeaseHeaders = {
    serializedName: "container-releaselease-headers",
    type: {
        name: "Composite",
        className: "ContainerReleaseLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerRenewLeaseHeaders = {
    serializedName: "container-renewlease-headers",
    type: {
        name: "Composite",
        className: "ContainerRenewLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerBreakLeaseHeaders = {
    serializedName: "container-breaklease-headers",
    type: {
        name: "Composite",
        className: "ContainerBreakLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseTime: {
                serializedName: "x-ms-lease-time",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerChangeLeaseHeaders = {
    serializedName: "container-changelease-headers",
    type: {
        name: "Composite",
        className: "ContainerChangeLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerListBlobFlatSegmentHeaders = {
    serializedName: "container-listblobflatsegment-headers",
    type: {
        name: "Composite",
        className: "ContainerListBlobFlatSegmentHeaders",
        modelProperties: {
            contentType: {
                serializedName: "content-type",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerListBlobHierarchySegmentHeaders = {
    serializedName: "container-listblobhierarchysegment-headers",
    type: {
        name: "Composite",
        className: "ContainerListBlobHierarchySegmentHeaders",
        modelProperties: {
            contentType: {
                serializedName: "content-type",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var ContainerGetAccountInfoHeaders = {
    serializedName: "container-getaccountinfo-headers",
    type: {
        name: "Composite",
        className: "ContainerGetAccountInfoHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            skuName: {
                serializedName: "x-ms-sku-name",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                    ]
                }
            },
            accountKind: {
                serializedName: "x-ms-account-kind",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Storage",
                        "BlobStorage",
                        "StorageV2"
                    ]
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var DirectoryCreateHeaders = {
    serializedName: "directory-create-headers",
    type: {
        name: "Composite",
        className: "DirectoryCreateHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
var DirectoryRenameHeaders = {
    serializedName: "directory-rename-headers",
    type: {
        name: "Composite",
        className: "DirectoryRenameHeaders",
        modelProperties: {
            marker: {
                serializedName: "x-ms-continuation",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
var DirectoryDeleteHeaders = {
    serializedName: "directory-delete-headers",
    type: {
        name: "Composite",
        className: "DirectoryDeleteHeaders",
        modelProperties: {
            marker: {
                serializedName: "x-ms-continuation",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
var DirectorySetAccessControlHeaders = {
    serializedName: "directory-setaccesscontrol-headers",
    type: {
        name: "Composite",
        className: "DirectorySetAccessControlHeaders",
        modelProperties: {
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var DirectoryGetAccessControlHeaders = {
    serializedName: "directory-getaccesscontrol-headers",
    type: {
        name: "Composite",
        className: "DirectoryGetAccessControlHeaders",
        modelProperties: {
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            xMsOwner: {
                serializedName: "x-ms-owner",
                type: {
                    name: "String"
                }
            },
            xMsGroup: {
                serializedName: "x-ms-group",
                type: {
                    name: "String"
                }
            },
            xMsPermissions: {
                serializedName: "x-ms-permissions",
                type: {
                    name: "String"
                }
            },
            xMsAcl: {
                serializedName: "x-ms-acl",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobDownloadHeaders = {
    serializedName: "blob-download-headers",
    type: {
        name: "Composite",
        className: "BlobDownloadHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            metadata: {
                serializedName: "x-ms-meta",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-meta-"
            },
            objectReplicationPolicyId: {
                serializedName: "x-ms-or-policy-id",
                type: {
                    name: "String"
                }
            },
            objectReplicationRules: {
                serializedName: "x-ms-or",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-or-"
            },
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            contentType: {
                serializedName: "content-type",
                type: {
                    name: "String"
                }
            },
            contentRange: {
                serializedName: "content-range",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            contentEncoding: {
                serializedName: "content-encoding",
                type: {
                    name: "String"
                }
            },
            cacheControl: {
                serializedName: "cache-control",
                type: {
                    name: "String"
                }
            },
            contentDisposition: {
                serializedName: "content-disposition",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                serializedName: "content-language",
                type: {
                    name: "String"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            blobType: {
                serializedName: "x-ms-blob-type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "BlockBlob",
                        "PageBlob",
                        "AppendBlob"
                    ]
                }
            },
            copyCompletedOn: {
                serializedName: "x-ms-copy-completion-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyStatusDescription: {
                serializedName: "x-ms-copy-status-description",
                type: {
                    name: "String"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyProgress: {
                serializedName: "x-ms-copy-progress",
                type: {
                    name: "String"
                }
            },
            copySource: {
                serializedName: "x-ms-copy-source",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            leaseDuration: {
                serializedName: "x-ms-lease-duration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            leaseState: {
                serializedName: "x-ms-lease-state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "x-ms-lease-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            acceptRanges: {
                serializedName: "accept-ranges",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            blobContentMD5: {
                serializedName: "x-ms-blob-content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            tagCount: {
                serializedName: "x-ms-tag-count",
                type: {
                    name: "Number"
                }
            },
            isSealed: {
                serializedName: "x-ms-blob-sealed",
                type: {
                    name: "Boolean"
                }
            },
            contentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobGetPropertiesHeaders = {
    serializedName: "blob-getproperties-headers",
    type: {
        name: "Composite",
        className: "BlobGetPropertiesHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            createdOn: {
                serializedName: "x-ms-creation-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            metadata: {
                serializedName: "x-ms-meta",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-meta-"
            },
            objectReplicationPolicyId: {
                serializedName: "x-ms-or-policy-id",
                type: {
                    name: "String"
                }
            },
            objectReplicationRules: {
                serializedName: "x-ms-or",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-or-"
            },
            blobType: {
                serializedName: "x-ms-blob-type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "BlockBlob",
                        "PageBlob",
                        "AppendBlob"
                    ]
                }
            },
            copyCompletedOn: {
                serializedName: "x-ms-copy-completion-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyStatusDescription: {
                serializedName: "x-ms-copy-status-description",
                type: {
                    name: "String"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyProgress: {
                serializedName: "x-ms-copy-progress",
                type: {
                    name: "String"
                }
            },
            copySource: {
                serializedName: "x-ms-copy-source",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            isIncrementalCopy: {
                serializedName: "x-ms-incremental-copy",
                type: {
                    name: "Boolean"
                }
            },
            destinationSnapshot: {
                serializedName: "x-ms-copy-destination-snapshot",
                type: {
                    name: "String"
                }
            },
            leaseDuration: {
                serializedName: "x-ms-lease-duration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            leaseState: {
                serializedName: "x-ms-lease-state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "x-ms-lease-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            contentType: {
                serializedName: "content-type",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            contentEncoding: {
                serializedName: "content-encoding",
                type: {
                    name: "String"
                }
            },
            contentDisposition: {
                serializedName: "content-disposition",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                serializedName: "content-language",
                type: {
                    name: "String"
                }
            },
            cacheControl: {
                serializedName: "cache-control",
                type: {
                    name: "String"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            acceptRanges: {
                serializedName: "accept-ranges",
                type: {
                    name: "String"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            accessTier: {
                serializedName: "x-ms-access-tier",
                type: {
                    name: "String"
                }
            },
            accessTierInferred: {
                serializedName: "x-ms-access-tier-inferred",
                type: {
                    name: "Boolean"
                }
            },
            archiveStatus: {
                serializedName: "x-ms-archive-status",
                type: {
                    name: "String"
                }
            },
            accessTierChangedOn: {
                serializedName: "x-ms-access-tier-change-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            isCurrentVersion: {
                serializedName: "x-ms-is-current-version",
                type: {
                    name: "Boolean"
                }
            },
            tagCount: {
                serializedName: "x-ms-tag-count",
                type: {
                    name: "Number"
                }
            },
            expiresOn: {
                serializedName: "x-ms-expiry-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isSealed: {
                serializedName: "x-ms-blob-sealed",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobDeleteHeaders = {
    serializedName: "blob-delete-headers",
    type: {
        name: "Composite",
        className: "BlobDeleteHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobSetAccessControlHeaders = {
    serializedName: "blob-setaccesscontrol-headers",
    type: {
        name: "Composite",
        className: "BlobSetAccessControlHeaders",
        modelProperties: {
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobGetAccessControlHeaders = {
    serializedName: "blob-getaccesscontrol-headers",
    type: {
        name: "Composite",
        className: "BlobGetAccessControlHeaders",
        modelProperties: {
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            xMsOwner: {
                serializedName: "x-ms-owner",
                type: {
                    name: "String"
                }
            },
            xMsGroup: {
                serializedName: "x-ms-group",
                type: {
                    name: "String"
                }
            },
            xMsPermissions: {
                serializedName: "x-ms-permissions",
                type: {
                    name: "String"
                }
            },
            xMsAcl: {
                serializedName: "x-ms-acl",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobRenameHeaders = {
    serializedName: "blob-rename-headers",
    type: {
        name: "Composite",
        className: "BlobRenameHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            }
        }
    }
};
var PageBlobCreateHeaders = {
    serializedName: "pageblob-create-headers",
    type: {
        name: "Composite",
        className: "PageBlobCreateHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var AppendBlobCreateHeaders = {
    serializedName: "appendblob-create-headers",
    type: {
        name: "Composite",
        className: "AppendBlobCreateHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlockBlobUploadHeaders = {
    serializedName: "blockblob-upload-headers",
    type: {
        name: "Composite",
        className: "BlockBlobUploadHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobUndeleteHeaders = {
    serializedName: "blob-undelete-headers",
    type: {
        name: "Composite",
        className: "BlobUndeleteHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobSetExpiryHeaders = {
    serializedName: "blob-setexpiry-headers",
    type: {
        name: "Composite",
        className: "BlobSetExpiryHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobSetHTTPHeadersHeaders = {
    serializedName: "blob-sethttpheaders-headers",
    type: {
        name: "Composite",
        className: "BlobSetHTTPHeadersHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobSetMetadataHeaders = {
    serializedName: "blob-setmetadata-headers",
    type: {
        name: "Composite",
        className: "BlobSetMetadataHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobAcquireLeaseHeaders = {
    serializedName: "blob-acquirelease-headers",
    type: {
        name: "Composite",
        className: "BlobAcquireLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobReleaseLeaseHeaders = {
    serializedName: "blob-releaselease-headers",
    type: {
        name: "Composite",
        className: "BlobReleaseLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobRenewLeaseHeaders = {
    serializedName: "blob-renewlease-headers",
    type: {
        name: "Composite",
        className: "BlobRenewLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobChangeLeaseHeaders = {
    serializedName: "blob-changelease-headers",
    type: {
        name: "Composite",
        className: "BlobChangeLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            leaseId: {
                serializedName: "x-ms-lease-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobBreakLeaseHeaders = {
    serializedName: "blob-breaklease-headers",
    type: {
        name: "Composite",
        className: "BlobBreakLeaseHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            leaseTime: {
                serializedName: "x-ms-lease-time",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobCreateSnapshotHeaders = {
    serializedName: "blob-createsnapshot-headers",
    type: {
        name: "Composite",
        className: "BlobCreateSnapshotHeaders",
        modelProperties: {
            snapshot: {
                serializedName: "x-ms-snapshot",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobStartCopyFromURLHeaders = {
    serializedName: "blob-startcopyfromurl-headers",
    type: {
        name: "Composite",
        className: "BlobStartCopyFromURLHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobCopyFromURLHeaders = {
    serializedName: "blob-copyfromurl-headers",
    type: {
        name: "Composite",
        className: "BlobCopyFromURLHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "success"
                    ]
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobAbortCopyFromURLHeaders = {
    serializedName: "blob-abortcopyfromurl-headers",
    type: {
        name: "Composite",
        className: "BlobAbortCopyFromURLHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobSetTierHeaders = {
    serializedName: "blob-settier-headers",
    type: {
        name: "Composite",
        className: "BlobSetTierHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobGetAccountInfoHeaders = {
    serializedName: "blob-getaccountinfo-headers",
    type: {
        name: "Composite",
        className: "BlobGetAccountInfoHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            skuName: {
                serializedName: "x-ms-sku-name",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS"
                    ]
                }
            },
            accountKind: {
                serializedName: "x-ms-account-kind",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Storage",
                        "BlobStorage",
                        "StorageV2"
                    ]
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlockBlobStageBlockHeaders = {
    serializedName: "blockblob-stageblock-headers",
    type: {
        name: "Composite",
        className: "BlockBlobStageBlockHeaders",
        modelProperties: {
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlockBlobStageBlockFromURLHeaders = {
    serializedName: "blockblob-stageblockfromurl-headers",
    type: {
        name: "Composite",
        className: "BlockBlobStageBlockFromURLHeaders",
        modelProperties: {
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlockBlobCommitBlockListHeaders = {
    serializedName: "blockblob-commitblocklist-headers",
    type: {
        name: "Composite",
        className: "BlockBlobCommitBlockListHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            versionId: {
                serializedName: "x-ms-version-id",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlockBlobGetBlockListHeaders = {
    serializedName: "blockblob-getblocklist-headers",
    type: {
        name: "Composite",
        className: "BlockBlobGetBlockListHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            contentType: {
                serializedName: "content-type",
                type: {
                    name: "String"
                }
            },
            blobContentLength: {
                serializedName: "x-ms-blob-content-length",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var PageBlobUploadPagesHeaders = {
    serializedName: "pageblob-uploadpages-headers",
    type: {
        name: "Composite",
        className: "PageBlobUploadPagesHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var PageBlobClearPagesHeaders = {
    serializedName: "pageblob-clearpages-headers",
    type: {
        name: "Composite",
        className: "PageBlobClearPagesHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var PageBlobUploadPagesFromURLHeaders = {
    serializedName: "pageblob-uploadpagesfromurl-headers",
    type: {
        name: "Composite",
        className: "PageBlobUploadPagesFromURLHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var PageBlobGetPageRangesHeaders = {
    serializedName: "pageblob-getpageranges-headers",
    type: {
        name: "Composite",
        className: "PageBlobGetPageRangesHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            blobContentLength: {
                serializedName: "x-ms-blob-content-length",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var PageBlobGetPageRangesDiffHeaders = {
    serializedName: "pageblob-getpagerangesdiff-headers",
    type: {
        name: "Composite",
        className: "PageBlobGetPageRangesDiffHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            blobContentLength: {
                serializedName: "x-ms-blob-content-length",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var PageBlobResizeHeaders = {
    serializedName: "pageblob-resize-headers",
    type: {
        name: "Composite",
        className: "PageBlobResizeHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var PageBlobUpdateSequenceNumberHeaders = {
    serializedName: "pageblob-updatesequencenumber-headers",
    type: {
        name: "Composite",
        className: "PageBlobUpdateSequenceNumberHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var PageBlobCopyIncrementalHeaders = {
    serializedName: "pageblob-copyincremental-headers",
    type: {
        name: "Composite",
        className: "PageBlobCopyIncrementalHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var AppendBlobAppendBlockHeaders = {
    serializedName: "appendblob-appendblock-headers",
    type: {
        name: "Composite",
        className: "AppendBlobAppendBlockHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobAppendOffset: {
                serializedName: "x-ms-blob-append-offset",
                type: {
                    name: "String"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var AppendBlobAppendBlockFromUrlHeaders = {
    serializedName: "appendblob-appendblockfromurl-headers",
    type: {
        name: "Composite",
        className: "AppendBlobAppendBlockFromUrlHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            xMsContentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobAppendOffset: {
                serializedName: "x-ms-blob-append-offset",
                type: {
                    name: "String"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-request-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var AppendBlobSealHeaders = {
    serializedName: "appendblob-seal-headers",
    type: {
        name: "Composite",
        className: "AppendBlobSealHeaders",
        modelProperties: {
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            isSealed: {
                serializedName: "x-ms-blob-sealed",
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobQueryHeaders = {
    serializedName: "blob-query-headers",
    type: {
        name: "Composite",
        className: "BlobQueryHeaders",
        modelProperties: {
            lastModified: {
                serializedName: "last-modified",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            metadata: {
                serializedName: "x-ms-meta",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                },
                headerCollectionPrefix: "x-ms-meta-"
            },
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            contentType: {
                serializedName: "content-type",
                type: {
                    name: "String"
                }
            },
            contentRange: {
                serializedName: "content-range",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            contentMD5: {
                serializedName: "content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            contentEncoding: {
                serializedName: "content-encoding",
                type: {
                    name: "String"
                }
            },
            cacheControl: {
                serializedName: "cache-control",
                type: {
                    name: "String"
                }
            },
            contentDisposition: {
                serializedName: "content-disposition",
                type: {
                    name: "String"
                }
            },
            contentLanguage: {
                serializedName: "content-language",
                type: {
                    name: "String"
                }
            },
            blobSequenceNumber: {
                serializedName: "x-ms-blob-sequence-number",
                type: {
                    name: "Number"
                }
            },
            blobType: {
                serializedName: "x-ms-blob-type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "BlockBlob",
                        "PageBlob",
                        "AppendBlob"
                    ]
                }
            },
            copyCompletionTime: {
                serializedName: "x-ms-copy-completion-time",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            copyStatusDescription: {
                serializedName: "x-ms-copy-status-description",
                type: {
                    name: "String"
                }
            },
            copyId: {
                serializedName: "x-ms-copy-id",
                type: {
                    name: "String"
                }
            },
            copyProgress: {
                serializedName: "x-ms-copy-progress",
                type: {
                    name: "String"
                }
            },
            copySource: {
                serializedName: "x-ms-copy-source",
                type: {
                    name: "String"
                }
            },
            copyStatus: {
                serializedName: "x-ms-copy-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "pending",
                        "success",
                        "aborted",
                        "failed"
                    ]
                }
            },
            leaseDuration: {
                serializedName: "x-ms-lease-duration",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "infinite",
                        "fixed"
                    ]
                }
            },
            leaseState: {
                serializedName: "x-ms-lease-state",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "available",
                        "leased",
                        "expired",
                        "breaking",
                        "broken"
                    ]
                }
            },
            leaseStatus: {
                serializedName: "x-ms-lease-status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "locked",
                        "unlocked"
                    ]
                }
            },
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            acceptRanges: {
                serializedName: "accept-ranges",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            blobCommittedBlockCount: {
                serializedName: "x-ms-blob-committed-block-count",
                type: {
                    name: "Number"
                }
            },
            isServerEncrypted: {
                serializedName: "x-ms-server-encrypted",
                type: {
                    name: "Boolean"
                }
            },
            encryptionKeySha256: {
                serializedName: "x-ms-encryption-key-sha256",
                type: {
                    name: "String"
                }
            },
            encryptionScope: {
                serializedName: "x-ms-encryption-scope",
                type: {
                    name: "String"
                }
            },
            blobContentMD5: {
                serializedName: "x-ms-blob-content-md5",
                type: {
                    name: "ByteArray"
                }
            },
            contentCrc64: {
                serializedName: "x-ms-content-crc64",
                type: {
                    name: "ByteArray"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobGetTagsHeaders = {
    serializedName: "blob-gettags-headers",
    type: {
        name: "Composite",
        className: "BlobGetTagsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
var BlobSetTagsHeaders = {
    serializedName: "blob-settags-headers",
    type: {
        name: "Composite",
        className: "BlobSetTagsHeaders",
        modelProperties: {
            clientRequestId: {
                serializedName: "x-ms-client-request-id",
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "x-ms-version",
                type: {
                    name: "String"
                }
            },
            date: {
                serializedName: "date",
                type: {
                    name: "DateTimeRfc1123"
                }
            },
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
//# sourceMappingURL=mappers.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/pageBlobMappers.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/pageBlobMappers.js ***!
  \************************************************************************************************************/
/*! exports provided: ClearRange, PageBlobClearPagesHeaders, PageBlobCopyIncrementalHeaders, PageBlobCreateHeaders, PageBlobGetPageRangesDiffHeaders, PageBlobGetPageRangesHeaders, PageBlobResizeHeaders, PageBlobUpdateSequenceNumberHeaders, PageBlobUploadPagesFromURLHeaders, PageBlobUploadPagesHeaders, PageList, PageRange, StorageError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ClearRange", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ClearRange"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobClearPagesHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobClearPagesHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobCopyIncrementalHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobCopyIncrementalHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobCreateHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobCreateHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobGetPageRangesDiffHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobGetPageRangesDiffHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobGetPageRangesHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobGetPageRangesHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobResizeHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobResizeHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobUpdateSequenceNumberHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobUpdateSequenceNumberHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobUploadPagesFromURLHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobUploadPagesFromURLHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobUploadPagesHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageBlobUploadPagesHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageList", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageList"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageRange", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["PageRange"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["StorageError"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

//# sourceMappingURL=pageBlobMappers.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js ***!
  \*******************************************************************************************************/
/*! exports provided: access, action0, action1, action2, action3, action4, action5, action6, appendPosition, blobCacheControl, blobContentDisposition, blobContentEncoding, blobContentLanguage, blobContentLength, blobContentMD5, blobContentType, blobSequenceNumber, blobTagsString, blobType0, blobType1, blobType2, blockId, breakPeriod, cacheControl, comp0, comp1, comp10, comp11, comp12, comp13, comp14, comp15, comp16, comp17, comp18, comp19, comp2, comp20, comp21, comp22, comp3, comp4, comp5, comp6, comp7, comp8, comp9, contentDisposition, contentEncoding, contentLanguage, contentLength, contentType, copyActionAbortConstant, copyId, copySource, defaultEncryptionScope, deletedContainerName, deletedContainerVersion, deleteSnapshots, delimiter, directoryProperties, duration, encryptionAlgorithm, encryptionKey, encryptionKeySha256, encryptionScope, expiresOn, expiryOptions, group, ifMatch, ifModifiedSince, ifNoneMatch, ifSequenceNumberEqualTo, ifSequenceNumberLessThan, ifSequenceNumberLessThanOrEqualTo, ifTags, ifUnmodifiedSince, include0, include1, leaseId0, leaseId1, listType, marker0, marker1, maxPageSize, maxSize, metadata, multipartContentType, owner, pageWrite0, pageWrite1, pathRenameMode, posixAcl, posixPermissions, posixUmask, prefix, preventEncryptionScopeOverride, prevsnapshot, prevSnapshotUrl, proposedLeaseId0, proposedLeaseId1, range0, range1, rangeGetContentCRC64, rangeGetContentMD5, recursiveDirectoryDelete, rehydratePriority, renameSource, requestId, resource, restype0, restype1, restype2, sealBlob, sequenceNumberAction, snapshot, sourceContentCrc64, sourceContentMD5, sourceIfMatch, sourceIfModifiedSince, sourceIfNoneMatch, sourceIfTags, sourceIfUnmodifiedSince, sourceLeaseId, sourceRange0, sourceRange1, sourceUrl, tier0, tier1, timeoutInSeconds, transactionalContentCrc64, transactionalContentMD5, upn, url, version, versionId, where, xMsRequiresSync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "access", function() { return access; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action0", function() { return action0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action1", function() { return action1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action2", function() { return action2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action3", function() { return action3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action4", function() { return action4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action5", function() { return action5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "action6", function() { return action6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendPosition", function() { return appendPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobCacheControl", function() { return blobCacheControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobContentDisposition", function() { return blobContentDisposition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobContentEncoding", function() { return blobContentEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobContentLanguage", function() { return blobContentLanguage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobContentLength", function() { return blobContentLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobContentMD5", function() { return blobContentMD5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobContentType", function() { return blobContentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobSequenceNumber", function() { return blobSequenceNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobTagsString", function() { return blobTagsString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobType0", function() { return blobType0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobType1", function() { return blobType1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobType2", function() { return blobType2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blockId", function() { return blockId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "breakPeriod", function() { return breakPeriod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cacheControl", function() { return cacheControl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp0", function() { return comp0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp1", function() { return comp1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp10", function() { return comp10; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp11", function() { return comp11; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp12", function() { return comp12; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp13", function() { return comp13; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp14", function() { return comp14; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp15", function() { return comp15; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp16", function() { return comp16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp17", function() { return comp17; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp18", function() { return comp18; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp19", function() { return comp19; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp2", function() { return comp2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp20", function() { return comp20; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp21", function() { return comp21; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp22", function() { return comp22; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp3", function() { return comp3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp4", function() { return comp4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp5", function() { return comp5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp6", function() { return comp6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp7", function() { return comp7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp8", function() { return comp8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comp9", function() { return comp9; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contentDisposition", function() { return contentDisposition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contentEncoding", function() { return contentEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contentLanguage", function() { return contentLanguage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contentLength", function() { return contentLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contentType", function() { return contentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyActionAbortConstant", function() { return copyActionAbortConstant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyId", function() { return copyId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copySource", function() { return copySource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultEncryptionScope", function() { return defaultEncryptionScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deletedContainerName", function() { return deletedContainerName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deletedContainerVersion", function() { return deletedContainerVersion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteSnapshots", function() { return deleteSnapshots; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "delimiter", function() { return delimiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "directoryProperties", function() { return directoryProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duration", function() { return duration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encryptionAlgorithm", function() { return encryptionAlgorithm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encryptionKey", function() { return encryptionKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encryptionKeySha256", function() { return encryptionKeySha256; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encryptionScope", function() { return encryptionScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expiresOn", function() { return expiresOn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expiryOptions", function() { return expiryOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function() { return group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifMatch", function() { return ifMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifModifiedSince", function() { return ifModifiedSince; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifNoneMatch", function() { return ifNoneMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifSequenceNumberEqualTo", function() { return ifSequenceNumberEqualTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifSequenceNumberLessThan", function() { return ifSequenceNumberLessThan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifSequenceNumberLessThanOrEqualTo", function() { return ifSequenceNumberLessThanOrEqualTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifTags", function() { return ifTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifUnmodifiedSince", function() { return ifUnmodifiedSince; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "include0", function() { return include0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "include1", function() { return include1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "leaseId0", function() { return leaseId0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "leaseId1", function() { return leaseId1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "listType", function() { return listType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "marker0", function() { return marker0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "marker1", function() { return marker1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPageSize", function() { return maxPageSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxSize", function() { return maxSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "metadata", function() { return metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multipartContentType", function() { return multipartContentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "owner", function() { return owner; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pageWrite0", function() { return pageWrite0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pageWrite1", function() { return pageWrite1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pathRenameMode", function() { return pathRenameMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "posixAcl", function() { return posixAcl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "posixPermissions", function() { return posixPermissions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "posixUmask", function() { return posixUmask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prefix", function() { return prefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preventEncryptionScopeOverride", function() { return preventEncryptionScopeOverride; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prevsnapshot", function() { return prevsnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prevSnapshotUrl", function() { return prevSnapshotUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "proposedLeaseId0", function() { return proposedLeaseId0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "proposedLeaseId1", function() { return proposedLeaseId1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range0", function() { return range0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range1", function() { return range1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeGetContentCRC64", function() { return rangeGetContentCRC64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeGetContentMD5", function() { return rangeGetContentMD5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recursiveDirectoryDelete", function() { return recursiveDirectoryDelete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rehydratePriority", function() { return rehydratePriority; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renameSource", function() { return renameSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "requestId", function() { return requestId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resource", function() { return resource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "restype0", function() { return restype0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "restype1", function() { return restype1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "restype2", function() { return restype2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sealBlob", function() { return sealBlob; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceNumberAction", function() { return sequenceNumberAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snapshot", function() { return snapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceContentCrc64", function() { return sourceContentCrc64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceContentMD5", function() { return sourceContentMD5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceIfMatch", function() { return sourceIfMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceIfModifiedSince", function() { return sourceIfModifiedSince; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceIfNoneMatch", function() { return sourceIfNoneMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceIfTags", function() { return sourceIfTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceIfUnmodifiedSince", function() { return sourceIfUnmodifiedSince; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceLeaseId", function() { return sourceLeaseId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceRange0", function() { return sourceRange0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceRange1", function() { return sourceRange1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sourceUrl", function() { return sourceUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tier0", function() { return tier0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tier1", function() { return tier1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timeoutInSeconds", function() { return timeoutInSeconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transactionalContentCrc64", function() { return transactionalContentCrc64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transactionalContentMD5", function() { return transactionalContentMD5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upn", function() { return upn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "url", function() { return url; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "version", function() { return version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "versionId", function() { return versionId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "where", function() { return where; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xMsRequiresSync", function() { return xMsRequiresSync; });
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

var access = {
    parameterPath: [
        "options",
        "access"
    ],
    mapper: {
        serializedName: "x-ms-blob-public-access",
        type: {
            name: "String"
        }
    }
};
var action0 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-lease-action",
        defaultValue: 'acquire',
        type: {
            name: "String"
        }
    }
};
var action1 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-lease-action",
        defaultValue: 'release',
        type: {
            name: "String"
        }
    }
};
var action2 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-lease-action",
        defaultValue: 'renew',
        type: {
            name: "String"
        }
    }
};
var action3 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-lease-action",
        defaultValue: 'break',
        type: {
            name: "String"
        }
    }
};
var action4 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-lease-action",
        defaultValue: 'change',
        type: {
            name: "String"
        }
    }
};
var action5 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "action",
        defaultValue: 'setAccessControl',
        type: {
            name: "String"
        }
    }
};
var action6 = {
    parameterPath: "action",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "action",
        defaultValue: 'getAccessControl',
        type: {
            name: "String"
        }
    }
};
var appendPosition = {
    parameterPath: [
        "options",
        "appendPositionAccessConditions",
        "appendPosition"
    ],
    mapper: {
        serializedName: "x-ms-blob-condition-appendpos",
        type: {
            name: "Number"
        }
    }
};
var blobCacheControl = {
    parameterPath: [
        "options",
        "blobHTTPHeaders",
        "blobCacheControl"
    ],
    mapper: {
        serializedName: "x-ms-blob-cache-control",
        type: {
            name: "String"
        }
    }
};
var blobContentDisposition = {
    parameterPath: [
        "options",
        "blobHTTPHeaders",
        "blobContentDisposition"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-disposition",
        type: {
            name: "String"
        }
    }
};
var blobContentEncoding = {
    parameterPath: [
        "options",
        "blobHTTPHeaders",
        "blobContentEncoding"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-encoding",
        type: {
            name: "String"
        }
    }
};
var blobContentLanguage = {
    parameterPath: [
        "options",
        "blobHTTPHeaders",
        "blobContentLanguage"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-language",
        type: {
            name: "String"
        }
    }
};
var blobContentLength = {
    parameterPath: "blobContentLength",
    mapper: {
        required: true,
        serializedName: "x-ms-blob-content-length",
        type: {
            name: "Number"
        }
    }
};
var blobContentMD5 = {
    parameterPath: [
        "options",
        "blobHTTPHeaders",
        "blobContentMD5"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-md5",
        type: {
            name: "ByteArray"
        }
    }
};
var blobContentType = {
    parameterPath: [
        "options",
        "blobHTTPHeaders",
        "blobContentType"
    ],
    mapper: {
        serializedName: "x-ms-blob-content-type",
        type: {
            name: "String"
        }
    }
};
var blobSequenceNumber = {
    parameterPath: [
        "options",
        "blobSequenceNumber"
    ],
    mapper: {
        serializedName: "x-ms-blob-sequence-number",
        defaultValue: 0,
        type: {
            name: "Number"
        }
    }
};
var blobTagsString = {
    parameterPath: [
        "options",
        "blobTagsString"
    ],
    mapper: {
        serializedName: "x-ms-tags",
        type: {
            name: "String"
        }
    }
};
var blobType0 = {
    parameterPath: "blobType",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-blob-type",
        defaultValue: 'PageBlob',
        type: {
            name: "String"
        }
    }
};
var blobType1 = {
    parameterPath: "blobType",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-blob-type",
        defaultValue: 'AppendBlob',
        type: {
            name: "String"
        }
    }
};
var blobType2 = {
    parameterPath: "blobType",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-blob-type",
        defaultValue: 'BlockBlob',
        type: {
            name: "String"
        }
    }
};
var blockId = {
    parameterPath: "blockId",
    mapper: {
        required: true,
        serializedName: "blockid",
        type: {
            name: "String"
        }
    }
};
var breakPeriod = {
    parameterPath: [
        "options",
        "breakPeriod"
    ],
    mapper: {
        serializedName: "x-ms-lease-break-period",
        type: {
            name: "Number"
        }
    }
};
var cacheControl = {
    parameterPath: [
        "options",
        "directoryHttpHeaders",
        "cacheControl"
    ],
    mapper: {
        serializedName: "x-ms-cache-control",
        type: {
            name: "String"
        }
    }
};
var comp0 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'properties',
        type: {
            name: "String"
        }
    }
};
var comp1 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'stats',
        type: {
            name: "String"
        }
    }
};
var comp10 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'expiry',
        type: {
            name: "String"
        }
    }
};
var comp11 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'snapshot',
        type: {
            name: "String"
        }
    }
};
var comp12 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'copy',
        type: {
            name: "String"
        }
    }
};
var comp13 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'tier',
        type: {
            name: "String"
        }
    }
};
var comp14 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'query',
        type: {
            name: "String"
        }
    }
};
var comp15 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'tags',
        type: {
            name: "String"
        }
    }
};
var comp16 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'page',
        type: {
            name: "String"
        }
    }
};
var comp17 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'pagelist',
        type: {
            name: "String"
        }
    }
};
var comp18 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'incrementalcopy',
        type: {
            name: "String"
        }
    }
};
var comp19 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'appendblock',
        type: {
            name: "String"
        }
    }
};
var comp2 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'list',
        type: {
            name: "String"
        }
    }
};
var comp20 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'seal',
        type: {
            name: "String"
        }
    }
};
var comp21 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'block',
        type: {
            name: "String"
        }
    }
};
var comp22 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'blocklist',
        type: {
            name: "String"
        }
    }
};
var comp3 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'userdelegationkey',
        type: {
            name: "String"
        }
    }
};
var comp4 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'batch',
        type: {
            name: "String"
        }
    }
};
var comp5 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'blobs',
        type: {
            name: "String"
        }
    }
};
var comp6 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'metadata',
        type: {
            name: "String"
        }
    }
};
var comp7 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'acl',
        type: {
            name: "String"
        }
    }
};
var comp8 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'undelete',
        type: {
            name: "String"
        }
    }
};
var comp9 = {
    parameterPath: "comp",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "comp",
        defaultValue: 'lease',
        type: {
            name: "String"
        }
    }
};
var contentDisposition = {
    parameterPath: [
        "options",
        "directoryHttpHeaders",
        "contentDisposition"
    ],
    mapper: {
        serializedName: "x-ms-content-disposition",
        type: {
            name: "String"
        }
    }
};
var contentEncoding = {
    parameterPath: [
        "options",
        "directoryHttpHeaders",
        "contentEncoding"
    ],
    mapper: {
        serializedName: "x-ms-content-encoding",
        type: {
            name: "String"
        }
    }
};
var contentLanguage = {
    parameterPath: [
        "options",
        "directoryHttpHeaders",
        "contentLanguage"
    ],
    mapper: {
        serializedName: "x-ms-content-language",
        type: {
            name: "String"
        }
    }
};
var contentLength = {
    parameterPath: "contentLength",
    mapper: {
        required: true,
        serializedName: "Content-Length",
        type: {
            name: "Number"
        }
    }
};
var contentType = {
    parameterPath: [
        "options",
        "directoryHttpHeaders",
        "contentType"
    ],
    mapper: {
        serializedName: "x-ms-content-type",
        type: {
            name: "String"
        }
    }
};
var copyActionAbortConstant = {
    parameterPath: "copyActionAbortConstant",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-copy-action",
        defaultValue: 'abort',
        type: {
            name: "String"
        }
    }
};
var copyId = {
    parameterPath: "copyId",
    mapper: {
        required: true,
        serializedName: "copyid",
        type: {
            name: "String"
        }
    }
};
var copySource = {
    parameterPath: "copySource",
    mapper: {
        required: true,
        serializedName: "x-ms-copy-source",
        type: {
            name: "String"
        }
    }
};
var defaultEncryptionScope = {
    parameterPath: [
        "options",
        "containerEncryptionScope",
        "defaultEncryptionScope"
    ],
    mapper: {
        serializedName: "x-ms-default-encryption-scope",
        type: {
            name: "String"
        }
    }
};
var deletedContainerName = {
    parameterPath: [
        "options",
        "deletedContainerName"
    ],
    mapper: {
        serializedName: "x-ms-deleted-container-name",
        type: {
            name: "String"
        }
    }
};
var deletedContainerVersion = {
    parameterPath: [
        "options",
        "deletedContainerVersion"
    ],
    mapper: {
        serializedName: "x-ms-deleted-container-version",
        type: {
            name: "String"
        }
    }
};
var deleteSnapshots = {
    parameterPath: [
        "options",
        "deleteSnapshots"
    ],
    mapper: {
        serializedName: "x-ms-delete-snapshots",
        type: {
            name: "Enum",
            allowedValues: [
                "include",
                "only"
            ]
        }
    }
};
var delimiter = {
    parameterPath: "delimiter",
    mapper: {
        required: true,
        serializedName: "delimiter",
        type: {
            name: "String"
        }
    }
};
var directoryProperties = {
    parameterPath: [
        "options",
        "directoryProperties"
    ],
    mapper: {
        serializedName: "x-ms-properties",
        type: {
            name: "String"
        }
    }
};
var duration = {
    parameterPath: [
        "options",
        "duration"
    ],
    mapper: {
        serializedName: "x-ms-lease-duration",
        type: {
            name: "Number"
        }
    }
};
var encryptionAlgorithm = {
    parameterPath: [
        "options",
        "cpkInfo",
        "encryptionAlgorithm"
    ],
    mapper: {
        serializedName: "x-ms-encryption-algorithm",
        type: {
            name: "Enum",
            allowedValues: [
                "AES256"
            ]
        }
    }
};
var encryptionKey = {
    parameterPath: [
        "options",
        "cpkInfo",
        "encryptionKey"
    ],
    mapper: {
        serializedName: "x-ms-encryption-key",
        type: {
            name: "String"
        }
    }
};
var encryptionKeySha256 = {
    parameterPath: [
        "options",
        "cpkInfo",
        "encryptionKeySha256"
    ],
    mapper: {
        serializedName: "x-ms-encryption-key-sha256",
        type: {
            name: "String"
        }
    }
};
var encryptionScope = {
    parameterPath: [
        "options",
        "encryptionScope"
    ],
    mapper: {
        serializedName: "x-ms-encryption-scope",
        type: {
            name: "String"
        }
    }
};
var expiresOn = {
    parameterPath: [
        "options",
        "expiresOn"
    ],
    mapper: {
        serializedName: "x-ms-expiry-time",
        type: {
            name: "String"
        }
    }
};
var expiryOptions = {
    parameterPath: "expiryOptions",
    mapper: {
        required: true,
        serializedName: "x-ms-expiry-option",
        type: {
            name: "String"
        }
    }
};
var group = {
    parameterPath: [
        "options",
        "group"
    ],
    mapper: {
        serializedName: "x-ms-group",
        type: {
            name: "String"
        }
    }
};
var ifMatch = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifMatch"
    ],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
var ifModifiedSince = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifModifiedSince"
    ],
    mapper: {
        serializedName: "If-Modified-Since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
var ifNoneMatch = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifNoneMatch"
    ],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
var ifSequenceNumberEqualTo = {
    parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberEqualTo"
    ],
    mapper: {
        serializedName: "x-ms-if-sequence-number-eq",
        type: {
            name: "Number"
        }
    }
};
var ifSequenceNumberLessThan = {
    parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberLessThan"
    ],
    mapper: {
        serializedName: "x-ms-if-sequence-number-lt",
        type: {
            name: "Number"
        }
    }
};
var ifSequenceNumberLessThanOrEqualTo = {
    parameterPath: [
        "options",
        "sequenceNumberAccessConditions",
        "ifSequenceNumberLessThanOrEqualTo"
    ],
    mapper: {
        serializedName: "x-ms-if-sequence-number-le",
        type: {
            name: "Number"
        }
    }
};
var ifTags = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifTags"
    ],
    mapper: {
        serializedName: "x-ms-if-tags",
        type: {
            name: "String"
        }
    }
};
var ifUnmodifiedSince = {
    parameterPath: [
        "options",
        "modifiedAccessConditions",
        "ifUnmodifiedSince"
    ],
    mapper: {
        serializedName: "If-Unmodified-Since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
var include0 = {
    parameterPath: [
        "options",
        "include"
    ],
    mapper: {
        serializedName: "include",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Enum",
                    allowedValues: [
                        "metadata",
                        "deleted"
                    ]
                }
            }
        }
    },
    collectionFormat: _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["QueryCollectionFormat"].Csv
};
var include1 = {
    parameterPath: [
        "options",
        "include"
    ],
    mapper: {
        serializedName: "include",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Enum",
                    allowedValues: [
                        "copy",
                        "deleted",
                        "metadata",
                        "snapshots",
                        "uncommittedblobs",
                        "versions",
                        "tags"
                    ]
                }
            }
        }
    },
    collectionFormat: _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["QueryCollectionFormat"].Csv
};
var leaseId0 = {
    parameterPath: [
        "options",
        "leaseAccessConditions",
        "leaseId"
    ],
    mapper: {
        serializedName: "x-ms-lease-id",
        type: {
            name: "String"
        }
    }
};
var leaseId1 = {
    parameterPath: "leaseId",
    mapper: {
        required: true,
        serializedName: "x-ms-lease-id",
        type: {
            name: "String"
        }
    }
};
var listType = {
    parameterPath: "listType",
    mapper: {
        required: true,
        serializedName: "blocklisttype",
        defaultValue: 'committed',
        type: {
            name: "Enum",
            allowedValues: [
                "committed",
                "uncommitted",
                "all"
            ]
        }
    }
};
var marker0 = {
    parameterPath: [
        "options",
        "marker"
    ],
    mapper: {
        serializedName: "marker",
        type: {
            name: "String"
        }
    }
};
var marker1 = {
    parameterPath: [
        "options",
        "marker"
    ],
    mapper: {
        serializedName: "continuation",
        type: {
            name: "String"
        }
    }
};
var maxPageSize = {
    parameterPath: [
        "options",
        "maxPageSize"
    ],
    mapper: {
        serializedName: "maxresults",
        constraints: {
            InclusiveMinimum: 1
        },
        type: {
            name: "Number"
        }
    }
};
var maxSize = {
    parameterPath: [
        "options",
        "appendPositionAccessConditions",
        "maxSize"
    ],
    mapper: {
        serializedName: "x-ms-blob-condition-maxsize",
        type: {
            name: "Number"
        }
    }
};
var metadata = {
    parameterPath: [
        "options",
        "metadata"
    ],
    mapper: {
        serializedName: "x-ms-meta",
        type: {
            name: "Dictionary",
            value: {
                type: {
                    name: "String"
                }
            }
        },
        headerCollectionPrefix: "x-ms-meta-"
    }
};
var multipartContentType = {
    parameterPath: "multipartContentType",
    mapper: {
        required: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
var owner = {
    parameterPath: [
        "options",
        "owner"
    ],
    mapper: {
        serializedName: "x-ms-owner",
        type: {
            name: "String"
        }
    }
};
var pageWrite0 = {
    parameterPath: "pageWrite",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-page-write",
        defaultValue: 'update',
        type: {
            name: "String"
        }
    }
};
var pageWrite1 = {
    parameterPath: "pageWrite",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-page-write",
        defaultValue: 'clear',
        type: {
            name: "String"
        }
    }
};
var pathRenameMode = {
    parameterPath: [
        "options",
        "pathRenameMode"
    ],
    mapper: {
        serializedName: "mode",
        type: {
            name: "Enum",
            allowedValues: [
                "legacy",
                "posix"
            ]
        }
    }
};
var posixAcl = {
    parameterPath: [
        "options",
        "posixAcl"
    ],
    mapper: {
        serializedName: "x-ms-acl",
        type: {
            name: "String"
        }
    }
};
var posixPermissions = {
    parameterPath: [
        "options",
        "posixPermissions"
    ],
    mapper: {
        serializedName: "x-ms-permissions",
        type: {
            name: "String"
        }
    }
};
var posixUmask = {
    parameterPath: [
        "options",
        "posixUmask"
    ],
    mapper: {
        serializedName: "x-ms-umask",
        type: {
            name: "String"
        }
    }
};
var prefix = {
    parameterPath: [
        "options",
        "prefix"
    ],
    mapper: {
        serializedName: "prefix",
        type: {
            name: "String"
        }
    }
};
var preventEncryptionScopeOverride = {
    parameterPath: [
        "options",
        "containerEncryptionScope",
        "preventEncryptionScopeOverride"
    ],
    mapper: {
        serializedName: "x-ms-deny-encryption-scope-override",
        type: {
            name: "Boolean"
        }
    }
};
var prevsnapshot = {
    parameterPath: [
        "options",
        "prevsnapshot"
    ],
    mapper: {
        serializedName: "prevsnapshot",
        type: {
            name: "String"
        }
    }
};
var prevSnapshotUrl = {
    parameterPath: [
        "options",
        "prevSnapshotUrl"
    ],
    mapper: {
        serializedName: "x-ms-previous-snapshot-url",
        type: {
            name: "String"
        }
    }
};
var proposedLeaseId0 = {
    parameterPath: [
        "options",
        "proposedLeaseId"
    ],
    mapper: {
        serializedName: "x-ms-proposed-lease-id",
        type: {
            name: "String"
        }
    }
};
var proposedLeaseId1 = {
    parameterPath: "proposedLeaseId",
    mapper: {
        required: true,
        serializedName: "x-ms-proposed-lease-id",
        type: {
            name: "String"
        }
    }
};
var range0 = {
    parameterPath: [
        "options",
        "range"
    ],
    mapper: {
        serializedName: "x-ms-range",
        type: {
            name: "String"
        }
    }
};
var range1 = {
    parameterPath: "range",
    mapper: {
        required: true,
        serializedName: "x-ms-range",
        type: {
            name: "String"
        }
    }
};
var rangeGetContentCRC64 = {
    parameterPath: [
        "options",
        "rangeGetContentCRC64"
    ],
    mapper: {
        serializedName: "x-ms-range-get-content-crc64",
        type: {
            name: "Boolean"
        }
    }
};
var rangeGetContentMD5 = {
    parameterPath: [
        "options",
        "rangeGetContentMD5"
    ],
    mapper: {
        serializedName: "x-ms-range-get-content-md5",
        type: {
            name: "Boolean"
        }
    }
};
var recursiveDirectoryDelete = {
    parameterPath: "recursiveDirectoryDelete",
    mapper: {
        required: true,
        serializedName: "recursive",
        type: {
            name: "Boolean"
        }
    }
};
var rehydratePriority = {
    parameterPath: [
        "options",
        "rehydratePriority"
    ],
    mapper: {
        serializedName: "x-ms-rehydrate-priority",
        type: {
            name: "String"
        }
    }
};
var renameSource = {
    parameterPath: "renameSource",
    mapper: {
        required: true,
        serializedName: "x-ms-rename-source",
        type: {
            name: "String"
        }
    }
};
var requestId = {
    parameterPath: [
        "options",
        "requestId"
    ],
    mapper: {
        serializedName: "x-ms-client-request-id",
        type: {
            name: "String"
        }
    }
};
var resource = {
    parameterPath: "resource",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "resource",
        defaultValue: 'directory',
        type: {
            name: "String"
        }
    }
};
var restype0 = {
    parameterPath: "restype",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "restype",
        defaultValue: 'service',
        type: {
            name: "String"
        }
    }
};
var restype1 = {
    parameterPath: "restype",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "restype",
        defaultValue: 'account',
        type: {
            name: "String"
        }
    }
};
var restype2 = {
    parameterPath: "restype",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "restype",
        defaultValue: 'container',
        type: {
            name: "String"
        }
    }
};
var sealBlob = {
    parameterPath: [
        "options",
        "sealBlob"
    ],
    mapper: {
        serializedName: "x-ms-seal-blob",
        type: {
            name: "Boolean"
        }
    }
};
var sequenceNumberAction = {
    parameterPath: "sequenceNumberAction",
    mapper: {
        required: true,
        serializedName: "x-ms-sequence-number-action",
        type: {
            name: "Enum",
            allowedValues: [
                "max",
                "update",
                "increment"
            ]
        }
    }
};
var snapshot = {
    parameterPath: [
        "options",
        "snapshot"
    ],
    mapper: {
        serializedName: "snapshot",
        type: {
            name: "String"
        }
    }
};
var sourceContentCrc64 = {
    parameterPath: [
        "options",
        "sourceContentCrc64"
    ],
    mapper: {
        serializedName: "x-ms-source-content-crc64",
        type: {
            name: "ByteArray"
        }
    }
};
var sourceContentMD5 = {
    parameterPath: [
        "options",
        "sourceContentMD5"
    ],
    mapper: {
        serializedName: "x-ms-source-content-md5",
        type: {
            name: "ByteArray"
        }
    }
};
var sourceIfMatch = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfMatch"
    ],
    mapper: {
        serializedName: "x-ms-source-if-match",
        type: {
            name: "String"
        }
    }
};
var sourceIfModifiedSince = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfModifiedSince"
    ],
    mapper: {
        serializedName: "x-ms-source-if-modified-since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
var sourceIfNoneMatch = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfNoneMatch"
    ],
    mapper: {
        serializedName: "x-ms-source-if-none-match",
        type: {
            name: "String"
        }
    }
};
var sourceIfTags = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfTags"
    ],
    mapper: {
        serializedName: "x-ms-source-if-tags",
        type: {
            name: "String"
        }
    }
};
var sourceIfUnmodifiedSince = {
    parameterPath: [
        "options",
        "sourceModifiedAccessConditions",
        "sourceIfUnmodifiedSince"
    ],
    mapper: {
        serializedName: "x-ms-source-if-unmodified-since",
        type: {
            name: "DateTimeRfc1123"
        }
    }
};
var sourceLeaseId = {
    parameterPath: [
        "options",
        "sourceLeaseId"
    ],
    mapper: {
        serializedName: "x-ms-source-lease-id",
        type: {
            name: "String"
        }
    }
};
var sourceRange0 = {
    parameterPath: "sourceRange",
    mapper: {
        required: true,
        serializedName: "x-ms-source-range",
        type: {
            name: "String"
        }
    }
};
var sourceRange1 = {
    parameterPath: [
        "options",
        "sourceRange"
    ],
    mapper: {
        serializedName: "x-ms-source-range",
        type: {
            name: "String"
        }
    }
};
var sourceUrl = {
    parameterPath: "sourceUrl",
    mapper: {
        required: true,
        serializedName: "x-ms-copy-source",
        type: {
            name: "String"
        }
    }
};
var tier0 = {
    parameterPath: [
        "options",
        "tier"
    ],
    mapper: {
        serializedName: "x-ms-access-tier",
        type: {
            name: "String"
        }
    }
};
var tier1 = {
    parameterPath: "tier",
    mapper: {
        required: true,
        serializedName: "x-ms-access-tier",
        type: {
            name: "String"
        }
    }
};
var timeoutInSeconds = {
    parameterPath: [
        "options",
        "timeoutInSeconds"
    ],
    mapper: {
        serializedName: "timeout",
        constraints: {
            InclusiveMinimum: 0
        },
        type: {
            name: "Number"
        }
    }
};
var transactionalContentCrc64 = {
    parameterPath: [
        "options",
        "transactionalContentCrc64"
    ],
    mapper: {
        serializedName: "x-ms-content-crc64",
        type: {
            name: "ByteArray"
        }
    }
};
var transactionalContentMD5 = {
    parameterPath: [
        "options",
        "transactionalContentMD5"
    ],
    mapper: {
        serializedName: "Content-MD5",
        type: {
            name: "ByteArray"
        }
    }
};
var upn = {
    parameterPath: [
        "options",
        "upn"
    ],
    mapper: {
        serializedName: "upn",
        type: {
            name: "Boolean"
        }
    }
};
var url = {
    parameterPath: "url",
    mapper: {
        required: true,
        serializedName: "url",
        defaultValue: '',
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
var version = {
    parameterPath: "version",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-version",
        defaultValue: '2019-12-12',
        type: {
            name: "String"
        }
    }
};
var versionId = {
    parameterPath: [
        "options",
        "versionId"
    ],
    mapper: {
        serializedName: "versionid",
        type: {
            name: "String"
        }
    }
};
var where = {
    parameterPath: [
        "options",
        "where"
    ],
    mapper: {
        serializedName: "where",
        type: {
            name: "String"
        }
    }
};
var xMsRequiresSync = {
    parameterPath: "xMsRequiresSync",
    mapper: {
        required: true,
        isConstant: true,
        serializedName: "x-ms-requires-sync",
        defaultValue: 'true',
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/serviceMappers.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/serviceMappers.js ***!
  \***********************************************************************************************************/
/*! exports provided: BlobServiceProperties, BlobServiceStatistics, ContainerItem, ContainerProperties, CorsRule, FilterBlobItem, FilterBlobSegment, GeoReplication, KeyInfo, ListContainersSegmentResponse, Logging, Metrics, RetentionPolicy, ServiceFilterBlobsHeaders, ServiceGetAccountInfoHeaders, ServiceGetPropertiesHeaders, ServiceGetStatisticsHeaders, ServiceGetUserDelegationKeyHeaders, ServiceListContainersSegmentHeaders, ServiceSetPropertiesHeaders, ServiceSubmitBatchHeaders, StaticWebsite, StorageError, UserDelegationKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobServiceProperties", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobServiceProperties"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobServiceStatistics", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["BlobServiceStatistics"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerItem", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerProperties", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ContainerProperties"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CorsRule", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["CorsRule"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FilterBlobItem", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["FilterBlobItem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FilterBlobSegment", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["FilterBlobSegment"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GeoReplication", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["GeoReplication"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeyInfo", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["KeyInfo"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListContainersSegmentResponse", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ListContainersSegmentResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Logging", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["Logging"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Metrics", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["Metrics"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RetentionPolicy", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["RetentionPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceFilterBlobsHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ServiceFilterBlobsHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceGetAccountInfoHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ServiceGetAccountInfoHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceGetPropertiesHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ServiceGetPropertiesHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceGetStatisticsHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ServiceGetStatisticsHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceGetUserDelegationKeyHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ServiceGetUserDelegationKeyHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceListContainersSegmentHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ServiceListContainersSegmentHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceSetPropertiesHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ServiceSetPropertiesHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServiceSubmitBatchHeaders", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["ServiceSubmitBatchHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StaticWebsite", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["StaticWebsite"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageError", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["StorageError"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UserDelegationKey", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_0__["UserDelegationKey"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

//# sourceMappingURL=serviceMappers.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js ***!
  \***********************************************************************************************************/
/*! exports provided: AppendBlob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppendBlob", function() { return AppendBlob; });
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/appendBlobMappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/appendBlobMappers.js");
/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */



/** Class representing a AppendBlob. */
var AppendBlob = /** @class */ (function () {
    /**
     * Create a AppendBlob.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function AppendBlob(client) {
        this.client = client;
    }
    AppendBlob.prototype.create = function (contentLength, options, callback) {
        return this.client.sendOperationRequest({
            contentLength: contentLength,
            options: options
        }, createOperationSpec, callback);
    };
    AppendBlob.prototype.appendBlock = function (body, contentLength, options, callback) {
        return this.client.sendOperationRequest({
            body: body,
            contentLength: contentLength,
            options: options
        }, appendBlockOperationSpec, callback);
    };
    AppendBlob.prototype.appendBlockFromUrl = function (sourceUrl, contentLength, options, callback) {
        return this.client.sendOperationRequest({
            sourceUrl: sourceUrl,
            contentLength: contentLength,
            options: options
        }, appendBlockFromUrlOperationSpec, callback);
    };
    AppendBlob.prototype.seal = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, sealOperationSpec, callback);
    };
    return AppendBlob;
}());

// Operation Specifications
var serializer = new _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["Serializer"](_models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__, true);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobTagsString"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobType1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentEncoding"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentLanguage"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobCacheControl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentDisposition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        201: {
            headersMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["AppendBlobCreateHeaders"]
        },
        default: {
            bodyMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["AppendBlobCreateHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var appendBlockOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp19"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["transactionalContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["transactionalContentCrc64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["maxSize"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["appendPosition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        201: {
            headersMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["AppendBlobAppendBlockHeaders"]
        },
        default: {
            bodyMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["AppendBlobAppendBlockHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var appendBlockFromUrlOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp19"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceUrl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceRange1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceContentCrc64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["transactionalContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["maxSize"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["appendPosition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfNoneMatch"]
    ],
    responses: {
        201: {
            headersMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["AppendBlobAppendBlockFromUrlHeaders"]
        },
        default: {
            bodyMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["AppendBlobAppendBlockFromUrlHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var sealOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp20"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["appendPosition"]
    ],
    responses: {
        200: {
            headersMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["AppendBlobSealHeaders"]
        },
        default: {
            bodyMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_appendBlobMappers__WEBPACK_IMPORTED_MODULE_1__["AppendBlobSealHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=appendBlob.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js ***!
  \*****************************************************************************************************/
/*! exports provided: Blob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Blob", function() { return Blob; });
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/blobMappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blobMappers.js");
/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */



/** Class representing a Blob. */
var Blob = /** @class */ (function () {
    /**
     * Create a Blob.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Blob(client) {
        this.client = client;
    }
    Blob.prototype.download = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, downloadOperationSpec, callback);
    };
    Blob.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    Blob.prototype.deleteMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Blob.prototype.setAccessControl = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setAccessControlOperationSpec, callback);
    };
    Blob.prototype.getAccessControl = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAccessControlOperationSpec, callback);
    };
    Blob.prototype.rename = function (renameSource, options, callback) {
        return this.client.sendOperationRequest({
            renameSource: renameSource,
            options: options
        }, renameOperationSpec, callback);
    };
    Blob.prototype.undelete = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, undeleteOperationSpec, callback);
    };
    Blob.prototype.setExpiry = function (expiryOptions, options, callback) {
        return this.client.sendOperationRequest({
            expiryOptions: expiryOptions,
            options: options
        }, setExpiryOperationSpec, callback);
    };
    Blob.prototype.setHTTPHeaders = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setHTTPHeadersOperationSpec, callback);
    };
    Blob.prototype.setMetadata = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setMetadataOperationSpec, callback);
    };
    Blob.prototype.acquireLease = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, acquireLeaseOperationSpec, callback);
    };
    Blob.prototype.releaseLease = function (leaseId, options, callback) {
        return this.client.sendOperationRequest({
            leaseId: leaseId,
            options: options
        }, releaseLeaseOperationSpec, callback);
    };
    Blob.prototype.renewLease = function (leaseId, options, callback) {
        return this.client.sendOperationRequest({
            leaseId: leaseId,
            options: options
        }, renewLeaseOperationSpec, callback);
    };
    Blob.prototype.changeLease = function (leaseId, proposedLeaseId, options, callback) {
        return this.client.sendOperationRequest({
            leaseId: leaseId,
            proposedLeaseId: proposedLeaseId,
            options: options
        }, changeLeaseOperationSpec, callback);
    };
    Blob.prototype.breakLease = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, breakLeaseOperationSpec, callback);
    };
    Blob.prototype.createSnapshot = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, createSnapshotOperationSpec, callback);
    };
    Blob.prototype.startCopyFromURL = function (copySource, options, callback) {
        return this.client.sendOperationRequest({
            copySource: copySource,
            options: options
        }, startCopyFromURLOperationSpec, callback);
    };
    Blob.prototype.copyFromURL = function (copySource, options, callback) {
        return this.client.sendOperationRequest({
            copySource: copySource,
            options: options
        }, copyFromURLOperationSpec, callback);
    };
    Blob.prototype.abortCopyFromURL = function (copyId, options, callback) {
        return this.client.sendOperationRequest({
            copyId: copyId,
            options: options
        }, abortCopyFromURLOperationSpec, callback);
    };
    Blob.prototype.setTier = function (tier, options, callback) {
        return this.client.sendOperationRequest({
            tier: tier,
            options: options
        }, setTierOperationSpec, callback);
    };
    Blob.prototype.getAccountInfo = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAccountInfoOperationSpec, callback);
    };
    Blob.prototype.query = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, queryOperationSpec, callback);
    };
    Blob.prototype.getTags = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getTagsOperationSpec, callback);
    };
    Blob.prototype.setTags = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setTagsOperationSpec, callback);
    };
    return Blob;
}());

// Operation Specifications
var serializer = new _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["Serializer"](_models_blobMappers__WEBPACK_IMPORTED_MODULE_1__, true);
var downloadOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["versionId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["range0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["rangeGetContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["rangeGetContentCRC64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobDownloadHeaders"]
        },
        206: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobDownloadHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobDownloadHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "HEAD",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["versionId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobGetPropertiesHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobGetPropertiesHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["versionId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["deleteSnapshots"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        202: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobDeleteHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobDeleteHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setAccessControlOperationSpec = {
    httpMethod: "PATCH",
    path: "{filesystem}/{path}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action5"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["owner"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["group"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixPermissions"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixAcl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetAccessControlHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["DataLakeStorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetAccessControlHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getAccessControlOperationSpec = {
    httpMethod: "HEAD",
    path: "{filesystem}/{path}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["upn"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action6"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobGetAccessControlHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["DataLakeStorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobGetAccessControlHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var renameOperationSpec = {
    httpMethod: "PUT",
    path: "{filesystem}/{path}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["pathRenameMode"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["renameSource"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["directoryProperties"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixPermissions"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixUmask"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceLeaseId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["cacheControl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentEncoding"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLanguage"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentDisposition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfNoneMatch"]
    ],
    responses: {
        201: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobRenameHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["DataLakeStorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobRenameHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var undeleteOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp8"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobUndeleteHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobUndeleteHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setExpiryOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp10"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["expiryOptions"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["expiresOn"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetExpiryHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetExpiryHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setHTTPHeadersOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp0"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobCacheControl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentEncoding"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentLanguage"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentDisposition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetHTTPHeadersHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetHTTPHeadersHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setMetadataOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp6"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetMetadataHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetMetadataHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var acquireLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["duration"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["proposedLeaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        201: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobAcquireLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobAcquireLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var releaseLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobReleaseLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobReleaseLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var renewLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobRenewLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobRenewLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var changeLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["proposedLeaseId1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action4"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobChangeLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobChangeLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var breakLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["breakPeriod"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action3"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        202: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobBreakLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobBreakLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var createSnapshotOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp11"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"]
    ],
    responses: {
        201: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobCreateSnapshotHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobCreateSnapshotHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var startCopyFromURLOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["tier0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["rehydratePriority"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["copySource"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobTagsString"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sealBlob"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfTags"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"]
    ],
    responses: {
        202: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobStartCopyFromURLHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobStartCopyFromURLHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var copyFromURLOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["tier0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["copySource"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobTagsString"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sealBlob"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["xMsRequiresSync"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"]
    ],
    responses: {
        202: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobCopyFromURLHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobCopyFromURLHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var abortCopyFromURLOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["copyId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp12"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["copyActionAbortConstant"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"]
    ],
    responses: {
        204: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobAbortCopyFromURLHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobAbortCopyFromURLHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setTierOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["versionId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp13"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["tier1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["rehydratePriority"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetTierHeaders"]
        },
        202: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetTierHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetTierHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getAccountInfoOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp0"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"]
    ],
    responses: {
        200: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobGetAccountInfoHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobGetAccountInfoHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var queryOperationSpec = {
    httpMethod: "POST",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp14"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"]
    ],
    requestBody: {
        parameterPath: [
            "options",
            "queryRequest"
        ],
        mapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["QueryRequest"]
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobQueryHeaders"]
        },
        206: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobQueryHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobQueryHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getTagsOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["versionId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp15"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobTags"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobGetTagsHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobGetTagsHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setTagsOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["versionId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp15"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["transactionalContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["transactionalContentCrc64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    requestBody: {
        parameterPath: [
            "options",
            "tags"
        ],
        mapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobTags"]
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        204: {
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetTagsHeaders"]
        },
        default: {
            bodyMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_blobMappers__WEBPACK_IMPORTED_MODULE_1__["BlobSetTagsHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=blob.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js ***!
  \**********************************************************************************************************/
/*! exports provided: BlockBlob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockBlob", function() { return BlockBlob; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/blockBlobMappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/blockBlobMappers.js");
/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/parameters */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */




/** Class representing a BlockBlob. */
var BlockBlob = /** @class */ (function () {
    /**
     * Create a BlockBlob.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function BlockBlob(client) {
        this.client = client;
    }
    BlockBlob.prototype.upload = function (body, contentLength, options, callback) {
        return this.client.sendOperationRequest({
            body: body,
            contentLength: contentLength,
            options: options
        }, uploadOperationSpec, callback);
    };
    BlockBlob.prototype.stageBlock = function (blockId, contentLength, body, options, callback) {
        return this.client.sendOperationRequest({
            blockId: blockId,
            contentLength: contentLength,
            body: body,
            options: options
        }, stageBlockOperationSpec, callback);
    };
    BlockBlob.prototype.stageBlockFromURL = function (blockId, contentLength, sourceUrl, options, callback) {
        return this.client.sendOperationRequest({
            blockId: blockId,
            contentLength: contentLength,
            sourceUrl: sourceUrl,
            options: options
        }, stageBlockFromURLOperationSpec, callback);
    };
    BlockBlob.prototype.commitBlockList = function (blocks, options, callback) {
        return this.client.sendOperationRequest({
            blocks: blocks,
            options: options
        }, commitBlockListOperationSpec, callback);
    };
    BlockBlob.prototype.getBlockList = function (listType, options, callback) {
        return this.client.sendOperationRequest({
            listType: listType,
            options: options
        }, getBlockListOperationSpec, callback);
    };
    return BlockBlob;
}());

// Operation Specifications
var serializer = new _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["Serializer"](_models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__, true);
var uploadOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["transactionalContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["tier0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobTagsString"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobType2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentEncoding"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentLanguage"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobCacheControl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentDisposition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifTags"]
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        201: {
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobUploadHeaders"]
        },
        default: {
            bodyMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobUploadHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var stageBlockOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blockId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp21"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["transactionalContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["transactionalContentCrc64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionAlgorithm"]
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        201: {
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobStageBlockHeaders"]
        },
        default: {
            bodyMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobStageBlockHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var stageBlockFromURLOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blockId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp21"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["sourceUrl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["sourceRange1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["sourceContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["sourceContentCrc64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["sourceIfModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["sourceIfUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["sourceIfMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["sourceIfNoneMatch"]
    ],
    responses: {
        201: {
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobStageBlockFromURLHeaders"]
        },
        default: {
            bodyMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobStageBlockFromURLHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var commitBlockListOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp22"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["transactionalContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["transactionalContentCrc64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["tier0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobTagsString"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobCacheControl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentEncoding"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentLanguage"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["blobContentDisposition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifTags"]
    ],
    requestBody: {
        parameterPath: "blocks",
        mapper: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockLookupList"]), { required: true })
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        201: {
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobCommitBlockListHeaders"]
        },
        default: {
            bodyMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobCommitBlockListHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getBlockListOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["listType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp22"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["ifTags"]
    ],
    responses: {
        200: {
            bodyMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockList"],
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobGetBlockListHeaders"]
        },
        default: {
            bodyMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_blockBlobMappers__WEBPACK_IMPORTED_MODULE_2__["BlockBlobGetBlockListHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=blockBlob.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js ***!
  \**********************************************************************************************************/
/*! exports provided: Container */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Container", function() { return Container; });
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/containerMappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/containerMappers.js");
/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */



/** Class representing a Container. */
var Container = /** @class */ (function () {
    /**
     * Create a Container.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Container(client) {
        this.client = client;
    }
    Container.prototype.create = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, createOperationSpec, callback);
    };
    Container.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    Container.prototype.deleteMethod = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Container.prototype.setMetadata = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setMetadataOperationSpec, callback);
    };
    Container.prototype.getAccessPolicy = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAccessPolicyOperationSpec, callback);
    };
    Container.prototype.setAccessPolicy = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setAccessPolicyOperationSpec, callback);
    };
    Container.prototype.restore = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, restoreOperationSpec, callback);
    };
    Container.prototype.acquireLease = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, acquireLeaseOperationSpec, callback);
    };
    Container.prototype.releaseLease = function (leaseId, options, callback) {
        return this.client.sendOperationRequest({
            leaseId: leaseId,
            options: options
        }, releaseLeaseOperationSpec, callback);
    };
    Container.prototype.renewLease = function (leaseId, options, callback) {
        return this.client.sendOperationRequest({
            leaseId: leaseId,
            options: options
        }, renewLeaseOperationSpec, callback);
    };
    Container.prototype.breakLease = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, breakLeaseOperationSpec, callback);
    };
    Container.prototype.changeLease = function (leaseId, proposedLeaseId, options, callback) {
        return this.client.sendOperationRequest({
            leaseId: leaseId,
            proposedLeaseId: proposedLeaseId,
            options: options
        }, changeLeaseOperationSpec, callback);
    };
    Container.prototype.listBlobFlatSegment = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listBlobFlatSegmentOperationSpec, callback);
    };
    Container.prototype.listBlobHierarchySegment = function (delimiter, options, callback) {
        return this.client.sendOperationRequest({
            delimiter: delimiter,
            options: options
        }, listBlobHierarchySegmentOperationSpec, callback);
    };
    Container.prototype.getAccountInfo = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAccountInfoOperationSpec, callback);
    };
    return Container;
}());

// Operation Specifications
var serializer = new _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["Serializer"](_models_containerMappers__WEBPACK_IMPORTED_MODULE_1__, true);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["access"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["defaultEncryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["preventEncryptionScopeOverride"]
    ],
    responses: {
        201: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerCreateHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerCreateHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"]
    ],
    responses: {
        200: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerGetPropertiesHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerGetPropertiesHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        202: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerDeleteHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerDeleteHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setMetadataOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp6"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"]
    ],
    responses: {
        200: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerSetMetadataHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerSetMetadataHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getAccessPolicyOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp7"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"]
    ],
    responses: {
        200: {
            bodyMapper: {
                xmlElementName: "SignedIdentifier",
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SignedIdentifier"
                        }
                    }
                }
            },
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerGetAccessPolicyHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerGetAccessPolicyHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setAccessPolicyOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp7"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["access"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    requestBody: {
        parameterPath: [
            "options",
            "containerAcl"
        ],
        mapper: {
            xmlName: "SignedIdentifiers",
            xmlElementName: "SignedIdentifier",
            serializedName: "containerAcl",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Composite",
                        className: "SignedIdentifier"
                    }
                }
            }
        }
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        200: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerSetAccessPolicyHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerSetAccessPolicyHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var restoreOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp8"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["deletedContainerName"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["deletedContainerVersion"]
    ],
    responses: {
        201: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerRestoreHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerRestoreHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var acquireLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["duration"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["proposedLeaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        201: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerAcquireLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerAcquireLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var releaseLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        200: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerReleaseLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerReleaseLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var renewLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        200: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerRenewLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerRenewLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var breakLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["breakPeriod"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action3"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        202: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerBreakLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerBreakLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var changeLeaseOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp9"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["proposedLeaseId1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action4"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        200: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerChangeLeaseHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerChangeLeaseHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var listBlobFlatSegmentOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["prefix"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["marker0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["maxPageSize"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["include1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"]
    ],
    responses: {
        200: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ListBlobsFlatSegmentResponse"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerListBlobFlatSegmentHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerListBlobFlatSegmentHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var listBlobHierarchySegmentOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["prefix"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["delimiter"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["marker0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["maxPageSize"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["include1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype2"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"]
    ],
    responses: {
        200: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ListBlobsHierarchySegmentResponse"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerListBlobHierarchySegmentHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerListBlobHierarchySegmentHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getAccountInfoOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["restype1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp0"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"]
    ],
    responses: {
        200: {
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerGetAccountInfoHeaders"]
        },
        default: {
            bodyMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_containerMappers__WEBPACK_IMPORTED_MODULE_1__["ContainerGetAccountInfoHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=container.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/directory.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/directory.js ***!
  \**********************************************************************************************************/
/*! exports provided: Directory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Directory", function() { return Directory; });
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/directoryMappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/directoryMappers.js");
/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */



/** Class representing a Directory. */
var Directory = /** @class */ (function () {
    /**
     * Create a Directory.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Directory(client) {
        this.client = client;
    }
    Directory.prototype.create = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, createOperationSpec, callback);
    };
    Directory.prototype.rename = function (renameSource, options, callback) {
        return this.client.sendOperationRequest({
            renameSource: renameSource,
            options: options
        }, renameOperationSpec, callback);
    };
    Directory.prototype.deleteMethod = function (recursiveDirectoryDelete, options, callback) {
        return this.client.sendOperationRequest({
            recursiveDirectoryDelete: recursiveDirectoryDelete,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Directory.prototype.setAccessControl = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, setAccessControlOperationSpec, callback);
    };
    Directory.prototype.getAccessControl = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAccessControlOperationSpec, callback);
    };
    return Directory;
}());

// Operation Specifications
var serializer = new _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["Serializer"](_models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__, true);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{filesystem}/{path}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["resource"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["directoryProperties"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixPermissions"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixUmask"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["cacheControl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentEncoding"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLanguage"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentDisposition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"]
    ],
    responses: {
        201: {
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectoryCreateHeaders"]
        },
        default: {
            bodyMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DataLakeStorageError"],
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectoryCreateHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var renameOperationSpec = {
    httpMethod: "PUT",
    path: "{filesystem}/{path}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["marker1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["pathRenameMode"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["renameSource"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["directoryProperties"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixPermissions"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixUmask"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceLeaseId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["cacheControl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentEncoding"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLanguage"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentDisposition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfNoneMatch"]
    ],
    responses: {
        201: {
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectoryRenameHeaders"]
        },
        default: {
            bodyMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DataLakeStorageError"],
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectoryRenameHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{filesystem}/{path}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["recursiveDirectoryDelete"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["marker1"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"]
    ],
    responses: {
        200: {
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectoryDeleteHeaders"]
        },
        default: {
            bodyMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DataLakeStorageError"],
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectoryDeleteHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var setAccessControlOperationSpec = {
    httpMethod: "PATCH",
    path: "{filesystem}/{path}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action5"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["owner"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["group"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixPermissions"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["posixAcl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        200: {
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectorySetAccessControlHeaders"]
        },
        default: {
            bodyMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DataLakeStorageError"],
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectorySetAccessControlHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getAccessControlOperationSpec = {
    httpMethod: "HEAD",
    path: "{filesystem}/{path}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["upn"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["action6"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"]
    ],
    responses: {
        200: {
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectoryGetAccessControlHeaders"]
        },
        default: {
            bodyMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DataLakeStorageError"],
            headersMapper: _models_directoryMappers__WEBPACK_IMPORTED_MODULE_1__["DirectoryGetAccessControlHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=directory.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js ***!
  \******************************************************************************************************/
/*! exports provided: Service, Container, Directory, Blob, PageBlob, AppendBlob, BlockBlob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./service */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Service", function() { return _service__WEBPACK_IMPORTED_MODULE_0__["Service"]; });

/* harmony import */ var _container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./container */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Container", function() { return _container__WEBPACK_IMPORTED_MODULE_1__["Container"]; });

/* harmony import */ var _directory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./directory */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/directory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Directory", function() { return _directory__WEBPACK_IMPORTED_MODULE_2__["Directory"]; });

/* harmony import */ var _blob__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./blob */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Blob", function() { return _blob__WEBPACK_IMPORTED_MODULE_3__["Blob"]; });

/* harmony import */ var _pageBlob__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pageBlob */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlob", function() { return _pageBlob__WEBPACK_IMPORTED_MODULE_4__["PageBlob"]; });

/* harmony import */ var _appendBlob__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./appendBlob */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppendBlob", function() { return _appendBlob__WEBPACK_IMPORTED_MODULE_5__["AppendBlob"]; });

/* harmony import */ var _blockBlob__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./blockBlob */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlob", function() { return _blockBlob__WEBPACK_IMPORTED_MODULE_6__["BlockBlob"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js ***!
  \*********************************************************************************************************/
/*! exports provided: PageBlob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PageBlob", function() { return PageBlob; });
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/pageBlobMappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/pageBlobMappers.js");
/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */



/** Class representing a PageBlob. */
var PageBlob = /** @class */ (function () {
    /**
     * Create a PageBlob.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function PageBlob(client) {
        this.client = client;
    }
    PageBlob.prototype.create = function (contentLength, blobContentLength, options, callback) {
        return this.client.sendOperationRequest({
            contentLength: contentLength,
            blobContentLength: blobContentLength,
            options: options
        }, createOperationSpec, callback);
    };
    PageBlob.prototype.uploadPages = function (body, contentLength, options, callback) {
        return this.client.sendOperationRequest({
            body: body,
            contentLength: contentLength,
            options: options
        }, uploadPagesOperationSpec, callback);
    };
    PageBlob.prototype.clearPages = function (contentLength, options, callback) {
        return this.client.sendOperationRequest({
            contentLength: contentLength,
            options: options
        }, clearPagesOperationSpec, callback);
    };
    PageBlob.prototype.uploadPagesFromURL = function (sourceUrl, sourceRange, contentLength, range, options, callback) {
        return this.client.sendOperationRequest({
            sourceUrl: sourceUrl,
            sourceRange: sourceRange,
            contentLength: contentLength,
            range: range,
            options: options
        }, uploadPagesFromURLOperationSpec, callback);
    };
    PageBlob.prototype.getPageRanges = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPageRangesOperationSpec, callback);
    };
    PageBlob.prototype.getPageRangesDiff = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPageRangesDiffOperationSpec, callback);
    };
    PageBlob.prototype.resize = function (blobContentLength, options, callback) {
        return this.client.sendOperationRequest({
            blobContentLength: blobContentLength,
            options: options
        }, resizeOperationSpec, callback);
    };
    PageBlob.prototype.updateSequenceNumber = function (sequenceNumberAction, options, callback) {
        return this.client.sendOperationRequest({
            sequenceNumberAction: sequenceNumberAction,
            options: options
        }, updateSequenceNumberOperationSpec, callback);
    };
    PageBlob.prototype.copyIncremental = function (copySource, options, callback) {
        return this.client.sendOperationRequest({
            copySource: copySource,
            options: options
        }, copyIncrementalOperationSpec, callback);
    };
    return PageBlob;
}());

// Operation Specifications
var serializer = new _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["Serializer"](_models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__, true);
var createOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["tier0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["metadata"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobSequenceNumber"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobTagsString"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobType0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentEncoding"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentLanguage"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobCacheControl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentDisposition"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        201: {
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobCreateHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobCreateHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var uploadPagesOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp16"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["transactionalContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["transactionalContentCrc64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["range0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["pageWrite0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberLessThanOrEqualTo"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberLessThan"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberEqualTo"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/octet-stream",
    responses: {
        201: {
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobUploadPagesHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobUploadPagesHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var clearPagesOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp16"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["range0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["pageWrite1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberLessThanOrEqualTo"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberLessThan"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberEqualTo"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"]
    ],
    responses: {
        201: {
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobClearPagesHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobClearPagesHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var uploadPagesFromURLOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp16"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceUrl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceRange0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceContentMD5"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceContentCrc64"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["range1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["pageWrite0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberLessThanOrEqualTo"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberLessThan"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifSequenceNumberEqualTo"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sourceIfNoneMatch"]
    ],
    responses: {
        201: {
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobUploadPagesFromURLHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobUploadPagesFromURLHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getPageRangesOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp17"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["range0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageList"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobGetPageRangesHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobGetPageRangesHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getPageRangesDiffOperationSpec = {
    httpMethod: "GET",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["snapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["prevsnapshot"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp17"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["prevSnapshotUrl"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["range0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifTags"]
    ],
    responses: {
        200: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageList"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobGetPageRangesDiffHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobGetPageRangesDiffHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var resizeOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp0"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionScope"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobContentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKey"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionKeySha256"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["encryptionAlgorithm"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"]
    ],
    responses: {
        200: {
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobResizeHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobResizeHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var updateSequenceNumberOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp0"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["sequenceNumberAction"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["blobSequenceNumber"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["leaseId0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"]
    ],
    responses: {
        200: {
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobUpdateSequenceNumberHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobUpdateSequenceNumberHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var copyIncrementalOperationSpec = {
    httpMethod: "PUT",
    path: "{containerName}/{blob}",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["comp18"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["copySource"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["requestId"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifModifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifUnmodifiedSince"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifMatch"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_2__["ifNoneMatch"]
    ],
    responses: {
        202: {
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobCopyIncrementalHeaders"]
        },
        default: {
            bodyMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["StorageError"],
            headersMapper: _models_pageBlobMappers__WEBPACK_IMPORTED_MODULE_1__["PageBlobCopyIncrementalHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=pageBlob.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js ***!
  \********************************************************************************************************/
/*! exports provided: Service */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Service", function() { return Service; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/serviceMappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/serviceMappers.js");
/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/parameters */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */




/** Class representing a Service. */
var Service = /** @class */ (function () {
    /**
     * Create a Service.
     * @param {StorageClientContext} client Reference to the service client.
     */
    function Service(client) {
        this.client = client;
    }
    Service.prototype.setProperties = function (blobServiceProperties, options, callback) {
        return this.client.sendOperationRequest({
            blobServiceProperties: blobServiceProperties,
            options: options
        }, setPropertiesOperationSpec, callback);
    };
    Service.prototype.getProperties = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getPropertiesOperationSpec, callback);
    };
    Service.prototype.getStatistics = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getStatisticsOperationSpec, callback);
    };
    Service.prototype.listContainersSegment = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listContainersSegmentOperationSpec, callback);
    };
    Service.prototype.getUserDelegationKey = function (keyInfo, options, callback) {
        return this.client.sendOperationRequest({
            keyInfo: keyInfo,
            options: options
        }, getUserDelegationKeyOperationSpec, callback);
    };
    Service.prototype.getAccountInfo = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, getAccountInfoOperationSpec, callback);
    };
    Service.prototype.submitBatch = function (body, contentLength, multipartContentType, options, callback) {
        return this.client.sendOperationRequest({
            body: body,
            contentLength: contentLength,
            multipartContentType: multipartContentType,
            options: options
        }, submitBatchOperationSpec, callback);
    };
    Service.prototype.filterBlobs = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, filterBlobsOperationSpec, callback);
    };
    return Service;
}());

// Operation Specifications
var serializer = new _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["Serializer"](_models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__, true);
var setPropertiesOperationSpec = {
    httpMethod: "PUT",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["restype0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp0"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"]
    ],
    requestBody: {
        parameterPath: "blobServiceProperties",
        mapper: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["BlobServiceProperties"]), { required: true })
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        202: {
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceSetPropertiesHeaders"]
        },
        default: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceSetPropertiesHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getPropertiesOperationSpec = {
    httpMethod: "GET",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["restype0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp0"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"]
    ],
    responses: {
        200: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["BlobServiceProperties"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceGetPropertiesHeaders"]
        },
        default: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceGetPropertiesHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getStatisticsOperationSpec = {
    httpMethod: "GET",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["restype0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp1"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"]
    ],
    responses: {
        200: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["BlobServiceStatistics"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceGetStatisticsHeaders"]
        },
        default: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceGetStatisticsHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var listContainersSegmentOperationSpec = {
    httpMethod: "GET",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["prefix"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["marker0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["maxPageSize"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["include0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp2"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"]
    ],
    responses: {
        200: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ListContainersSegmentResponse"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceListContainersSegmentHeaders"]
        },
        default: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceListContainersSegmentHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getUserDelegationKeyOperationSpec = {
    httpMethod: "POST",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["restype0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp3"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"]
    ],
    requestBody: {
        parameterPath: "keyInfo",
        mapper: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["KeyInfo"]), { required: true })
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        200: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["UserDelegationKey"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceGetUserDelegationKeyHeaders"]
        },
        default: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceGetUserDelegationKeyHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var getAccountInfoOperationSpec = {
    httpMethod: "GET",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["restype1"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp0"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"]
    ],
    responses: {
        200: {
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceGetAccountInfoHeaders"]
        },
        default: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceGetAccountInfoHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var submitBatchOperationSpec = {
    httpMethod: "POST",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp4"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["contentLength"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["multipartContentType"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"]
    ],
    requestBody: {
        parameterPath: "body",
        mapper: {
            required: true,
            serializedName: "body",
            type: {
                name: "Stream"
            }
        }
    },
    contentType: "application/xml; charset=utf-8",
    responses: {
        202: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Stream"
                }
            },
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceSubmitBatchHeaders"]
        },
        default: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceSubmitBatchHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
var filterBlobsOperationSpec = {
    httpMethod: "GET",
    urlParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["url"]
    ],
    queryParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["timeoutInSeconds"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["where"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["marker0"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["maxPageSize"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["comp5"]
    ],
    headerParameters: [
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["version"],
        _models_parameters__WEBPACK_IMPORTED_MODULE_3__["requestId"]
    ],
    responses: {
        200: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["FilterBlobSegment"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceFilterBlobsHeaders"]
        },
        default: {
            bodyMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["StorageError"],
            headersMapper: _models_serviceMappers__WEBPACK_IMPORTED_MODULE_2__["ServiceFilterBlobsHeaders"]
        }
    },
    isXML: true,
    serializer: serializer
};
//# sourceMappingURL=service.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js ***!
  \***************************************************************************************************/
/*! exports provided: StorageClient, StorageClientContext, StorageModels, StorageMappers, Service, Container, Directory, Blob, PageBlob, AppendBlob, BlockBlob */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageClient", function() { return StorageClient; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./models */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/index.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_models__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "StorageModels", function() { return _models__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./models/mappers */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "StorageMappers", function() { return _models_mappers__WEBPACK_IMPORTED_MODULE_2__; });
/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operations */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/index.js");
/* harmony import */ var _storageClientContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storageClientContext */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageClientContext", function() { return _storageClientContext__WEBPACK_IMPORTED_MODULE_4__["StorageClientContext"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Service", function() { return _operations__WEBPACK_IMPORTED_MODULE_3__["Service"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Container", function() { return _operations__WEBPACK_IMPORTED_MODULE_3__["Container"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Directory", function() { return _operations__WEBPACK_IMPORTED_MODULE_3__["Directory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Blob", function() { return _operations__WEBPACK_IMPORTED_MODULE_3__["Blob"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlob", function() { return _operations__WEBPACK_IMPORTED_MODULE_3__["PageBlob"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppendBlob", function() { return _operations__WEBPACK_IMPORTED_MODULE_3__["AppendBlob"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlob", function() { return _operations__WEBPACK_IMPORTED_MODULE_3__["BlockBlob"]; });

/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */





var StorageClient = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StorageClient, _super);
    /**
     * Initializes a new instance of the StorageClient class.
     * @param url The URL of the service account, container, or blob that is the targe of the desired
     * operation.
     * @param [options] The parameter options
     */
    function StorageClient(url, options) {
        var _this = _super.call(this, url, options) || this;
        _this.service = new _operations__WEBPACK_IMPORTED_MODULE_3__["Service"](_this);
        _this.container = new _operations__WEBPACK_IMPORTED_MODULE_3__["Container"](_this);
        _this.directory = new _operations__WEBPACK_IMPORTED_MODULE_3__["Directory"](_this);
        _this.blob = new _operations__WEBPACK_IMPORTED_MODULE_3__["Blob"](_this);
        _this.pageBlob = new _operations__WEBPACK_IMPORTED_MODULE_3__["PageBlob"](_this);
        _this.appendBlob = new _operations__WEBPACK_IMPORTED_MODULE_3__["AppendBlob"](_this);
        _this.blockBlob = new _operations__WEBPACK_IMPORTED_MODULE_3__["BlockBlob"](_this);
        return _this;
    }
    return StorageClient;
}(_storageClientContext__WEBPACK_IMPORTED_MODULE_4__["StorageClientContext"]));
// Operation Specifications


//# sourceMappingURL=storageClient.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClientContext.js ***!
  \**********************************************************************************************************/
/*! exports provided: StorageClientContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageClientContext", function() { return StorageClientContext; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */


var packageName = "azure-storage-blob";
var packageVersion = "12.2.0-preview.1";
var StorageClientContext = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StorageClientContext, _super);
    /**
     * Initializes a new instance of the StorageClientContext class.
     * @param url The URL of the service account, container, or blob that is the targe of the desired
     * operation.
     * @param [options] The parameter options
     */
    function StorageClientContext(url, options) {
        var _this = this;
        if (url == undefined) {
            throw new Error("'url' cannot be null.");
        }
        if (!options) {
            options = {};
        }
        if (!options.userAgent) {
            var defaultUserAgent = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["getDefaultUserAgentValue"]();
            options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
        }
        _this = _super.call(this, undefined, options) || this;
        _this.version = '2019-12-12';
        _this.baseUri = "{url}";
        _this.requestContentType = "application/json; charset=utf-8";
        _this.url = url;
        return _this;
    }
    return StorageClientContext;
}(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["ServiceClient"]));

//# sourceMappingURL=storageClientContext.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
//# sourceMappingURL=generatedModels.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RestError", function() { return _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["RestError"]; });

/* harmony import */ var _BlobServiceClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BlobServiceClient */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobServiceClient", function() { return _BlobServiceClient__WEBPACK_IMPORTED_MODULE_1__["BlobServiceClient"]; });

/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Clients */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobClient", function() { return _Clients__WEBPACK_IMPORTED_MODULE_2__["BlobClient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppendBlobClient", function() { return _Clients__WEBPACK_IMPORTED_MODULE_2__["AppendBlobClient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlobClient", function() { return _Clients__WEBPACK_IMPORTED_MODULE_2__["BlockBlobClient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PageBlobClient", function() { return _Clients__WEBPACK_IMPORTED_MODULE_2__["PageBlobClient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobLeaseClient", function() { return _Clients__WEBPACK_IMPORTED_MODULE_2__["BlobLeaseClient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ContainerClient", function() { return _Clients__WEBPACK_IMPORTED_MODULE_2__["ContainerClient"]; });

/* harmony import */ var _BlobBatch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BlobBatch */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobBatch", function() { return _BlobBatch__WEBPACK_IMPORTED_MODULE_3__["BlobBatch"]; });

/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BlobBatchClient */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobBatchClient", function() { return _BlobBatchClient__WEBPACK_IMPORTED_MODULE_4__["BlobBatchClient"]; });

/* harmony import */ var _BatchResponse__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BatchResponse */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponse.js");
/* harmony import */ var _BatchResponse__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_BatchResponse__WEBPACK_IMPORTED_MODULE_5__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _BatchResponse__WEBPACK_IMPORTED_MODULE_5__) if(["default","BlockBlobTier","PremiumPageBlobTier","RestError","logger","BlobServiceClient","BlobClient","AppendBlobClient","BlockBlobClient","PageBlobClient","BlobLeaseClient","ContainerClient","BlobBatch","BlobBatchClient"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _BatchResponse__WEBPACK_IMPORTED_MODULE_5__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StorageBrowserPolicyFactory */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageBrowserPolicy", function() { return _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_6__["StorageBrowserPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageBrowserPolicyFactory", function() { return _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_6__["StorageBrowserPolicyFactory"]; });

/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnonymousCredential", function() { return _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__["AnonymousCredential"]; });

/* harmony import */ var _credentials_Credential__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./credentials/Credential */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Credential", function() { return _credentials_Credential__WEBPACK_IMPORTED_MODULE_8__["Credential"]; });

/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./models */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlockBlobTier", function() { return _models__WEBPACK_IMPORTED_MODULE_9__["BlockBlobTier"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PremiumPageBlobTier", function() { return _models__WEBPACK_IMPORTED_MODULE_9__["PremiumPageBlobTier"]; });

/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Pipeline */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseRequestPolicy", function() { return _Pipeline__WEBPACK_IMPORTED_MODULE_10__["BaseRequestPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageOAuthScopes", function() { return _Pipeline__WEBPACK_IMPORTED_MODULE_10__["StorageOAuthScopes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deserializationPolicy", function() { return _Pipeline__WEBPACK_IMPORTED_MODULE_10__["deserializationPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpHeaders", function() { return _Pipeline__WEBPACK_IMPORTED_MODULE_10__["HttpHeaders"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WebResource", function() { return _Pipeline__WEBPACK_IMPORTED_MODULE_10__["WebResource"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequestPolicyOptions", function() { return _Pipeline__WEBPACK_IMPORTED_MODULE_10__["RequestPolicyOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Pipeline", function() { return _Pipeline__WEBPACK_IMPORTED_MODULE_10__["Pipeline"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "newPipeline", function() { return _Pipeline__WEBPACK_IMPORTED_MODULE_10__["newPipeline"]; });

/* harmony import */ var _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/AnonymousCredentialPolicy */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnonymousCredentialPolicy", function() { return _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_11__["AnonymousCredentialPolicy"]; });

/* harmony import */ var _policies_CredentialPolicy__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/CredentialPolicy */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CredentialPolicy", function() { return _policies_CredentialPolicy__WEBPACK_IMPORTED_MODULE_12__["CredentialPolicy"]; });

/* harmony import */ var _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./StorageRetryPolicyFactory */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageRetryPolicyType", function() { return _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_13__["StorageRetryPolicyType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageRetryPolicy", function() { return _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_13__["StorageRetryPolicy"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StorageRetryPolicyFactory", function() { return _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_13__["StorageRetryPolicyFactory"]; });

/* harmony import */ var _generatedModels__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./generatedModels */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generatedModels.js");
/* harmony import */ var _generatedModels__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(_generatedModels__WEBPACK_IMPORTED_MODULE_14__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _generatedModels__WEBPACK_IMPORTED_MODULE_14__) if(["default","BlockBlobTier","PremiumPageBlobTier","RestError","logger","BlobServiceClient","BlobClient","AppendBlobClient","BlockBlobClient","PageBlobClient","BlobLeaseClient","ContainerClient","BlobBatch","BlobBatchClient","StorageBrowserPolicy","StorageBrowserPolicyFactory","AnonymousCredential","Credential","BaseRequestPolicy","StorageOAuthScopes","deserializationPolicy","HttpHeaders","WebResource","RequestPolicyOptions","Pipeline","newPipeline","AnonymousCredentialPolicy","CredentialPolicy","StorageRetryPolicyType","StorageRetryPolicy","StorageRetryPolicyFactory"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _generatedModels__WEBPACK_IMPORTED_MODULE_14__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./log */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return _log__WEBPACK_IMPORTED_MODULE_15__["logger"]; });

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

















//# sourceMappingURL=index.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js ***!
  \***************************************************************************/
/*! exports provided: logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return logger; });
/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ "./node_modules/@azure/logger/dist-esm/src/logger.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/**
 * The @azure/logger configuration for this package.
 */
var logger = Object(_azure_logger__WEBPACK_IMPORTED_MODULE_0__["createClientLogger"])("storage-blob");
//# sourceMappingURL=log.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js ***!
  \******************************************************************************/
/*! exports provided: BlockBlobTier, PremiumPageBlobTier, toAccessTier, ensureCpkIfSpecified */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlockBlobTier", function() { return BlockBlobTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PremiumPageBlobTier", function() { return PremiumPageBlobTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toAccessTier", function() { return toAccessTier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureCpkIfSpecified", function() { return ensureCpkIfSpecified; });
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/**
 * Represents the access tier on a blob.
 * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}
 */
var BlockBlobTier;
(function (BlockBlobTier) {
    /**
     * Optimized for storing data that is accessed frequently.
     */
    BlockBlobTier["Hot"] = "Hot";
    /**
     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.
     */
    BlockBlobTier["Cool"] = "Cool";
    /**
     * Optimized for storing data that is rarely accessed and stored for at least 180 days
     * with flexible latency requirements (on the order of hours).
     */
    BlockBlobTier["Archive"] = "Archive";
})(BlockBlobTier || (BlockBlobTier = {}));
/**
 * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.
 * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}
 * for detailed information on the corresponding IOPS and throughput per PageBlobTier.
 */
var PremiumPageBlobTier;
(function (PremiumPageBlobTier) {
    /**
     * P4 Tier.
     */
    PremiumPageBlobTier["P4"] = "P4";
    /**
     * P6 Tier.
     */
    PremiumPageBlobTier["P6"] = "P6";
    /**
     * P10 Tier.
     */
    PremiumPageBlobTier["P10"] = "P10";
    /**
     * P15 Tier.
     */
    PremiumPageBlobTier["P15"] = "P15";
    /**
     * P20 Tier.
     */
    PremiumPageBlobTier["P20"] = "P20";
    /**
     * P30 Tier.
     */
    PremiumPageBlobTier["P30"] = "P30";
    /**
     * P40 Tier.
     */
    PremiumPageBlobTier["P40"] = "P40";
    /**
     * P50 Tier.
     */
    PremiumPageBlobTier["P50"] = "P50";
    /**
     * P60 Tier.
     */
    PremiumPageBlobTier["P60"] = "P60";
    /**
     * P70 Tier.
     */
    PremiumPageBlobTier["P70"] = "P70";
    /**
     * P80 Tier.
     */
    PremiumPageBlobTier["P80"] = "P80";
})(PremiumPageBlobTier || (PremiumPageBlobTier = {}));
function toAccessTier(tier) {
    if (tier == undefined) {
        return undefined;
    }
    return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).
}
function ensureCpkIfSpecified(cpk, isHttps) {
    if (cpk && !isHttps) {
        throw new RangeError("Customer-provided encryption key must be used over HTTPS.");
    }
    if (cpk && !cpk.encryptionAlgorithm) {
        cpk.encryptionAlgorithm = _utils_constants__WEBPACK_IMPORTED_MODULE_0__["EncryptionAlgorithmAES25"];
    }
}
//# sourceMappingURL=models.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js ***!
  \**********************************************************************************************************/
/*! exports provided: AnonymousCredentialPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnonymousCredentialPolicy", function() { return AnonymousCredentialPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _CredentialPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CredentialPolicy */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


/**
 * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources
 * or for use with Shared Access Signatures (SAS).
 *
 * @export
 * @class AnonymousCredentialPolicy
 * @extends {CredentialPolicy}
 */
var AnonymousCredentialPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(AnonymousCredentialPolicy, _super);
    /**
     * Creates an instance of AnonymousCredentialPolicy.
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @memberof AnonymousCredentialPolicy
     */
    function AnonymousCredentialPolicy(nextPolicy, options) {
        return _super.call(this, nextPolicy, options) || this;
    }
    return AnonymousCredentialPolicy;
}(_CredentialPolicy__WEBPACK_IMPORTED_MODULE_1__["CredentialPolicy"]));

//# sourceMappingURL=AnonymousCredentialPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js ***!
  \*************************************************************************************************/
/*! exports provided: CredentialPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CredentialPolicy", function() { return CredentialPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


/**
 * Credential policy used to sign HTTP(S) requests before sending. This is an
 * abstract class.
 *
 * @export
 * @abstract
 * @class CredentialPolicy
 * @extends {BaseRequestPolicy}
 */
var CredentialPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CredentialPolicy, _super);
    function CredentialPolicy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Sends out request.
     *
     * @param {WebResource} request
     * @returns {Promise<HttpOperationResponse>}
     * @memberof CredentialPolicy
     */
    CredentialPolicy.prototype.sendRequest = function (request) {
        return this._nextPolicy.sendRequest(this.signRequest(request));
    };
    /**
     * Child classes must implement this method with request signing. This method
     * will be executed in {@link sendRequest}.
     *
     * @protected
     * @abstract
     * @param {WebResource} request
     * @returns {WebResource}
     * @memberof CredentialPolicy
     */
    CredentialPolicy.prototype.signRequest = function (request) {
        // Child classes must override this method with request signing. This method
        // will be executed in sendRequest().
        return request;
    };
    return CredentialPolicy;
}(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=CredentialPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js ***!
  \*****************************************************************************************************/
/*! exports provided: StorageBrowserPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageBrowserPolicy", function() { return StorageBrowserPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.common */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.




/**
 * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:
 *
 * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.
 * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL
 * thus avoid the browser cache.
 *
 * 2. Remove cookie header for security
 *
 * 3. Remove content-length header to avoid browsers warning
 *
 * @class StorageBrowserPolicy
 * @extends {BaseRequestPolicy}
 */
var StorageBrowserPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StorageBrowserPolicy, _super);
    /**
     * Creates an instance of StorageBrowserPolicy.
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @memberof StorageBrowserPolicy
     */
    function StorageBrowserPolicy(nextPolicy, options) {
        return _super.call(this, nextPolicy, options) || this;
    }
    /**
     * Sends out request.
     *
     * @param {WebResource} request
     * @returns {Promise<HttpOperationResponse>}
     * @memberof StorageBrowserPolicy
     */
    StorageBrowserPolicy.prototype.sendRequest = function (request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                if (_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"]) {
                    return [2 /*return*/, this._nextPolicy.sendRequest(request)];
                }
                if (request.method.toUpperCase() === "GET" || request.method.toUpperCase() === "HEAD") {
                    request.url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__["setURLParameter"])(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_2__["URLConstants"].Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());
                }
                request.headers.remove(_utils_constants__WEBPACK_IMPORTED_MODULE_2__["HeaderConstants"].COOKIE);
                // According to XHR standards, content-length should be fully controlled by browsers
                request.headers.remove(_utils_constants__WEBPACK_IMPORTED_MODULE_2__["HeaderConstants"].CONTENT_LENGTH);
                return [2 /*return*/, this._nextPolicy.sendRequest(request)];
            });
        });
    };
    return StorageBrowserPolicy;
}(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=StorageBrowserPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js ***!
  \***************************************************************************************************/
/*! exports provided: NewRetryPolicyFactory, StorageRetryPolicyType, StorageRetryPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NewRetryPolicyFactory", function() { return NewRetryPolicyFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageRetryPolicyType", function() { return StorageRetryPolicyType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageRetryPolicy", function() { return StorageRetryPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/abort-controller */ "./node_modules/@azure/abort-controller/dist-esm/src/aborter.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils.common */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js");
/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../log */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.






/**
 * A factory method used to generated a RetryPolicy factory.
 *
 * @export
 * @param {StorageRetryOptions} retryOptions
 * @returns
 */
function NewRetryPolicyFactory(retryOptions) {
    return {
        create: function (nextPolicy, options) {
            return new StorageRetryPolicy(nextPolicy, options, retryOptions);
        }
    };
}
/**
 * RetryPolicy types.
 *
 * @export
 * @enum {number}
 */
var StorageRetryPolicyType;
(function (StorageRetryPolicyType) {
    /**
     * Exponential retry. Retry time delay grows exponentially.
     */
    StorageRetryPolicyType[StorageRetryPolicyType["EXPONENTIAL"] = 0] = "EXPONENTIAL";
    /**
     * Linear retry. Retry time delay grows linearly.
     */
    StorageRetryPolicyType[StorageRetryPolicyType["FIXED"] = 1] = "FIXED";
})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));
// Default values of StorageRetryOptions
var DEFAULT_RETRY_OPTIONS = {
    maxRetryDelayInMs: 120 * 1000,
    maxTries: 4,
    retryDelayInMs: 4 * 1000,
    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,
    secondaryHost: "",
    tryTimeoutInMs: undefined // Use server side default timeout strategy
};
var RETRY_ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_1__["AbortError"]("The operation was aborted.");
/**
 * Retry policy with exponential retry and linear retry implemented.
 *
 * @class RetryPolicy
 * @extends {BaseRequestPolicy}
 */
var StorageRetryPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StorageRetryPolicy, _super);
    /**
     * Creates an instance of RetryPolicy.
     *
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @param {StorageRetryOptions} [retryOptions=DEFAULT_RETRY_OPTIONS]
     * @memberof StorageRetryPolicy
     */
    function StorageRetryPolicy(nextPolicy, options, retryOptions) {
        if (retryOptions === void 0) { retryOptions = DEFAULT_RETRY_OPTIONS; }
        var _this = _super.call(this, nextPolicy, options) || this;
        // Initialize retry options
        _this.retryOptions = {
            retryPolicyType: retryOptions.retryPolicyType
                ? retryOptions.retryPolicyType
                : DEFAULT_RETRY_OPTIONS.retryPolicyType,
            maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1
                ? Math.floor(retryOptions.maxTries)
                : DEFAULT_RETRY_OPTIONS.maxTries,
            tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0
                ? retryOptions.tryTimeoutInMs
                : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,
            retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0
                ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs
                    ? retryOptions.maxRetryDelayInMs
                    : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs)
                : DEFAULT_RETRY_OPTIONS.retryDelayInMs,
            maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0
                ? retryOptions.maxRetryDelayInMs
                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,
            secondaryHost: retryOptions.secondaryHost
                ? retryOptions.secondaryHost
                : DEFAULT_RETRY_OPTIONS.secondaryHost
        };
        return _this;
    }
    /**
     * Sends request.
     *
     * @param {WebResource} request
     * @returns {Promise<HttpOperationResponse>}
     * @memberof StorageRetryPolicy
     */
    StorageRetryPolicy.prototype.sendRequest = function (request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                return [2 /*return*/, this.attemptSendRequest(request, false, 1)];
            });
        });
    };
    /**
     * Decide and perform next retry. Won't mutate request parameter.
     *
     * @protected
     * @param {WebResource} request
     * @param {boolean} secondaryHas404  If attempt was against the secondary & it returned a StatusNotFound (404), then
     *                                   the resource was not found. This may be due to replication delay. So, in this
     *                                   case, we'll never try the secondary again for this operation.
     * @param {number} attempt           How many retries has been attempted to performed, starting from 1, which includes
     *                                   the attempt will be performed by this method call.
     * @returns {Promise<HttpOperationResponse>}
     * @memberof StorageRetryPolicy
     */
    StorageRetryPolicy.prototype.attemptSendRequest = function (request, secondaryHas404, attempt) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var newRequest, isPrimaryRetry, response, err_1;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        newRequest = request.clone();
                        isPrimaryRetry = secondaryHas404 ||
                            !this.retryOptions.secondaryHost ||
                            !(request.method === "GET" || request.method === "HEAD" || request.method === "OPTIONS") ||
                            attempt % 2 === 1;
                        if (!isPrimaryRetry) {
                            newRequest.url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__["setURLHost"])(newRequest.url, this.retryOptions.secondaryHost);
                        }
                        // Set the server-side timeout query parameter "timeout=[seconds]"
                        if (this.retryOptions.tryTimeoutInMs) {
                            newRequest.url = Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__["setURLParameter"])(newRequest.url, _utils_constants__WEBPACK_IMPORTED_MODULE_3__["URLConstants"].Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        _log__WEBPACK_IMPORTED_MODULE_5__["logger"].info("RetryPolicy: =====> Try=" + attempt + " " + (isPrimaryRetry ? "Primary" : "Secondary"));
                        return [4 /*yield*/, this._nextPolicy.sendRequest(newRequest)];
                    case 2:
                        response = _a.sent();
                        if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {
                            return [2 /*return*/, response];
                        }
                        secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        _log__WEBPACK_IMPORTED_MODULE_5__["logger"].error("RetryPolicy: Caught error, message: " + err_1.message + ", code: " + err_1.code);
                        if (!this.shouldRetry(isPrimaryRetry, attempt, response, err_1)) {
                            throw err_1;
                        }
                        return [3 /*break*/, 4];
                    case 4: return [4 /*yield*/, this.delay(isPrimaryRetry, attempt, request.abortSignal)];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.attemptSendRequest(request, secondaryHas404, ++attempt)];
                    case 6: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Decide whether to retry according to last HTTP response and retry counters.
     *
     * @protected
     * @param {boolean} isPrimaryRetry
     * @param {number} attempt
     * @param {HttpOperationResponse} [response]
     * @param {RestError} [err]
     * @returns {boolean}
     * @memberof StorageRetryPolicy
     */
    StorageRetryPolicy.prototype.shouldRetry = function (isPrimaryRetry, attempt, response, err) {
        if (attempt >= this.retryOptions.maxTries) {
            _log__WEBPACK_IMPORTED_MODULE_5__["logger"].info("RetryPolicy: Attempt(s) " + attempt + " >= maxTries " + this.retryOptions
                .maxTries + ", no further try.");
            return false;
        }
        // Handle network failures, you may need to customize the list when you implement
        // your own http client
        var retriableErrors = [
            "ETIMEDOUT",
            "ESOCKETTIMEDOUT",
            "ECONNREFUSED",
            "ECONNRESET",
            "ENOENT",
            "ENOTFOUND",
            "TIMEOUT",
            "EPIPE",
            "REQUEST_SEND_ERROR" // For default xhr based http client provided in ms-rest-js
        ];
        if (err) {
            for (var _i = 0, retriableErrors_1 = retriableErrors; _i < retriableErrors_1.length; _i++) {
                var retriableError = retriableErrors_1[_i];
                if (err.name.toUpperCase().includes(retriableError) ||
                    err.message.toUpperCase().includes(retriableError) ||
                    (err.code &&
                        err.code
                            .toString()
                            .toUpperCase()
                            .includes(retriableError))) {
                    _log__WEBPACK_IMPORTED_MODULE_5__["logger"].info("RetryPolicy: Network error " + retriableError + " found, will retry.");
                    return true;
                }
            }
        }
        // If attempt was against the secondary & it returned a StatusNotFound (404), then
        // the resource was not found. This may be due to replication delay. So, in this
        // case, we'll never try the secondary again for this operation.
        if (response || err) {
            var statusCode = response ? response.status : err ? err.statusCode : 0;
            if (!isPrimaryRetry && statusCode === 404) {
                _log__WEBPACK_IMPORTED_MODULE_5__["logger"].info("RetryPolicy: Secondary access with 404, will retry.");
                return true;
            }
            // Server internal error or server timeout
            if (statusCode === 503 || statusCode === 500) {
                _log__WEBPACK_IMPORTED_MODULE_5__["logger"].info("RetryPolicy: Will retry for status code " + statusCode + ".");
                return true;
            }
        }
        return false;
    };
    /**
     * Delay a calculated time between retries.
     *
     * @private
     * @param {boolean} isPrimaryRetry
     * @param {number} attempt
     * @param {AbortSignalLike} [abortSignal]
     * @memberof StorageRetryPolicy
     */
    StorageRetryPolicy.prototype.delay = function (isPrimaryRetry, attempt, abortSignal) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var delayTimeInMs;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                delayTimeInMs = 0;
                if (isPrimaryRetry) {
                    switch (this.retryOptions.retryPolicyType) {
                        case StorageRetryPolicyType.EXPONENTIAL:
                            delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);
                            break;
                        case StorageRetryPolicyType.FIXED:
                            delayTimeInMs = this.retryOptions.retryDelayInMs;
                            break;
                    }
                }
                else {
                    delayTimeInMs = Math.random() * 1000;
                }
                _log__WEBPACK_IMPORTED_MODULE_5__["logger"].info("RetryPolicy: Delay for " + delayTimeInMs + "ms");
                return [2 /*return*/, Object(_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__["delay"])(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR)];
            });
        });
    };
    return StorageRetryPolicy;
}(_azure_core_http__WEBPACK_IMPORTED_MODULE_2__["BaseRequestPolicy"]));

//# sourceMappingURL=StorageRetryPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/TelemetryPolicy.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/TelemetryPolicy.js ***!
  \************************************************************************************************/
/*! exports provided: TelemetryPolicy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TelemetryPolicy", function() { return TelemetryPolicy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.



/**
 * TelemetryPolicy is a policy used to tag user-agent header for every requests.
 *
 * @class TelemetryPolicy
 * @extends {BaseRequestPolicy}
 */
var TelemetryPolicy = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TelemetryPolicy, _super);
    /**
     * Creates an instance of TelemetryPolicy.
     * @param {RequestPolicy} nextPolicy
     * @param {RequestPolicyOptions} options
     * @param {string} telemetry
     * @memberof TelemetryPolicy
     */
    function TelemetryPolicy(nextPolicy, options, telemetry) {
        var _this = _super.call(this, nextPolicy, options) || this;
        _this.telemetry = telemetry;
        return _this;
    }
    /**
     * Sends out request.
     *
     * @param {WebResource} request
     * @returns {Promise<HttpOperationResponse>}
     * @memberof TelemetryPolicy
     */
    TelemetryPolicy.prototype.sendRequest = function (request) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                if (_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"]) {
                    if (!request.headers) {
                        request.headers = new _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]();
                    }
                    if (!request.headers.get(_utils_constants__WEBPACK_IMPORTED_MODULE_2__["HeaderConstants"].USER_AGENT)) {
                        request.headers.set(_utils_constants__WEBPACK_IMPORTED_MODULE_2__["HeaderConstants"].USER_AGENT, this.telemetry);
                    }
                }
                return [2 /*return*/, this._nextPolicy.sendRequest(request)];
            });
        });
    };
    return TelemetryPolicy;
}(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["BaseRequestPolicy"]));

//# sourceMappingURL=TelemetryPolicy.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js ***!
  \**********************************************************************************************************/
/*! exports provided: BlobBeginCopyFromUrlPoller */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobBeginCopyFromUrlPoller", function() { return BlobBeginCopyFromUrlPoller; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _azure_core_lro__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-lro */ "./node_modules/@azure/core-lro/dist-esm/src/index.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.



/**
 * This is the poller returned by {@link BlobClient.beginCopyFromURL}.
 * This can not be instantiated directly outside of this package.
 *
 * @ignore
 */
var BlobBeginCopyFromUrlPoller = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(BlobBeginCopyFromUrlPoller, _super);
    function BlobBeginCopyFromUrlPoller(options) {
        var _this = this;
        var blobClient = options.blobClient, copySource = options.copySource, _a = options.intervalInMs, intervalInMs = _a === void 0 ? 15000 : _a, onProgress = options.onProgress, resumeFrom = options.resumeFrom, startCopyFromURLOptions = options.startCopyFromURLOptions;
        var state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        var operation = makeBlobBeginCopyFromURLPollOperation(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, state), { blobClient: blobClient,
            copySource: copySource,
            startCopyFromURLOptions: startCopyFromURLOptions }));
        _this = _super.call(this, operation) || this;
        if (typeof onProgress === "function") {
            _this.onProgress(onProgress);
        }
        _this.intervalInMs = intervalInMs;
        return _this;
    }
    BlobBeginCopyFromUrlPoller.prototype.delay = function () {
        return Object(_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["delay"])(this.intervalInMs);
    };
    return BlobBeginCopyFromUrlPoller;
}(_azure_core_lro__WEBPACK_IMPORTED_MODULE_2__["Poller"]));

/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @ignore
 */
var cancel = function cancel(options) {
    if (options === void 0) { options = {}; }
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var state, copyId;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
                case 0:
                    state = this.state;
                    copyId = state.copyId;
                    if (state.isCompleted) {
                        return [2 /*return*/, makeBlobBeginCopyFromURLPollOperation(state)];
                    }
                    if (!copyId) {
                        state.isCancelled = true;
                        return [2 /*return*/, makeBlobBeginCopyFromURLPollOperation(state)];
                    }
                    // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call
                    return [4 /*yield*/, state.blobClient.abortCopyFromURL(copyId, {
                            abortSignal: options.abortSignal
                        })];
                case 1:
                    // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call
                    _a.sent();
                    state.isCancelled = true;
                    return [2 /*return*/, makeBlobBeginCopyFromURLPollOperation(state)];
            }
        });
    });
};
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @ignore
 */
var update = function update(options) {
    if (options === void 0) { options = {}; }
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var state, blobClient, copySource, startCopyFromURLOptions, result, result, copyStatus, copyProgress, prevCopyProgress, err_1;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
                case 0:
                    state = this.state;
                    blobClient = state.blobClient, copySource = state.copySource, startCopyFromURLOptions = state.startCopyFromURLOptions;
                    if (!!state.isStarted) return [3 /*break*/, 2];
                    state.isStarted = true;
                    return [4 /*yield*/, blobClient.startCopyFromURL(copySource, startCopyFromURLOptions)];
                case 1:
                    result = _a.sent();
                    // copyId is needed to abort
                    state.copyId = result.copyId;
                    if (result.copyStatus === "success") {
                        state.result = result;
                        state.isCompleted = true;
                    }
                    return [3 /*break*/, 6];
                case 2:
                    if (!!state.isCompleted) return [3 /*break*/, 6];
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, state.blobClient.getProperties({ abortSignal: options.abortSignal })];
                case 4:
                    result = _a.sent();
                    copyStatus = result.copyStatus, copyProgress = result.copyProgress;
                    prevCopyProgress = state.copyProgress;
                    if (copyProgress) {
                        state.copyProgress = copyProgress;
                    }
                    if (copyStatus === "pending" &&
                        copyProgress !== prevCopyProgress &&
                        typeof options.fireProgress === "function") {
                        // trigger in setTimeout, or swallow error?
                        options.fireProgress(state);
                    }
                    else if (copyStatus === "success") {
                        state.result = result;
                        state.isCompleted = true;
                    }
                    else if (copyStatus === "failed") {
                        state.error = new Error("Blob copy failed with reason: \"" + (result.copyStatusDescription || "unknown") + "\"");
                        state.isCompleted = true;
                    }
                    return [3 /*break*/, 6];
                case 5:
                    err_1 = _a.sent();
                    state.error = err_1;
                    state.isCompleted = true;
                    return [3 /*break*/, 6];
                case 6: return [2 /*return*/, makeBlobBeginCopyFromURLPollOperation(state)];
            }
        });
    });
};
/**
 * Note: Intentionally using function expression over arrow function expression
 * so that the function can be invoked with a different context.
 * This affects what `this` refers to.
 * @ignore
 */
var toString = function toString() {
    return JSON.stringify({ state: this.state }, function (key, value) {
        // remove blobClient from serialized state since a client can't be hydrated from this info.
        if (key === "blobClient") {
            return undefined;
        }
        return value;
    });
};
/**
 * Creates a poll operation given the provided state.
 * @ignore
 */
function makeBlobBeginCopyFromURLPollOperation(state) {
    return {
        state: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, state),
        cancel: cancel,
        toString: toString,
        update: update
    };
}
//# sourceMappingURL=BlobStartCopyFromUrlPoller.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js ***!
  \***********************************************************************************/
/*! exports provided: Batch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Batch", function() { return Batch; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// In browser, during webpack or browserify bundling, this module will be replaced by 'events'
// https://github.com/Gozala/events

/**
 * States for Batch.
 *
 * @enum {number}
 */
var BatchStates;
(function (BatchStates) {
    BatchStates[BatchStates["Good"] = 0] = "Good";
    BatchStates[BatchStates["Error"] = 1] = "Error";
})(BatchStates || (BatchStates = {}));
/**
 * Batch provides basic parallel execution with concurrency limits.
 * Will stop execute left operations when one of the executed operation throws an error.
 * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.
 *
 * @export
 * @class Batch
 */
var Batch = /** @class */ (function () {
    /**
     * Creates an instance of Batch.
     * @param {number} [concurrency=5]
     * @memberof Batch
     */
    function Batch(concurrency) {
        if (concurrency === void 0) { concurrency = 5; }
        /**
         * Number of active operations under execution.
         *
         * @private
         * @type {number}
         * @memberof Batch
         */
        this.actives = 0;
        /**
         * Number of completed operations under execution.
         *
         * @private
         * @type {number}
         * @memberof Batch
         */
        this.completed = 0;
        /**
         * Offset of next operation to be executed.
         *
         * @private
         * @type {number}
         * @memberof Batch
         */
        this.offset = 0;
        /**
         * Operation array to be executed.
         *
         * @private
         * @type {Operation[]}
         * @memberof Batch
         */
        this.operations = [];
        /**
         * States of Batch. When an error happens, state will turn into error.
         * Batch will stop execute left operations.
         *
         * @private
         * @type {BatchStates}
         * @memberof Batch
         */
        this.state = BatchStates.Good;
        if (concurrency < 1) {
            throw new RangeError("concurrency must be larger than 0");
        }
        this.concurrency = concurrency;
        this.emitter = new events__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    /**
     * Add a operation into queue.
     *
     * @param {Operation} operation
     * @memberof Batch
     */
    Batch.prototype.addOperation = function (operation) {
        var _this = this;
        this.operations.push(function () { return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
            var error_1;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        this.actives++;
                        return [4 /*yield*/, operation()];
                    case 1:
                        _a.sent();
                        this.actives--;
                        this.completed++;
                        this.parallelExecute();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        this.emitter.emit("error", error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Start execute operations in the queue.
     *
     * @returns {Promise<void>}
     * @memberof Batch
     */
    Batch.prototype.do = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                if (this.operations.length === 0) {
                    return [2 /*return*/, Promise.resolve()];
                }
                this.parallelExecute();
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.emitter.on("finish", resolve);
                        _this.emitter.on("error", function (error) {
                            _this.state = BatchStates.Error;
                            reject(error);
                        });
                    })];
            });
        });
    };
    /**
     * Get next operation to be executed. Return null when reaching ends.
     *
     * @private
     * @returns {(Operation | null)}
     * @memberof Batch
     */
    Batch.prototype.nextOperation = function () {
        if (this.offset < this.operations.length) {
            return this.operations[this.offset++];
        }
        return null;
    };
    /**
     * Start execute operations. One one the most important difference between
     * this method with do() is that do() wraps as an sync method.
     *
     * @private
     * @returns {void}
     * @memberof Batch
     */
    Batch.prototype.parallelExecute = function () {
        if (this.state === BatchStates.Error) {
            return;
        }
        if (this.completed >= this.operations.length) {
            this.emitter.emit("finish");
            return;
        }
        while (this.actives < this.concurrency) {
            var operation = this.nextOperation();
            if (operation) {
                operation();
            }
            else {
                return;
            }
        }
    };
    return Batch;
}());

//# sourceMappingURL=Batch.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BufferScheduler.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/BufferScheduler.js ***!
  \*********************************************************************************************/
/*! exports provided: BufferScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BufferScheduler", function() { return BufferScheduler; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


/**
 * This class accepts a Node.js Readable stream as input, and keeps reading data
 * from the stream into the internal buffer structure, until it reaches maxBuffers.
 * Every available buffer will try to trigger outgoingHandler.
 *
 * The internal buffer structure includes an incoming buffer array, and a outgoing
 * buffer array. The incoming buffer array includes the "empty" buffers can be filled
 * with new incoming data. The outgoing array includes the filled buffers to be
 * handled by outgoingHandler. Every above buffer size is defined by parameter bufferSize.
 *
 * NUM_OF_ALL_BUFFERS = BUFFERS_IN_INCOMING + BUFFERS_IN_OUTGOING + BUFFERS_UNDER_HANDLING
 *
 * NUM_OF_ALL_BUFFERS <= maxBuffers
 *
 * PERFORMANCE IMPROVEMENT TIPS:
 * 1. Input stream highWaterMark is better to set a same value with bufferSize
 *    parameter, which will avoid Buffer.concat() operations.
 * 2. concurrency should set a smaller value than maxBuffers, which is helpful to
 *    reduce the possibility when a outgoing handler waits for the stream data.
 *    in this situation, outgoing handlers are blocked.
 *    Outgoing queue shouldn't be empty.
 * @export
 * @class BufferScheduler
 */
var BufferScheduler = /** @class */ (function () {
    /**
     * Creates an instance of BufferScheduler.
     *
     * @param {Readable} readable A Node.js Readable stream
     * @param {number} bufferSize Buffer size of every maintained buffer
     * @param {number} maxBuffers How many buffers can be allocated
     * @param {OutgoingHandler} outgoingHandler An async function scheduled to be
     *                                          triggered when a buffer fully filled
     *                                          with stream data
     * @param {number} concurrency Concurrency of executing outgoingHandlers (>0)
     * @param {string} [encoding] [Optional] Encoding of Readable stream when it's a string stream
     * @memberof BufferScheduler
     */
    function BufferScheduler(readable, bufferSize, maxBuffers, outgoingHandler, concurrency, encoding) {
        /**
         * An internal event emitter.
         *
         * @private
         * @type {EventEmitter}
         * @memberof BufferScheduler
         */
        this.emitter = new events__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        /**
         * An internal offset marker to track data offset in bytes of next outgoingHandler.
         *
         * @private
         * @type {number}
         * @memberof BufferScheduler
         */
        this.offset = 0;
        /**
         * An internal marker to track whether stream is end.
         *
         * @private
         * @type {boolean}
         * @memberof BufferScheduler
         */
        this.isStreamEnd = false;
        /**
         * An internal marker to track whether stream or outgoingHandler returns error.
         *
         * @private
         * @type {boolean}
         * @memberof BufferScheduler
         */
        this.isError = false;
        /**
         * How many handlers are executing.
         *
         * @private
         * @type {number}
         * @memberof BufferScheduler
         */
        this.executingOutgoingHandlers = 0;
        /**
         * How many buffers have been allocated.
         *
         * @private
         * @type {number}
         * @memberof BufferScheduler
         */
        this.numBuffers = 0;
        /**
         * Because this class doesn't know how much data every time stream pops, which
         * is defined by highWaterMarker of the stream. So BufferScheduler will cache
         * data received from the stream, when data in unresolvedDataArray exceeds the
         * blockSize defined, it will try to concat a blockSize of buffer, fill into available
         * buffers from incoming and push to outgoing array.
         *
         * @private
         * @type {Buffer[]}
         * @memberof BufferScheduler
         */
        this.unresolvedDataArray = [];
        /**
         * How much data consisted in unresolvedDataArray.
         *
         * @private
         * @type {number}
         * @memberof BufferScheduler
         */
        this.unresolvedLength = 0;
        /**
         * The array includes all the available buffers can be used to fill data from stream.
         *
         * @private
         * @type {Buffer[]}
         * @memberof BufferScheduler
         */
        this.incoming = [];
        /**
         * The array (queue) includes all the buffers filled from stream data.
         *
         * @private
         * @type {Buffer[]}
         * @memberof BufferScheduler
         */
        this.outgoing = [];
        if (bufferSize <= 0) {
            throw new RangeError("bufferSize must be larger than 0, current is " + bufferSize);
        }
        if (maxBuffers <= 0) {
            throw new RangeError("maxBuffers must be larger than 0, current is " + maxBuffers);
        }
        if (concurrency <= 0) {
            throw new RangeError("concurrency must be larger than 0, current is " + concurrency);
        }
        this.bufferSize = bufferSize;
        this.maxBuffers = maxBuffers;
        this.readable = readable;
        this.outgoingHandler = outgoingHandler;
        this.concurrency = concurrency;
        this.encoding = encoding;
    }
    /**
     * Start the scheduler, will return error when stream of any of the outgoingHandlers
     * returns error.
     *
     * @returns {Promise<void>}
     * @memberof BufferScheduler
     */
    BufferScheduler.prototype.do = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.readable.on("data", function (data) {
                            data = typeof data === "string" ? Buffer.from(data, _this.encoding) : data;
                            _this.appendUnresolvedData(data);
                            if (!_this.resolveData()) {
                                _this.readable.pause();
                            }
                        });
                        _this.readable.on("error", function (err) {
                            _this.emitter.emit("error", err);
                        });
                        _this.readable.on("end", function () {
                            _this.isStreamEnd = true;
                            _this.emitter.emit("checkEnd");
                        });
                        _this.emitter.on("error", function (err) {
                            _this.isError = true;
                            _this.readable.pause();
                            reject(err);
                        });
                        _this.emitter.on("checkEnd", function () {
                            if (_this.outgoing.length > 0) {
                                _this.triggerOutgoingHandlers();
                                return;
                            }
                            if (_this.isStreamEnd && _this.executingOutgoingHandlers === 0) {
                                if (_this.unresolvedLength > 0 && _this.unresolvedLength < _this.bufferSize) {
                                    _this.outgoingHandler(_this.shiftBufferFromUnresolvedDataArray(), _this.offset)
                                        .then(resolve)
                                        .catch(reject);
                                }
                                else if (_this.unresolvedLength >= _this.bufferSize) {
                                    return;
                                }
                                else {
                                    resolve();
                                }
                            }
                        });
                    })];
            });
        });
    };
    /**
     * Insert a new data into unresolved array.
     *
     * @private
     * @param {Buffer} data
     * @memberof BufferScheduler
     */
    BufferScheduler.prototype.appendUnresolvedData = function (data) {
        this.unresolvedDataArray.push(data);
        this.unresolvedLength += data.length;
    };
    /**
     * Try to shift a buffer with size in blockSize. The buffer returned may be less
     * than blockSize when data in unresolvedDataArray is less than bufferSize.
     *
     * @private
     * @returns {Buffer}
     * @memberof BufferScheduler
     */
    BufferScheduler.prototype.shiftBufferFromUnresolvedDataArray = function () {
        if (this.unresolvedLength >= this.bufferSize) {
            if (this.bufferSize === this.unresolvedDataArray[0].length) {
                this.unresolvedLength -= this.bufferSize;
                return this.unresolvedDataArray.shift();
            }
            // Lazy concat because Buffer.concat highly drops performance
            var merged = Buffer.concat(this.unresolvedDataArray, this.unresolvedLength);
            var buffer = merged.slice(0, this.bufferSize);
            merged = merged.slice(this.bufferSize);
            this.unresolvedDataArray = [merged];
            this.unresolvedLength -= buffer.length;
            return buffer;
        }
        else if (this.unresolvedLength > 0) {
            var merged = Buffer.concat(this.unresolvedDataArray, this.unresolvedLength);
            this.unresolvedDataArray = [];
            this.unresolvedLength = 0;
            return merged;
        }
        else {
            return Buffer.allocUnsafe(0);
        }
    };
    /**
     * Resolve data in unresolvedDataArray. For every buffer with size in blockSize
     * shifted, it will try to get (or allocate a buffer) from incoming, and fill it,
     * then push it into outgoing to be handled by outgoing handler.
     *
     * Return false when available buffers in incoming are not enough, else true.
     *
     * @private
     * @returns {boolean} Return false when buffers in incoming are not enough, else true.
     * @memberof BufferScheduler
     */
    BufferScheduler.prototype.resolveData = function () {
        while (this.unresolvedLength >= this.bufferSize) {
            var buffer = void 0;
            if (this.incoming.length > 0) {
                buffer = this.incoming.shift();
            }
            else {
                if (this.numBuffers < this.maxBuffers) {
                    buffer = Buffer.allocUnsafe(this.bufferSize);
                    this.numBuffers++;
                }
                else {
                    // No available buffer, wait for buffer returned
                    return false;
                }
            }
            buffer.fill(this.shiftBufferFromUnresolvedDataArray());
            this.outgoing.push(buffer);
            this.triggerOutgoingHandlers();
        }
        return true;
    };
    /**
     * Try to trigger a outgoing handler for every buffer in outgoing. Stop when
     * concurrency reaches.
     *
     * @private
     * @memberof BufferScheduler
     */
    BufferScheduler.prototype.triggerOutgoingHandlers = function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var buffer;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                do {
                    if (this.executingOutgoingHandlers >= this.concurrency) {
                        return [2 /*return*/];
                    }
                    buffer = this.outgoing.shift();
                    if (buffer) {
                        this.triggerOutgoingHandler(buffer);
                    }
                } while (buffer);
                return [2 /*return*/];
            });
        });
    };
    /**
     * Trigger a outgoing handler for a buffer shifted from outgoing.
     *
     * @private
     * @param {Buffer} buffer
     * @returns {Promise<any>}
     * @memberof BufferScheduler
     */
    BufferScheduler.prototype.triggerOutgoingHandler = function (buffer) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var bufferLength, err_1;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        bufferLength = buffer.length;
                        this.executingOutgoingHandlers++;
                        this.offset += bufferLength;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.outgoingHandler(buffer, this.offset - bufferLength)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        this.emitter.emit("error", err_1);
                        return [2 /*return*/];
                    case 4:
                        this.executingOutgoingHandlers--;
                        this.reuseBuffer(buffer);
                        this.emitter.emit("checkEnd");
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Return buffer used by outgoing handler into incoming.
     *
     * @private
     * @param {Buffer} buffer
     * @memberof BufferScheduler
     */
    BufferScheduler.prototype.reuseBuffer = function (buffer) {
        this.incoming.push(buffer);
        if (!this.isError && this.resolveData() && !this.isStreamEnd) {
            this.readable.resume();
        }
    };
    return BufferScheduler;
}());

//# sourceMappingURL=BufferScheduler.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/buffer/index.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js ***!
  \***********************************************************************************/
/*! exports provided: Mutex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(setImmediate) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mutex", function() { return Mutex; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

var MutexLockStatus;
(function (MutexLockStatus) {
    MutexLockStatus[MutexLockStatus["LOCKED"] = 0] = "LOCKED";
    MutexLockStatus[MutexLockStatus["UNLOCKED"] = 1] = "UNLOCKED";
})(MutexLockStatus || (MutexLockStatus = {}));
/**
 * An async mutex lock.
 *
 * @export
 * @class Mutex
 */
var Mutex = /** @class */ (function () {
    function Mutex() {
    }
    /**
     * Lock for a specific key. If the lock has been acquired by another customer, then
     * will wait until getting the lock.
     *
     * @static
     * @param {string} key lock key
     * @returns {Promise<void>}
     * @memberof Mutex
     */
    Mutex.lock = function (key) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        if (_this.keys[key] === undefined || _this.keys[key] === MutexLockStatus.UNLOCKED) {
                            _this.keys[key] = MutexLockStatus.LOCKED;
                            resolve();
                        }
                        else {
                            _this.onUnlockEvent(key, function () {
                                _this.keys[key] = MutexLockStatus.LOCKED;
                                resolve();
                            });
                        }
                    })];
            });
        });
    };
    /**
     * Unlock a key.
     *
     * @static
     * @param {string} key
     * @returns {Promise<void>}
     * @memberof Mutex
     */
    Mutex.unlock = function (key) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
            var _this = this;
            return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        if (_this.keys[key] === MutexLockStatus.LOCKED) {
                            _this.emitUnlockEvent(key);
                        }
                        delete _this.keys[key];
                        resolve();
                    })];
            });
        });
    };
    Mutex.onUnlockEvent = function (key, handler) {
        if (this.listeners[key] === undefined) {
            this.listeners[key] = [handler];
        }
        else {
            this.listeners[key].push(handler);
        }
    };
    Mutex.emitUnlockEvent = function (key) {
        var _this = this;
        if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {
            var handler_1 = this.listeners[key].shift();
            setImmediate(function () {
                handler_1.call(_this);
            });
        }
    };
    Mutex.keys = {};
    Mutex.listeners = {};
    return Mutex;
}());

//# sourceMappingURL=Mutex.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/timers-browserify/main.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js ***!
  \***********************************************************************************/
/*! exports provided: getCachedDefaultHttpClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCachedDefaultHttpClient", function() { return getCachedDefaultHttpClient; });
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

var _defaultHttpClient = new _azure_core_http__WEBPACK_IMPORTED_MODULE_0__["DefaultHttpClient"]();
function getCachedDefaultHttpClient() {
    return _defaultHttpClient;
}
//# sourceMappingURL=cache.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js ***!
  \***************************************************************************************/
/*! exports provided: SDK_VERSION, SERVICE_VERSION, BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES, BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES, BLOCK_BLOB_MAX_BLOCKS, DEFAULT_BLOCK_BUFFER_SIZE_BYTES, DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES, DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS, StorageOAuthScopes, URLConstants, HTTPURLConnection, HeaderConstants, ETagNone, ETagAny, SIZE_1_MB, BATCH_MAX_REQUEST, BATCH_MAX_PAYLOAD_IN_BYTES, HTTP_LINE_ENDING, HTTP_VERSION_1_1, EncryptionAlgorithmAES25, DevelopmentConnectionString, StorageBlobLoggingAllowedHeaderNames, StorageBlobLoggingAllowedQueryParameters */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SDK_VERSION", function() { return SDK_VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SERVICE_VERSION", function() { return SERVICE_VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES", function() { return BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES", function() { return BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLOCK_BLOB_MAX_BLOCKS", function() { return BLOCK_BLOB_MAX_BLOCKS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_BLOCK_BUFFER_SIZE_BYTES", function() { return DEFAULT_BLOCK_BUFFER_SIZE_BYTES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES", function() { return DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS", function() { return DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageOAuthScopes", function() { return StorageOAuthScopes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URLConstants", function() { return URLConstants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTTPURLConnection", function() { return HTTPURLConnection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderConstants", function() { return HeaderConstants; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ETagNone", function() { return ETagNone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ETagAny", function() { return ETagAny; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIZE_1_MB", function() { return SIZE_1_MB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BATCH_MAX_REQUEST", function() { return BATCH_MAX_REQUEST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BATCH_MAX_PAYLOAD_IN_BYTES", function() { return BATCH_MAX_PAYLOAD_IN_BYTES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTTP_LINE_ENDING", function() { return HTTP_LINE_ENDING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTTP_VERSION_1_1", function() { return HTTP_VERSION_1_1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EncryptionAlgorithmAES25", function() { return EncryptionAlgorithmAES25; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DevelopmentConnectionString", function() { return DevelopmentConnectionString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageBlobLoggingAllowedHeaderNames", function() { return StorageBlobLoggingAllowedHeaderNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StorageBlobLoggingAllowedQueryParameters", function() { return StorageBlobLoggingAllowedQueryParameters; });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var SDK_VERSION = "12.2.0-preview.1";
var SERVICE_VERSION = "2019-12-12";
var BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB
var BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB
var BLOCK_BLOB_MAX_BLOCKS = 50000;
var DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB
var DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB
var DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;
/**
 * The OAuth scope to use with Azure Storage.
 */
var StorageOAuthScopes = "https://storage.azure.com/.default";
var URLConstants = {
    Parameters: {
        FORCE_BROWSER_NO_CACHE: "_",
        SIGNATURE: "sig",
        SNAPSHOT: "snapshot",
        VERSIONID: "versionid",
        TIMEOUT: "timeout"
    }
};
var HTTPURLConnection = {
    HTTP_ACCEPTED: 202,
    HTTP_CONFLICT: 409,
    HTTP_NOT_FOUND: 404,
    HTTP_PRECON_FAILED: 412,
    HTTP_RANGE_NOT_SATISFIABLE: 416
};
var HeaderConstants = {
    AUTHORIZATION: "Authorization",
    AUTHORIZATION_SCHEME: "Bearer",
    CONTENT_ENCODING: "Content-Encoding",
    CONTENT_ID: "Content-ID",
    CONTENT_LANGUAGE: "Content-Language",
    CONTENT_LENGTH: "Content-Length",
    CONTENT_MD5: "Content-Md5",
    CONTENT_TRANSFER_ENCODING: "Content-Transfer-Encoding",
    CONTENT_TYPE: "Content-Type",
    COOKIE: "Cookie",
    DATE: "date",
    IF_MATCH: "if-match",
    IF_MODIFIED_SINCE: "if-modified-since",
    IF_NONE_MATCH: "if-none-match",
    IF_UNMODIFIED_SINCE: "if-unmodified-since",
    PREFIX_FOR_STORAGE: "x-ms-",
    RANGE: "Range",
    USER_AGENT: "User-Agent",
    X_MS_CLIENT_REQUEST_ID: "x-ms-client-request-id",
    X_MS_COPY_SOURCE: "x-ms-copy-source",
    X_MS_DATE: "x-ms-date",
    X_MS_ERROR_CODE: "x-ms-error-code",
    X_MS_VERSION: "x-ms-version"
};
var ETagNone = "";
var ETagAny = "*";
var SIZE_1_MB = 1 * 1024 * 1024;
var BATCH_MAX_REQUEST = 256;
var BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;
var HTTP_LINE_ENDING = "\r\n";
var HTTP_VERSION_1_1 = "HTTP/1.1";
var EncryptionAlgorithmAES25 = "AES256";
var DevelopmentConnectionString = "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;";
var StorageBlobLoggingAllowedHeaderNames = [
    "Access-Control-Allow-Origin",
    "Cache-Control",
    "Content-Length",
    "Content-Type",
    "Date",
    "Request-Id",
    "traceparent",
    "Transfer-Encoding",
    "User-Agent",
    "x-ms-client-request-id",
    "x-ms-date",
    "x-ms-error-code",
    "x-ms-request-id",
    "x-ms-return-client-request-id",
    "x-ms-version",
    "Accept-Ranges",
    "Content-Disposition",
    "Content-Encoding",
    "Content-Language",
    "Content-MD5",
    "Content-Range",
    "ETag",
    "Last-Modified",
    "Server",
    "Vary",
    "x-ms-content-crc64",
    "x-ms-copy-action",
    "x-ms-copy-completion-time",
    "x-ms-copy-id",
    "x-ms-copy-progress",
    "x-ms-copy-status",
    "x-ms-has-immutability-policy",
    "x-ms-has-legal-hold",
    "x-ms-lease-state",
    "x-ms-lease-status",
    "x-ms-range",
    "x-ms-request-server-encrypted",
    "x-ms-server-encrypted",
    "x-ms-snapshot",
    "x-ms-source-range",
    "If-Match",
    "If-Modified-Since",
    "If-None-Match",
    "If-Unmodified-Since",
    "x-ms-access-tier",
    "x-ms-access-tier-change-time",
    "x-ms-access-tier-inferred",
    "x-ms-account-kind",
    "x-ms-archive-status",
    "x-ms-blob-append-offset",
    "x-ms-blob-cache-control",
    "x-ms-blob-committed-block-count",
    "x-ms-blob-condition-appendpos",
    "x-ms-blob-condition-maxsize",
    "x-ms-blob-content-disposition",
    "x-ms-blob-content-encoding",
    "x-ms-blob-content-language",
    "x-ms-blob-content-length",
    "x-ms-blob-content-md5",
    "x-ms-blob-content-type",
    "x-ms-blob-public-access",
    "x-ms-blob-sequence-number",
    "x-ms-blob-type",
    "x-ms-copy-destination-snapshot",
    "x-ms-creation-time",
    "x-ms-default-encryption-scope",
    "x-ms-delete-snapshots",
    "x-ms-delete-type-permanent",
    "x-ms-deny-encryption-scope-override",
    "x-ms-encryption-algorithm",
    "x-ms-if-sequence-number-eq",
    "x-ms-if-sequence-number-le",
    "x-ms-if-sequence-number-lt",
    "x-ms-incremental-copy",
    "x-ms-lease-action",
    "x-ms-lease-break-period",
    "x-ms-lease-duration",
    "x-ms-lease-id",
    "x-ms-lease-time",
    "x-ms-page-write",
    "x-ms-proposed-lease-id",
    "x-ms-range-get-content-md5",
    "x-ms-rehydrate-priority",
    "x-ms-sequence-number-action",
    "x-ms-sku-name",
    "x-ms-source-content-md5",
    "x-ms-source-if-match",
    "x-ms-source-if-modified-since",
    "x-ms-source-if-none-match",
    "x-ms-source-if-unmodified-since",
    "x-ms-tag-count",
    "x-ms-encryption-key-sha256"
];
var StorageBlobLoggingAllowedQueryParameters = [
    "comp",
    "maxresults",
    "rscc",
    "rscd",
    "rsce",
    "rscl",
    "rsct",
    "se",
    "si",
    "sip",
    "sp",
    "spr",
    "sr",
    "srt",
    "ss",
    "st",
    "sv",
    "include",
    "marker",
    "prefix",
    "copyid",
    "restype",
    "blockid",
    "blocklisttype",
    "delimiter",
    "prevsnapshot",
    "ske",
    "skoid",
    "sks",
    "skt",
    "sktid",
    "skv",
    "snapshot"
];
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js ***!
  \*************************************************************************************/
/*! exports provided: createSpan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSpan", function() { return createSpan; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-tracing */ "./node_modules/@azure/core-tracing/dist-esm/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ "./node_modules/@opentelemetry/api/build/src/index.js");
/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__);
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.



/**
 * Creates a span using the global tracer.
 * @param name The name of the operation being performed.
 * @param tracingOptions The options for the underlying http request.
 */
function createSpan(operationName, tracingOptions) {
    if (tracingOptions === void 0) { tracingOptions = {}; }
    var tracer = Object(_azure_core_tracing__WEBPACK_IMPORTED_MODULE_1__["getTracer"])();
    var spanOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, tracingOptions.spanOptions), { kind: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__["SpanKind"].INTERNAL });
    var span = tracer.startSpan("Azure.Storage.Blob." + operationName, spanOptions);
    span.setAttribute("az.namespace", "Microsoft.Storage");
    var newOptions = tracingOptions.spanOptions || {};
    if (span.isRecording()) {
        newOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, tracingOptions.spanOptions), { parent: span.context(), attributes: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, spanOptions.attributes), { "az.namespace": "Microsoft.Storage" }) });
    }
    return {
        span: span,
        spanOptions: newOptions
    };
}
//# sourceMappingURL=tracing.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js ***!
  \*******************************************************************************************/
/*! exports provided: blobToArrayBuffer, blobToString, streamToBuffer, streamToBuffer2, readStreamToLocalFile, fsStat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobToArrayBuffer", function() { return blobToArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blobToString", function() { return blobToString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "streamToBuffer", function() { return streamToBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "streamToBuffer2", function() { return streamToBuffer2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readStreamToLocalFile", function() { return readStreamToLocalFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fsStat", function() { return fsStat; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/**
 * Convert a Browser Blob object into ArrayBuffer.
 *
 * @export
 * @param {Blob} blob
 * @returns {Promise<ArrayBuffer>}
 */
function blobToArrayBuffer(blob) {
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var fileReader;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            fileReader = new FileReader();
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fileReader.onloadend = function (ev) {
                        resolve(ev.target.result);
                    };
                    fileReader.onerror = reject;
                    fileReader.readAsArrayBuffer(blob);
                })];
        });
    });
}
/**
 * Convert a Browser Blob object into string.
 *
 * @export
 * @param {Blob} blob
 * @returns {Promise<ArrayBuffer>}
 */
function blobToString(blob) {
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        var fileReader;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            fileReader = new FileReader();
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    fileReader.onloadend = function (ev) {
                        resolve(ev.target.result);
                    };
                    fileReader.onerror = reject;
                    fileReader.readAsText(blob);
                })];
        });
    });
}
function streamToBuffer() { }
function streamToBuffer2() { }
function readStreamToLocalFile() { }
var fsStat = function stat() { };
//# sourceMappingURL=utils.browser.js.map

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js ***!
  \******************************************************************************************/
/*! exports provided: escapeURLPath, getValueInConnString, extractConnectionStringParts, appendToURLPath, setURLParameter, getURLParameter, setURLHost, getURLPath, getURLScheme, getURLPathAndQuery, getURLQueries, truncatedISO8061Date, base64encode, base64decode, generateBlockID, delay, padStart, sanitizeURL, sanitizeHeaders, iEqual, getAccountNameFromUrl, toBlobTagsString, toBlobTags, toTags, toQuerySerialization */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "escapeURLPath", function() { return escapeURLPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValueInConnString", function() { return getValueInConnString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractConnectionStringParts", function() { return extractConnectionStringParts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendToURLPath", function() { return appendToURLPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setURLParameter", function() { return setURLParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getURLParameter", function() { return getURLParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setURLHost", function() { return setURLHost; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getURLPath", function() { return getURLPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getURLScheme", function() { return getURLScheme; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getURLPathAndQuery", function() { return getURLPathAndQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getURLQueries", function() { return getURLQueries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "truncatedISO8061Date", function() { return truncatedISO8061Date; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "base64encode", function() { return base64encode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "base64decode", function() { return base64decode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateBlockID", function() { return generateBlockID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "delay", function() { return delay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "padStart", function() { return padStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sanitizeURL", function() { return sanitizeURL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sanitizeHeaders", function() { return sanitizeHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iEqual", function() { return iEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAccountNameFromUrl", function() { return getAccountNameFromUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toBlobTagsString", function() { return toBlobTagsString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toBlobTags", function() { return toBlobTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toTags", function() { return toTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toQuerySerialization", function() { return toQuerySerialization; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _azure_core_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http */ "./node_modules/@azure/core-http/es/src/coreHttp.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js");
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.



/**
 * Reserved URL characters must be properly escaped for Storage services like Blob or File.
 *
 * ## URL encode and escape strategy for JS SDKs
 *
 * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.
 * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL
 * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.
 *
 * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.
 *
 * This is what legacy V2 SDK does, simple and works for most of the cases.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
 *   SDK will encode it to "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
 *   SDK will encode it to "http://account.blob.core.windows.net/con/b%253A" and send to server. A blob named "b%3A" will be created.
 *
 * But this strategy will make it not possible to create a blob with "?" in it's name. Because when customer URL string is
 * "http://account.blob.core.windows.net/con/blob?name", the "?name" will be treated as URL paramter instead of blob name.
 * If customer URL string is "http://account.blob.core.windows.net/con/blob%3Fname", a blob named "blob%3Fname" will be created.
 * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.
 * We cannot accept a SDK cannot create a blob name with "?". So we implement strategy two:
 *
 * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.
 *
 * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b:",
 *   SDK will escape ":" like "http://account.blob.core.windows.net/con/b%3A" and send to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%3A",
 *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%3A" to server. A blob named "b:" will be created.
 * - When customer URL string is "http://account.blob.core.windows.net/con/b%253A",
 *   There is no special characters, so send "http://account.blob.core.windows.net/con/b%253A" to server. A blob named "b%3A" will be created.
 *
 * This strategy gives us flexibility to create with any special characters. But "%" will be treated as a special characters, if the URL string
 * is not encoded, there shouldn't a "%" in the URL string, otherwise the URL is not a valid URL.
 * If customer needs to create a blob with "%" in it's blob name, use "%25" instead of "%". Just like above 3rd sample.
 * And following URL strings are invalid:
 * - "http://account.blob.core.windows.net/con/b%"
 * - "http://account.blob.core.windows.net/con/b%2"
 * - "http://account.blob.core.windows.net/con/b%G"
 *
 * Another special character is "?", use "%2F" to represent a blob name with "?" in a URL string.
 *
 * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`
 *
 * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.
 *
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
 * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata
 *
 * @export
 * @param {string} url
 * @returns {string}
 */
function escapeURLPath(url) {
    var urlParsed = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    var path = urlParsed.getPath();
    path = path || "/";
    path = escape(path);
    urlParsed.setPath(path);
    return urlParsed.toString();
}
function getProxyUriFromDevConnString(connectionString) {
    // Development Connection String
    // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key
    var proxyUri = "";
    if (connectionString.search("DevelopmentStorageProxyUri=") !== -1) {
        // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri
        var matchCredentials = connectionString.split(";");
        for (var _i = 0, matchCredentials_1 = matchCredentials; _i < matchCredentials_1.length; _i++) {
            var element = matchCredentials_1[_i];
            if (element.trim().startsWith("DevelopmentStorageProxyUri=")) {
                proxyUri = element.trim().match("DevelopmentStorageProxyUri=(.*)")[1];
            }
        }
    }
    return proxyUri;
}
function getValueInConnString(connectionString, argument) {
    var elements = connectionString.split(";");
    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var element = elements_1[_i];
        if (element.trim().startsWith(argument)) {
            return element.trim().match(argument + "=(.*)")[1];
        }
    }
    return "";
}
/**
 * Extracts the parts of an Azure Storage account connection string.
 *
 * @export
 * @param {string} connectionString Connection string.
 * @returns {ConnectionString}  String key value pairs of the storage account's url and credentials.
 */
function extractConnectionStringParts(connectionString) {
    var proxyUri = "";
    if (connectionString.startsWith("UseDevelopmentStorage=true")) {
        // Development connection string
        proxyUri = getProxyUriFromDevConnString(connectionString);
        connectionString = _constants__WEBPACK_IMPORTED_MODULE_2__["DevelopmentConnectionString"];
    }
    // Matching BlobEndpoint in the Account connection string
    var blobEndpoint = getValueInConnString(connectionString, "BlobEndpoint");
    // Slicing off '/' at the end if exists
    // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)
    blobEndpoint = blobEndpoint.endsWith("/") ? blobEndpoint.slice(0, -1) : blobEndpoint;
    if (connectionString.search("DefaultEndpointsProtocol=") !== -1 &&
        connectionString.search("AccountKey=") !== -1) {
        // Account connection string
        var defaultEndpointsProtocol = "";
        var accountName = "";
        var accountKey = Buffer.from("accountKey", "base64");
        var endpointSuffix = "";
        // Get account name and key
        accountName = getValueInConnString(connectionString, "AccountName");
        accountKey = Buffer.from(getValueInConnString(connectionString, "AccountKey"), "base64");
        if (!blobEndpoint) {
            // BlobEndpoint is not present in the Account connection string
            // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`
            defaultEndpointsProtocol = getValueInConnString(connectionString, "DefaultEndpointsProtocol");
            var protocol = defaultEndpointsProtocol.toLowerCase();
            if (protocol !== "https" && protocol !== "http") {
                throw new Error("Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'");
            }
            endpointSuffix = getValueInConnString(connectionString, "EndpointSuffix");
            if (!endpointSuffix) {
                throw new Error("Invalid EndpointSuffix in the provided Connection String");
            }
            blobEndpoint = defaultEndpointsProtocol + "://" + accountName + ".blob." + endpointSuffix;
        }
        if (!accountName) {
            throw new Error("Invalid AccountName in the provided Connection String");
        }
        else if (accountKey.length === 0) {
            throw new Error("Invalid AccountKey in the provided Connection String");
        }
        return {
            kind: "AccountConnString",
            url: blobEndpoint,
            accountName: accountName,
            accountKey: accountKey,
            proxyUri: proxyUri
        };
    }
    else {
        // SAS connection string
        var accountSas = getValueInConnString(connectionString, "SharedAccessSignature");
        var accountName = getAccountNameFromUrl(blobEndpoint);
        if (!blobEndpoint) {
            throw new Error("Invalid BlobEndpoint in the provided SAS Connection String");
        }
        else if (!accountSas) {
            throw new Error("Invalid SharedAccessSignature in the provided SAS Connection String");
        }
        else if (!accountName) {
            throw new Error("Invalid AccountName in the provided SAS Connection String");
        }
        return { kind: "SASConnString", url: blobEndpoint, accountName: accountName, accountSas: accountSas };
    }
}
/**
 * Internal escape method implemented Strategy Two mentioned in escapeURL() description.
 *
 * @param {string} text
 * @returns {string}
 */
function escape(text) {
    return encodeURIComponent(text)
        .replace(/%2F/g, "/") // Don't escape for "/"
        .replace(/'/g, "%27") // Escape for "'"
        .replace(/\+/g, "%20")
        .replace(/%25/g, "%"); // Revert encoded "%"
}
/**
 * Append a string to URL path. Will remove duplicated "/" in front of the string
 * when URL path ends with a "/".
 *
 * @export
 * @param {string} url Source URL string
 * @param {string} name String to be appended to URL
 * @returns {string} An updated URL string
 */
function appendToURLPath(url, name) {
    var urlParsed = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    var path = urlParsed.getPath();
    path = path ? (path.endsWith("/") ? "" + path + name : path + "/" + name) : name;
    urlParsed.setPath(path);
    return urlParsed.toString();
}
/**
 * Set URL parameter name and value. If name exists in URL parameters, old value
 * will be replaced by name key. If not provide value, the parameter will be deleted.
 *
 * @export
 * @param {string} url Source URL string
 * @param {string} name Parameter name
 * @param {string} [value] Parameter value
 * @returns {string} An updated URL string
 */
function setURLParameter(url, name, value) {
    var urlParsed = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    urlParsed.setQueryParameter(name, value);
    return urlParsed.toString();
}
/**
 * Get URL parameter by name.
 *
 * @export
 * @param {string} url
 * @param {string} name
 * @returns {(string | string[] | undefined)}
 */
function getURLParameter(url, name) {
    var urlParsed = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    return urlParsed.getQueryParameterValue(name);
}
/**
 * Set URL host.
 *
 * @export
 * @param {string} url Source URL string
 * @param {string} host New host string
 * @returns An updated URL string
 */
function setURLHost(url, host) {
    var urlParsed = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    urlParsed.setHost(host);
    return urlParsed.toString();
}
/**
 * Get URL path from an URL string.
 *
 * @export
 * @param {string} url Source URL string
 * @returns {(string | undefined)}
 */
function getURLPath(url) {
    var urlParsed = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    return urlParsed.getPath();
}
/**
 * Get URL scheme from an URL string.
 *
 * @export
 * @param {string} url Source URL string
 * @returns {(string | undefined)}
 */
function getURLScheme(url) {
    var urlParsed = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    return urlParsed.getScheme();
}
/**
 * Get URL path and query from an URL string.
 *
 * @export
 * @param {string} url Source URL string
 * @returns {(string | undefined)}
 */
function getURLPathAndQuery(url) {
    var urlParsed = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    var pathString = urlParsed.getPath();
    if (!pathString) {
        throw new RangeError("Invalid url without valid path.");
    }
    var queryString = urlParsed.getQuery() || "";
    queryString = queryString.trim();
    if (queryString != "") {
        queryString = queryString.startsWith("?") ? queryString : "?" + queryString; // Ensure query string start with '?'
    }
    return "" + pathString + queryString;
}
/**
 * Get URL query key value pairs from an URL string.
 *
 * @export
 * @param {string} url
 * @returns {{[key: string]: string}}
 */
function getURLQueries(url) {
    var queryString = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url).getQuery();
    if (!queryString) {
        return {};
    }
    queryString = queryString.trim();
    queryString = queryString.startsWith("?") ? queryString.substr(1) : queryString;
    var querySubStrings = queryString.split("&");
    querySubStrings = querySubStrings.filter(function (value) {
        var indexOfEqual = value.indexOf("=");
        var lastIndexOfEqual = value.lastIndexOf("=");
        return (indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1);
    });
    var queries = {};
    for (var _i = 0, querySubStrings_1 = querySubStrings; _i < querySubStrings_1.length; _i++) {
        var querySubString = querySubStrings_1[_i];
        var splitResults = querySubString.split("=");
        var key = splitResults[0];
        var value = splitResults[1];
        queries[key] = value;
    }
    return queries;
}
/**
 * Rounds a date off to seconds.
 *
 * @export
 * @param {Date} date
 * @param {boolean} [withMilliseconds=true] If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;
 *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.
 * @returns {string} Date string in ISO8061 format, with or without 7 milliseconds component
 */
function truncatedISO8061Date(date, withMilliseconds) {
    if (withMilliseconds === void 0) { withMilliseconds = true; }
    // Date.toISOString() will return like "2018-10-29T06:34:36.139Z"
    var dateString = date.toISOString();
    return withMilliseconds
        ? dateString.substring(0, dateString.length - 1) + "0000" + "Z"
        : dateString.substring(0, dateString.length - 5) + "Z";
}
/**
 * Base64 encode.
 *
 * @export
 * @param {string} content
 * @returns {string}
 */
function base64encode(content) {
    return !_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"] ? btoa(content) : Buffer.from(content).toString("base64");
}
/**
 * Base64 decode.
 *
 * @export
 * @param {string} encodedString
 * @returns {string}
 */
function base64decode(encodedString) {
    return !_azure_core_http__WEBPACK_IMPORTED_MODULE_1__["isNode"] ? atob(encodedString) : Buffer.from(encodedString, "base64").toString();
}
/**
 * Generate a 64 bytes base64 block ID string.
 *
 * @export
 * @param {number} blockIndex
 * @returns {string}
 */
function generateBlockID(blockIDPrefix, blockIndex) {
    // To generate a 64 bytes base64 string, source string should be 48
    var maxSourceStringLength = 48;
    // A blob can have a maximum of 100,000 uncommitted blocks at any given time
    var maxBlockIndexLength = 6;
    var maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;
    if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {
        blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);
    }
    var res = blockIDPrefix +
        padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, "0");
    return base64encode(res);
}
/**
 * Delay specified time interval.
 *
 * @export
 * @param {number} timeInMs
 * @param {AbortSignalLike} [aborter]
 * @param {Error} [abortError]
 */
function delay(timeInMs, aborter, abortError) {
    return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var timeout;
                    var abortHandler = function () {
                        if (timeout !== undefined) {
                            clearTimeout(timeout);
                        }
                        reject(abortError);
                    };
                    var resolveHandler = function () {
                        if (aborter !== undefined) {
                            aborter.removeEventListener("abort", abortHandler);
                        }
                        resolve();
                    };
                    timeout = setTimeout(resolveHandler, timeInMs);
                    if (aborter !== undefined) {
                        aborter.addEventListener("abort", abortHandler);
                    }
                })];
        });
    });
}
/**
 * String.prototype.padStart()
 *
 * @export
 * @param {string} currentString
 * @param {number} targetLength
 * @param {string} [padString=" "]
 * @returns {string}
 */
function padStart(currentString, targetLength, padString) {
    if (padString === void 0) { padString = " "; }
    // TS doesn't know this code needs to run downlevel sometimes.
    // @ts-expect-error
    if (String.prototype.padStart) {
        return currentString.padStart(targetLength, padString);
    }
    padString = padString || " ";
    if (currentString.length > targetLength) {
        return currentString;
    }
    else {
        targetLength = targetLength - currentString.length;
        if (targetLength > padString.length) {
            padString += padString.repeat(targetLength / padString.length);
        }
        return padString.slice(0, targetLength) + currentString;
    }
}
function sanitizeURL(url) {
    var safeURL = url;
    if (getURLParameter(safeURL, _constants__WEBPACK_IMPORTED_MODULE_2__["URLConstants"].Parameters.SIGNATURE)) {
        safeURL = setURLParameter(safeURL, _constants__WEBPACK_IMPORTED_MODULE_2__["URLConstants"].Parameters.SIGNATURE, "*****");
    }
    return safeURL;
}
function sanitizeHeaders(originalHeader) {
    var headers = new _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]();
    for (var _i = 0, _a = originalHeader.headersArray(); _i < _a.length; _i++) {
        var header = _a[_i];
        if (header.name.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__["HeaderConstants"].AUTHORIZATION.toLowerCase()) {
            headers.set(header.name, "*****");
        }
        else if (header.name.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__["HeaderConstants"].X_MS_COPY_SOURCE) {
            headers.set(header.name, sanitizeURL(header.value));
        }
        else {
            headers.set(header.name, header.value);
        }
    }
    return headers;
}
/**
 * If two strings are equal when compared case insensitive.
 *
 * @export
 * @param {string} str1
 * @param {string} str2
 * @returns {boolean}
 */
function iEqual(str1, str2) {
    return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();
}
/**
 * Extracts account name from the url
 * @param {string} url url to extract the account name from
 * @returns {string} with the account name
 */
function getAccountNameFromUrl(url) {
    var parsedUrl = _azure_core_http__WEBPACK_IMPORTED_MODULE_1__["URLBuilder"].parse(url);
    var accountName;
    try {
        if (parsedUrl.getHost().split(".")[1] === "blob") {
            // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;
            accountName = parsedUrl.getHost().split(".")[0];
        }
        else {
            // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/
            // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/
            // .getPath() -> /devstoreaccount1/
            accountName = parsedUrl.getPath().split("/")[1];
        }
        if (!accountName) {
            throw new Error("Provided accountName is invalid.");
        }
        return accountName;
    }
    catch (error) {
        throw new Error("Unable to extract accountName with provided information.");
    }
}
/**
 * Convert Tags to encoded string.
 *
 * @export
 * @param {Tags} tags
 * @returns {string | undefined}
 */
function toBlobTagsString(tags) {
    if (tags === undefined) {
        return undefined;
    }
    var tagPairs = [];
    for (var key in tags) {
        if (tags.hasOwnProperty(key)) {
            var value = tags[key];
            tagPairs.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
    }
    return tagPairs.join("&");
}
/**
 * Convert Tags type to BlobTags.
 *
 * @export
 * @param {Tags} [tags]
 * @returns {(BlobTags | undefined)}
 */
function toBlobTags(tags) {
    if (tags === undefined) {
        return undefined;
    }
    var res = {
        blobTagSet: []
    };
    for (var key in tags) {
        if (tags.hasOwnProperty(key)) {
            var value = tags[key];
            res.blobTagSet.push({
                key: key,
                value: value
            });
        }
    }
    return res;
}
/**
 * Covert BlobTags to Tags type.
 *
 * @export
 * @param {BlobTags} [tags]
 * @returns {(Tags | undefined)}
 */
function toTags(tags) {
    if (tags === undefined) {
        return undefined;
    }
    var res = {};
    for (var _i = 0, _a = tags.blobTagSet; _i < _a.length; _i++) {
        var blobTag = _a[_i];
        res[blobTag.key] = blobTag.value;
    }
    return res;
}
/**
 * Convert BlobQueryTextConfiguration to QuerySerialization type.
 *
 * @export
 * @param {(BlobQueryJsonTextConfiguration | BlobQueryCsvTextConfiguration)} [textConfiguration]
 * @returns {(QuerySerialization | undefined)}
 */
function toQuerySerialization(textConfiguration) {
    if (textConfiguration === undefined) {
        return undefined;
    }
    switch (textConfiguration.kind) {
        case "csv":
            return {
                format: {
                    type: "delimited",
                    delimitedTextConfiguration: {
                        columnSeparator: textConfiguration.columnSeparator || ",",
                        fieldQuote: textConfiguration.fieldQuote || "",
                        recordSeparator: textConfiguration.recordSeparator,
                        escapeChar: textConfiguration.escapeCharacter || "",
                        headersPresent: textConfiguration.hasHeaders || false
                    }
                }
            };
        case "json":
            return {
                format: {
                    type: "json",
                    jsonTextConfiguration: {
                        recordSeparator: textConfiguration.recordSeparator
                    }
                }
            };
        default:
            throw Error("Invalid BlobQueryTextConfiguration.");
    }
}
//# sourceMappingURL=utils.common.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/buffer/index.js */ "../../../../.nvm/versions/node/v12.16.3/lib/node_modules/webpack/node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/api/context.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/api/context.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const context_base_1 = __webpack_require__(/*! @opentelemetry/context-base */ "./node_modules/@opentelemetry/context-base/build/src/index.js");
/**
 * Singleton object which represents the entry point to the OpenTelemetry Context API
 */
class ContextAPI {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    constructor() {
        this._contextManager = new context_base_1.NoopContextManager();
    }
    /** Get the singleton instance of the Context API */
    static getInstance() {
        if (!this._instance) {
            this._instance = new ContextAPI();
        }
        return this._instance;
    }
    /**
     * Set the current context manager. Returns the initialized context manager
     */
    setGlobalContextManager(contextManager) {
        this._contextManager = contextManager;
        return contextManager;
    }
    /**
     * Get the currently active context
     */
    active() {
        return this._contextManager.active();
    }
    /**
     * Execute a function with an active context
     *
     * @param context context to be active during function execution
     * @param fn function to execute in a context
     */
    with(context, fn) {
        return this._contextManager.with(context, fn);
    }
    /**
     * Bind a context to a target function or event emitter
     *
     * @param target function or event emitter to bind
     * @param context context to bind to the event emitter or function. Defaults to the currently active context
     */
    bind(target, context = this.active()) {
        return this._contextManager.bind(target, context);
    }
}
exports.ContextAPI = ContextAPI;
//# sourceMappingURL=context.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/api/metrics.js":
/*!******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/api/metrics.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NoopMeterProvider_1 = __webpack_require__(/*! ../metrics/NoopMeterProvider */ "./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js");
/**
 * Singleton object which represents the entry point to the OpenTelemetry Metrics API
 */
class MetricsAPI {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    constructor() {
        this._meterProvider = NoopMeterProvider_1.NOOP_METER_PROVIDER;
    }
    /** Get the singleton instance of the Metrics API */
    static getInstance() {
        if (!this._instance) {
            this._instance = new MetricsAPI();
        }
        return this._instance;
    }
    /**
     * Set the current global meter. Returns the initialized global meter provider.
     */
    setGlobalMeterProvider(provider) {
        this._meterProvider = provider;
        return provider;
    }
    /**
     * Returns the global meter provider.
     */
    getMeterProvider() {
        return this._meterProvider;
    }
    /**
     * Returns a meter from the global meter provider.
     */
    getMeter(name, version) {
        return this.getMeterProvider().getMeter(name, version);
    }
}
exports.MetricsAPI = MetricsAPI;
//# sourceMappingURL=metrics.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/api/propagation.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/api/propagation.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const getter_1 = __webpack_require__(/*! ../context/propagation/getter */ "./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js");
const NoopHttpTextPropagator_1 = __webpack_require__(/*! ../context/propagation/NoopHttpTextPropagator */ "./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js");
const setter_1 = __webpack_require__(/*! ../context/propagation/setter */ "./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js");
const context_1 = __webpack_require__(/*! ./context */ "./node_modules/@opentelemetry/api/build/src/api/context.js");
const contextApi = context_1.ContextAPI.getInstance();
/**
 * Singleton object which represents the entry point to the OpenTelemetry Propagation API
 */
class PropagationAPI {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    constructor() {
        this._propagator = NoopHttpTextPropagator_1.NOOP_HTTP_TEXT_PROPAGATOR;
    }
    /** Get the singleton instance of the Propagator API */
    static getInstance() {
        if (!this._instance) {
            this._instance = new PropagationAPI();
        }
        return this._instance;
    }
    /**
     * Set the current propagator. Returns the initialized propagator
     */
    setGlobalPropagator(propagator) {
        this._propagator = propagator;
        return propagator;
    }
    /**
     * Inject context into a carrier to be propagated inter-process
     *
     * @param carrier carrier to inject context into
     * @param setter Function used to set values on the carrier
     * @param context Context carrying tracing data to inject. Defaults to the currently active context.
     */
    inject(carrier, setter = setter_1.defaultSetter, context = contextApi.active()) {
        return this._propagator.inject(context, carrier, setter);
    }
    /**
     * Extract context from a carrier
     *
     * @param carrier Carrier to extract context from
     * @param getter Function used to extract keys from a carrier
     * @param context Context which the newly created context will inherit from. Defaults to the currently active context.
     */
    extract(carrier, getter = getter_1.defaultGetter, context = contextApi.active()) {
        return this._propagator.extract(context, carrier, getter);
    }
}
exports.PropagationAPI = PropagationAPI;
//# sourceMappingURL=propagation.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/api/trace.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/api/trace.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NoopTracerProvider_1 = __webpack_require__(/*! ../trace/NoopTracerProvider */ "./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js");
/**
 * Singleton object which represents the entry point to the OpenTelemetry Tracing API
 */
class TraceAPI {
    /** Empty private constructor prevents end users from constructing a new instance of the API */
    constructor() {
        this._tracerProvider = NoopTracerProvider_1.NOOP_TRACER_PROVIDER;
    }
    /** Get the singleton instance of the Trace API */
    static getInstance() {
        if (!this._instance) {
            this._instance = new TraceAPI();
        }
        return this._instance;
    }
    /**
     * Set the current global tracer. Returns the initialized global tracer provider
     */
    setGlobalTracerProvider(provider) {
        this._tracerProvider = provider;
        return provider;
    }
    /**
     * Returns the global tracer provider.
     */
    getTracerProvider() {
        return this._tracerProvider;
    }
    /**
     * Returns a tracer from the global tracer provider.
     */
    getTracer(name, version) {
        return this.getTracerProvider().getTracer(name, version);
    }
}
exports.TraceAPI = TraceAPI;
//# sourceMappingURL=trace.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * No-op implementations of {@link HttpTextPropagator}.
 */
class NoopHttpTextPropagator {
    /** Noop inject function does nothing */
    inject(context, carrier, setter) { }
    /** Noop extract function does nothing and returns the input context */
    extract(context, carrier, getter) {
        return context;
    }
}
exports.NoopHttpTextPropagator = NoopHttpTextPropagator;
exports.NOOP_HTTP_TEXT_PROPAGATOR = new NoopHttpTextPropagator();
//# sourceMappingURL=NoopHttpTextPropagator.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Default getter which just does a simple property access. Returns
 * undefined if the key is not set.
 *
 * @param carrier
 * @param key
 */
function defaultGetter(carrier, key) {
    return carrier[key];
}
exports.defaultGetter = defaultGetter;
//# sourceMappingURL=getter.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Default setter which sets value via direct property access
 *
 * @param carrier
 * @param key
 */
function defaultSetter(carrier, key, value) {
    carrier[key] = value;
}
exports.defaultSetter = defaultSetter;
//# sourceMappingURL=setter.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * EntryTtl is an integer that represents number of hops an entry can propagate.
 *
 * For now, ONLY special values (0 and -1) are supported.
 */
var EntryTtl;
(function (EntryTtl) {
    /**
     * NO_PROPAGATION is considered to have local context and is used within the
     * process it created.
     */
    EntryTtl[EntryTtl["NO_PROPAGATION"] = 0] = "NO_PROPAGATION";
    /** UNLIMITED_PROPAGATION can propagate unlimited hops. */
    EntryTtl[EntryTtl["UNLIMITED_PROPAGATION"] = -1] = "UNLIMITED_PROPAGATION";
})(EntryTtl = exports.EntryTtl || (exports.EntryTtl = {}));
//# sourceMappingURL=EntryValue.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./context/propagation/getter */ "./node_modules/@opentelemetry/api/build/src/context/propagation/getter.js"));
__export(__webpack_require__(/*! ./context/propagation/NoopHttpTextPropagator */ "./node_modules/@opentelemetry/api/build/src/context/propagation/NoopHttpTextPropagator.js"));
__export(__webpack_require__(/*! ./context/propagation/setter */ "./node_modules/@opentelemetry/api/build/src/context/propagation/setter.js"));
__export(__webpack_require__(/*! ./correlation_context/EntryValue */ "./node_modules/@opentelemetry/api/build/src/correlation_context/EntryValue.js"));
__export(__webpack_require__(/*! ./metrics/Metric */ "./node_modules/@opentelemetry/api/build/src/metrics/Metric.js"));
__export(__webpack_require__(/*! ./metrics/NoopMeter */ "./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js"));
__export(__webpack_require__(/*! ./metrics/NoopMeterProvider */ "./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js"));
__export(__webpack_require__(/*! ./trace/NoopSpan */ "./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js"));
__export(__webpack_require__(/*! ./trace/NoopTracer */ "./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js"));
__export(__webpack_require__(/*! ./trace/NoopTracerProvider */ "./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js"));
__export(__webpack_require__(/*! ./trace/span_kind */ "./node_modules/@opentelemetry/api/build/src/trace/span_kind.js"));
__export(__webpack_require__(/*! ./trace/status */ "./node_modules/@opentelemetry/api/build/src/trace/status.js"));
__export(__webpack_require__(/*! ./trace/trace_flags */ "./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js"));
var context_base_1 = __webpack_require__(/*! @opentelemetry/context-base */ "./node_modules/@opentelemetry/context-base/build/src/index.js");
exports.Context = context_base_1.Context;
const context_1 = __webpack_require__(/*! ./api/context */ "./node_modules/@opentelemetry/api/build/src/api/context.js");
/** Entrypoint for context API */
exports.context = context_1.ContextAPI.getInstance();
const trace_1 = __webpack_require__(/*! ./api/trace */ "./node_modules/@opentelemetry/api/build/src/api/trace.js");
/** Entrypoint for trace API */
exports.trace = trace_1.TraceAPI.getInstance();
const metrics_1 = __webpack_require__(/*! ./api/metrics */ "./node_modules/@opentelemetry/api/build/src/api/metrics.js");
/** Entrypoint for metrics API */
exports.metrics = metrics_1.MetricsAPI.getInstance();
const propagation_1 = __webpack_require__(/*! ./api/propagation */ "./node_modules/@opentelemetry/api/build/src/api/propagation.js");
/** Entrypoint for propagation API */
exports.propagation = propagation_1.PropagationAPI.getInstance();
exports.default = {
    trace: exports.trace,
    metrics: exports.metrics,
    context: exports.context,
    propagation: exports.propagation,
};
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/metrics/Metric.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/metrics/Metric.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/** The Type of value. It describes how the data is reported. */
var ValueType;
(function (ValueType) {
    ValueType[ValueType["INT"] = 0] = "INT";
    ValueType[ValueType["DOUBLE"] = 1] = "DOUBLE";
})(ValueType = exports.ValueType || (exports.ValueType = {}));
//# sourceMappingURL=Metric.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses
 * constant NoopMetrics for all of its methods.
 */
class NoopMeter {
    constructor() { }
    /**
     * Returns constant noop measure.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createMeasure(name, options) {
        return exports.NOOP_MEASURE_METRIC;
    }
    /**
     * Returns a constant noop counter.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createCounter(name, options) {
        return exports.NOOP_COUNTER_METRIC;
    }
    /**
     * Returns constant noop observer.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createObserver(name, options) {
        return exports.NOOP_OBSERVER_METRIC;
    }
}
exports.NoopMeter = NoopMeter;
class NoopMetric {
    constructor(instrument) {
        this._instrument = instrument;
    }
    /**
     * Returns a Bound Instrument associated with specified Labels.
     * It is recommended to keep a reference to the Bound Instrument instead of
     * always calling this method for every operations.
     * @param labels key-values pairs that are associated with a specific metric
     *     that you want to record.
     */
    bind(labels) {
        return this._instrument;
    }
    /**
     * Removes the Binding from the metric, if it is present.
     * @param labels key-values pairs that are associated with a specific metric.
     */
    unbind(labels) {
        return;
    }
    /**
     * Clears all timeseries from the Metric.
     */
    clear() {
        return;
    }
}
exports.NoopMetric = NoopMetric;
class NoopCounterMetric extends NoopMetric {
    add(value, labels) {
        this.bind(labels).add(value);
    }
}
exports.NoopCounterMetric = NoopCounterMetric;
class NoopMeasureMetric extends NoopMetric {
    record(value, labels, correlationContext, spanContext) {
        if (typeof correlationContext === 'undefined') {
            this.bind(labels).record(value);
        }
        else if (typeof spanContext === 'undefined') {
            this.bind(labels).record(value, correlationContext);
        }
        else {
            this.bind(labels).record(value, correlationContext, spanContext);
        }
    }
}
exports.NoopMeasureMetric = NoopMeasureMetric;
class NoopObserverMetric extends NoopMetric {
    setCallback(callback) { }
}
exports.NoopObserverMetric = NoopObserverMetric;
class NoopBoundCounter {
    add(value) {
        return;
    }
}
exports.NoopBoundCounter = NoopBoundCounter;
class NoopBoundMeasure {
    record(value, correlationContext, spanContext) {
        return;
    }
}
exports.NoopBoundMeasure = NoopBoundMeasure;
class NoopBoundObserver {
    setCallback(callback) { }
}
exports.NoopBoundObserver = NoopBoundObserver;
exports.NOOP_METER = new NoopMeter();
exports.NOOP_BOUND_COUNTER = new NoopBoundCounter();
exports.NOOP_COUNTER_METRIC = new NoopCounterMetric(exports.NOOP_BOUND_COUNTER);
exports.NOOP_BOUND_MEASURE = new NoopBoundMeasure();
exports.NOOP_MEASURE_METRIC = new NoopMeasureMetric(exports.NOOP_BOUND_MEASURE);
exports.NOOP_BOUND_OBSERVER = new NoopBoundObserver();
exports.NOOP_OBSERVER_METRIC = new NoopObserverMetric(exports.NOOP_BOUND_OBSERVER);
//# sourceMappingURL=NoopMeter.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/metrics/NoopMeterProvider.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NoopMeter_1 = __webpack_require__(/*! ./NoopMeter */ "./node_modules/@opentelemetry/api/build/src/metrics/NoopMeter.js");
/**
 * An implementation of the {@link MeterProvider} which returns an impotent Meter
 * for all calls to `getMeter`
 */
class NoopMeterProvider {
    getMeter(_name, _version) {
        return NoopMeter_1.NOOP_METER;
    }
}
exports.NoopMeterProvider = NoopMeterProvider;
exports.NOOP_METER_PROVIDER = new NoopMeterProvider();
//# sourceMappingURL=NoopMeterProvider.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const trace_flags_1 = __webpack_require__(/*! ./trace_flags */ "./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js");
exports.INVALID_TRACE_ID = '0';
exports.INVALID_SPAN_ID = '0';
const INVALID_SPAN_CONTEXT = {
    traceId: exports.INVALID_TRACE_ID,
    spanId: exports.INVALID_SPAN_ID,
    traceFlags: trace_flags_1.TraceFlags.NONE,
};
/**
 * The NoopSpan is the default {@link Span} that is used when no Span
 * implementation is available. All operations are no-op including context
 * propagation.
 */
class NoopSpan {
    constructor(_spanContext = INVALID_SPAN_CONTEXT) {
        this._spanContext = _spanContext;
    }
    // Returns a SpanContext.
    context() {
        return this._spanContext;
    }
    // By default does nothing
    setAttribute(key, value) {
        return this;
    }
    // By default does nothing
    setAttributes(attributes) {
        return this;
    }
    // By default does nothing
    addEvent(name, attributes) {
        return this;
    }
    // By default does nothing
    setStatus(status) {
        return this;
    }
    // By default does nothing
    updateName(name) {
        return this;
    }
    // By default does nothing
    end(endTime) { }
    // isRecording always returns false for noopSpan.
    isRecording() {
        return false;
    }
}
exports.NoopSpan = NoopSpan;
exports.NOOP_SPAN = new NoopSpan();
//# sourceMappingURL=NoopSpan.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NoopSpan_1 = __webpack_require__(/*! ./NoopSpan */ "./node_modules/@opentelemetry/api/build/src/trace/NoopSpan.js");
/**
 * No-op implementations of {@link Tracer}.
 */
class NoopTracer {
    getCurrentSpan() {
        return NoopSpan_1.NOOP_SPAN;
    }
    // startSpan starts a noop span.
    startSpan(name, options) {
        return NoopSpan_1.NOOP_SPAN;
    }
    withSpan(span, fn) {
        return fn();
    }
    bind(target, span) {
        return target;
    }
}
exports.NoopTracer = NoopTracer;
exports.NOOP_TRACER = new NoopTracer();
//# sourceMappingURL=NoopTracer.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/NoopTracerProvider.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const NoopTracer_1 = __webpack_require__(/*! ./NoopTracer */ "./node_modules/@opentelemetry/api/build/src/trace/NoopTracer.js");
/**
 * An implementation of the {@link TracerProvider} which returns an impotent Tracer
 * for all calls to `getTracer`
 */
class NoopTracerProvider {
    getTracer(_name, _version) {
        return NoopTracer_1.NOOP_TRACER;
    }
}
exports.NoopTracerProvider = NoopTracerProvider;
exports.NOOP_TRACER_PROVIDER = new NoopTracerProvider();
//# sourceMappingURL=NoopTracerProvider.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/span_kind.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/span_kind.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Type of span. Can be used to specify additional relationships between spans
 * in addition to a parent/child relationship.
 */
var SpanKind;
(function (SpanKind) {
    /** Default value. Indicates that the span is used internally. */
    SpanKind[SpanKind["INTERNAL"] = 0] = "INTERNAL";
    /**
     * Indicates that the span covers server-side handling of an RPC or other
     * remote request.
     */
    SpanKind[SpanKind["SERVER"] = 1] = "SERVER";
    /**
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     */
    SpanKind[SpanKind["CLIENT"] = 2] = "CLIENT";
    /**
     * Indicates that the span describes producer sending a message to a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["PRODUCER"] = 3] = "PRODUCER";
    /**
     * Indicates that the span describes consumer receiving a message from a
     * broker. Unlike client and server, there is no direct critical path latency
     * relationship between producer and consumer spans.
     */
    SpanKind[SpanKind["CONSUMER"] = 4] = "CONSUMER";
})(SpanKind = exports.SpanKind || (exports.SpanKind = {}));
//# sourceMappingURL=span_kind.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/status.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/status.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An enumeration of canonical status codes.
 */
var CanonicalCode;
(function (CanonicalCode) {
    /**
     * Not an error; returned on success
     */
    CanonicalCode[CanonicalCode["OK"] = 0] = "OK";
    /**
     * The operation was cancelled (typically by the caller).
     */
    CanonicalCode[CanonicalCode["CANCELLED"] = 1] = "CANCELLED";
    /**
     * Unknown error.  An example of where this error may be returned is
     * if a status value received from another address space belongs to
     * an error-space that is not known in this address space.  Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     */
    CanonicalCode[CanonicalCode["UNKNOWN"] = 2] = "UNKNOWN";
    /**
     * Client specified an invalid argument.  Note that this differs
     * from FAILED_PRECONDITION.  INVALID_ARGUMENT indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     */
    CanonicalCode[CanonicalCode["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
    /**
     * Deadline expired before operation could complete.  For operations
     * that change the state of the system, this error may be returned
     * even if the operation has completed successfully.  For example, a
     * successful response from a server could have been delayed long
     * enough for the deadline to expire.
     */
    CanonicalCode[CanonicalCode["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
    /**
     * Some requested entity (e.g., file or directory) was not found.
     */
    CanonicalCode[CanonicalCode["NOT_FOUND"] = 5] = "NOT_FOUND";
    /**
     * Some entity that we attempted to create (e.g., file or directory)
     * already exists.
     */
    CanonicalCode[CanonicalCode["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
    /**
     * The caller does not have permission to execute the specified
     * operation.  PERMISSION_DENIED must not be used for rejections
     * caused by exhausting some resource (use RESOURCE_EXHAUSTED
     * instead for those errors).  PERMISSION_DENIED must not be
     * used if the caller can not be identified (use UNAUTHENTICATED
     * instead for those errors).
     */
    CanonicalCode[CanonicalCode["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
    /**
     * Some resource has been exhausted, perhaps a per-user quota, or
     * perhaps the entire file system is out of space.
     */
    CanonicalCode[CanonicalCode["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
    /**
     * Operation was rejected because the system is not in a state
     * required for the operation's execution.  For example, directory
     * to be deleted may be non-empty, an rmdir operation is applied to
     * a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *
     *  - Use UNAVAILABLE if the client can retry just the failing call.
     *  - Use ABORTED if the client should retry at a higher-level
     *    (e.g., restarting a read-modify-write sequence).
     *  - Use FAILED_PRECONDITION if the client should not retry until
     *    the system state has been explicitly fixed.  E.g., if an "rmdir"
     *    fails because the directory is non-empty, FAILED_PRECONDITION
     *    should be returned since the client should not retry unless
     *    they have first fixed up the directory by deleting files from it.
     *  - Use FAILED_PRECONDITION if the client performs conditional
     *    REST Get/Update/Delete on a resource and the resource on the
     *    server does not match the condition. E.g., conflicting
     *    read-modify-write on the same resource.
     */
    CanonicalCode[CanonicalCode["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
    /**
     * The operation was aborted, typically due to a concurrency issue
     * like sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     */
    CanonicalCode[CanonicalCode["ABORTED"] = 10] = "ABORTED";
    /**
     * Operation was attempted past the valid range.  E.g., seeking or
     * reading past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate INVALID_ARGUMENT if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OUT_OF_RANGE if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE.  We recommend using OUT_OF_RANGE (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OUT_OF_RANGE error to detect when
     * they are done.
     */
    CanonicalCode[CanonicalCode["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
    /**
     * Operation is not implemented or not supported/enabled in this service.
     */
    CanonicalCode[CanonicalCode["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
    /**
     * Internal errors.  Means some invariants expected by underlying
     * system has been broken.  If you see one of these errors,
     * something is very broken.
     */
    CanonicalCode[CanonicalCode["INTERNAL"] = 13] = "INTERNAL";
    /**
     * The service is currently unavailable.  This is a most likely a
     * transient condition and may be corrected by retrying with
     * a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION,
     * ABORTED, and UNAVAILABLE.
     */
    CanonicalCode[CanonicalCode["UNAVAILABLE"] = 14] = "UNAVAILABLE";
    /**
     * Unrecoverable data loss or corruption.
     */
    CanonicalCode[CanonicalCode["DATA_LOSS"] = 15] = "DATA_LOSS";
    /**
     * The request does not have valid authentication credentials for the
     * operation.
     */
    CanonicalCode[CanonicalCode["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
})(CanonicalCode = exports.CanonicalCode || (exports.CanonicalCode = {}));
//# sourceMappingURL=status.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js":
/*!************************************************************************!*\
  !*** ./node_modules/@opentelemetry/api/build/src/trace/trace_flags.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * An enumeration that represents global trace flags. These flags are
 * propagated to all child {@link Span}. These determine features such as
 * whether a Span should be traced. It is implemented as a bitmask.
 */
var TraceFlags;
(function (TraceFlags) {
    /** Represents no flag set. */
    TraceFlags[TraceFlags["NONE"] = 0] = "NONE";
    /** Bit to represent whether trace is sampled in trace flags. */
    TraceFlags[TraceFlags["SAMPLED"] = 1] = "SAMPLED";
})(TraceFlags = exports.TraceFlags || (exports.TraceFlags = {}));
//# sourceMappingURL=trace_flags.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = __webpack_require__(/*! ./context */ "./node_modules/@opentelemetry/context-base/build/src/context.js");
class NoopContextManager {
    active() {
        return context_1.Context.ROOT_CONTEXT;
    }
    with(context, fn) {
        return fn();
    }
    bind(target, context) {
        return target;
    }
    enable() {
        return this;
    }
    disable() {
        return this;
    }
}
exports.NoopContextManager = NoopContextManager;
//# sourceMappingURL=NoopContextManager.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/context-base/build/src/context.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-base/build/src/context.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2020, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Class which stores and manages current context values. All methods which
 * update context such as get and delete do not modify an existing context,
 * but create a new one with updated values.
 */
class Context {
    /**
     * Construct a new context which inherits values from an optional parent context.
     *
     * @param parentContext a context from which to inherit values
     */
    constructor(parentContext) {
        this._currentContext = parentContext ? new Map(parentContext) : new Map();
    }
    /** Get a key to uniquely identify a context value */
    static createKey(description) {
        return Symbol(description);
    }
    /**
     * Get a value from the context.
     *
     * @param key key which identifies a context value
     */
    getValue(key) {
        return this._currentContext.get(key);
    }
    /**
     * Create a new context which inherits from this context and has
     * the given key set to the given value.
     *
     * @param key context key for which to set the value
     * @param value value to set for the given key
     */
    setValue(key, value) {
        const context = new Context(this._currentContext);
        context._currentContext.set(key, value);
        return context;
    }
    /**
     * Return a new context which inherits from this context but does
     * not contain a value for the given key.
     *
     * @param key context key for which to clear a value
     */
    deleteValue(key) {
        const context = new Context(this._currentContext);
        context._currentContext.delete(key);
        return context;
    }
}
exports.Context = Context;
/** The root context is used as the default parent context when there is no active context */
Context.ROOT_CONTEXT = new Context();
/**
 * This is another identifier to the root context which allows developers to easily search the
 * codebase for direct uses of context which need to be removed in later PRs.
 *
 * It's existence is temporary and it should be removed when all references are fixed.
 */
Context.TODO = Context.ROOT_CONTEXT;
//# sourceMappingURL=context.js.map

/***/ }),

/***/ "./node_modules/@opentelemetry/context-base/build/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@opentelemetry/context-base/build/src/index.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*!
 * Copyright 2019, OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./context */ "./node_modules/@opentelemetry/context-base/build/src/context.js"));
__export(__webpack_require__(/*! ./NoopContextManager */ "./node_modules/@opentelemetry/context-base/build/src/NoopContextManager.js"));
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/index.js ***!
  \*****************************************************/
/*! exports provided: v1, v3, v4, v5, NIL, version, validate, stringify, parse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "./node_modules/uuid/dist/esm-browser/v1.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v1", function() { return _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "./node_modules/uuid/dist/esm-browser/v3.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v3", function() { return _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v4", function() { return _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "./node_modules/uuid/dist/esm-browser/v5.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "v5", function() { return _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ "./node_modules/uuid/dist/esm-browser/nil.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NIL", function() { return _nil_js__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ "./node_modules/uuid/dist/esm-browser/version.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "version", function() { return _version_js__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validate", function() { return _validate_js__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringify", function() { return _stringify_js__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_8__["default"]; });











/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/md5.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/md5.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ __webpack_exports__["default"] = (md5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/nil.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/nil.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/parse.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function parse(uuid) {
  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ __webpack_exports__["default"] = (parse);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return rng; });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
// find the complete implementation of crypto (msCrypto) on IE11.
var getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/sha1.js":
/*!****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/sha1.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ __webpack_exports__["default"] = (sha1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ __webpack_exports__["default"] = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v1.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v1.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || Object(_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ __webpack_exports__["default"] = (v1);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v3.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v3.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "./node_modules/uuid/dist/esm-browser/md5.js");


var v3 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v3);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v35.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v35.js ***!
  \***************************************************/
/*! exports provided: DNS, URL, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DNS", function() { return DNS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URL", function() { return URL; });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ "./node_modules/uuid/dist/esm-browser/parse.js");



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ __webpack_exports__["default"] = (function (name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = Object(_parse_js__WEBPACK_IMPORTED_MODULE_1__["default"])(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return Object(_stringify_js__WEBPACK_IMPORTED_MODULE_0__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
});

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return Object(_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ __webpack_exports__["default"] = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v5.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v5.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "./node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "./node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = Object(_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ __webpack_exports__["default"] = (v5);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ __webpack_exports__["default"] = (validate);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/version.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!Object(_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ __webpack_exports__["default"] = (version);

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// src/index.js
const { BlobServiceClient, StorageSharedKeyCredential } = __webpack_require__(/*! @azure/storage-blob */ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.browser.js");
// Now do something interesting with BlobServiceClient :)

var Azure = {};

Azure.BlobServiceClient = BlobServiceClient;

Azure.StorageSharedKeyCredential = function(account, account_key) {
  return new StorageSharedKeyCredential(account, account_key);
};


if (typeof window !== 'undefined') window.Azure = Azure;
if (true) module.exports = Azure;
if (typeof self !== 'undefined') self.Azure = Azure;

/***/ }),

/***/ 0:
/*!********************!*\
  !*** os (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
});
//# sourceMappingURL=azure-sdk.js.map